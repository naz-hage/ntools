<Project InitialTargets="PROPERTIES" DefaultTargets="SOLUTION"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<!--
	- This is a common.targets file that can be used by any project.  Customizations is made by overriding
		the properties or targets in the project file.  The common.targets file is imported at the start of
		the project file, so any properties or targets defined in the project file will override the ones.
	- This file is imported by the project file using the following statement:
		<Import Project="common.targets" />
	- This is generated by nbuild.exe
    - @REM for more information, please visit <TBD>		
	Reference: https://learn.microsoft.com/en-us/visualstudio/msbuild/walkthrough-using-msbuild?view=vs-2022
	-->

	<PropertyGroup>
		<!--The SolutionName should be replaced in nbuild.targets-->
		<SolutionName>$([System.IO.Path]::GetFileNameWithoutExtension('$(MSBuildProjectDirectory)'))</SolutionName>
		<DevDriveRaw>$([System.IO.Path]::GetPathRoot('$(MSBuildProjectDirectory)'))</DevDriveRaw>
		<MainDirRaw>$(MSBuildProjectDirectory.Replace('$(DevDriveRaw)', '').Replace('$(SolutionName)', ''))</MainDirRaw>

		<!-- Trim the trailing backslash -->
		<DevDrive>$(DevDriveRaw.TrimEnd('\\'))</DevDrive>
		<MainDir>$(MainDirRaw.TrimEnd('\\'))</MainDir>
		<!-- This is the location when the app deployed or installed -->

		<BuildTools>$(ProgramFiles)\nbuild</BuildTools>
		<CommonTargetsVersion>6.2.0</CommonTargetsVersion>
		
		<!-- Code Coverage Configuration -->
		<EnableCodeCoverage Condition="'$(EnableCodeCoverage)' == ''">true</EnableCodeCoverage>
		<CoverageAssemblyFilters Condition="'$(CoverageAssemblyFilters)' == ''">+*;-*Tests*;-*Test*</CoverageAssemblyFilters>
		<CoverageClassFilters Condition="'$(CoverageClassFilters)' == ''">+*;-*.Tests.*;-*.Test.*</CoverageClassFilters>
	</PropertyGroup>
	
	<UsingTask TaskName="NbuildTasks.ColorMessage" AssemblyFile="$(BuildTools)\NbuildTasks.dll"/>
	<UsingTask TaskName="NbuildTasks.RedError" AssemblyFile="$(BuildTools)\NbuildTasks.dll" />
	<UsingTask TaskName="NbuildTasks.Git" AssemblyFile="$(BuildTools)\NbuildTasks.dll" />
	<UsingTask TaskName="NbuildTasks.WebDownload" AssemblyFile="$(BuildTools)\NbuildTasks.dll" />
	<UsingTask TaskName="NbuildTasks.FileVersion" AssemblyFile="$(BuildTools)\NbuildTasks.dll" />
	<UsingTask TaskName="NbuildTasks.UnZip" AssemblyFile="$(BuildTools)\NbuildTasks.dll" />
	<UsingTask TaskName="NbuildTasks.Zip" AssemblyFile="$(BuildTools)\NbuildTasks.dll" />
	<UsingTask TaskName="NbuildTasks.Pwsh" AssemblyFile="$(BuildTools)\NbuildTasks.dll" />
	

	<Import Project="$(BuildTools)\apps-versions.targets"/>
	<Import Project="$(BuildTools)\git.targets"/>
	<Import Project="$(BuildTools)\dotnet.targets"/>
	<Import Project="$(BuildTools)\code.targets"/>
	<Import Project="$(BuildTools)\node.targets"/>
	<Import Project="$(BuildTools)\mongodb.targets"/>
	<Import Project="$(BuildTools)\nuget.targets"/>
	<Import Project="$(BuildTools)\ngit.targets"/>
	<Import Project="$(BuildTools)\docker.targets"/>
	<Import Project="$(BuildTools)\terraform.targets"/>
	
	<!-- Common properties that will be used by all targets -->
	<Target Name="PROPERTIES" DependsOnTargets="TAG">
		<PropertyGroup>
			<NbuildExe>"$(BuildTools)\nb.exe"</NbuildExe>
			<NugetExe>$(BuildTools)\nuget.exe</NugetExe>
			<ZipExe>$(ProgramFiles)\7-Zip\7z.exe</ZipExe>
			<TargetRelease>Release</TargetRelease>
			<TargetDebug>Debug</TargetDebug>
			<SolutionDir>$(MSBuildProjectDirectory)</SolutionDir>			
			<OutputPathRelease>$(SolutionDir)\$(TargetRelease)</OutputPathRelease>
			<OutputPathDebug>$(SolutionDir)\$(TargetDebug)</OutputPathDebug>
			<ArtifactsDir>$(DevDrive)\Artifacts</ArtifactsDir>
			<TestFilesFolder>$(DevDrive)\Test</TestFilesFolder>
			
		</PropertyGroup>

		<RedError Condition="'$(ProductVersion)' == ''" Message="Error: Version property is not defined. Type Nb.exe git_settag -tag 0.0.1" />
		<RedError Condition="'$(SolutionName)' == ''" Message="Error: SolutionName property is not defined." />
		<RedError Condition="'$(DeploymentFolder)' == ''" Message="Error: DeploymentFolder property is not defined." />

		<Message Text="CommonTargets Version: $(CommonTargetsVersion)"/>
		<Message Text="Solution Name: $(SolutionName)"/>
		<Message Text="Solution Dir: $(SolutionDir)"/>
		<Message Text="MSBuildProjectDirectory Dir: $(MSBuildProjectDirectory)"/>
		<Message Text="Product Version: $(ProductVersion)"/>
		<Exec Command="git remote -v" ContinueOnError="True"></Exec>
		<Exec Command="git branch" ContinueOnError="True"></Exec>
		<Exec Command="git describe" ConsoleToMSBuild="true" ContinueOnError="True" ></Exec>
		<Message Text="MSBuild = $(MSBuildToolsPath) Version = VS$(VisualStudioVersion)"/>

		<Message Text="==> COMMON_DONE"/>
		<OnError ExecuteTargets="HandleError"/>
	</Target>

	<!-- Clean up the project and artifacts folder -->
	<Target Name="CLEAN" >
		<MSBuild Projects="$(SolutionDir)\$(SolutionName).sln" Targets="Clean" Properties="Configuration=$(TargetRelease);Platform=Any CPU" />
		<MSBuild Projects="$(SolutionDir)\$(SolutionName).sln" Targets="Clean" Properties="Configuration=$(TargetDebug);Platform=Any CPU"/>
		
		<RemoveDir Directories="$(OutputPathRelease);
                            $(OutputPathDebug);
                            $(SolutionDir)\x64;
							"/>

		<ItemGroup>
			<FilesToDelete Include="$(SolutionDir)\**\obj\**\*;$(SolutionDir)\**\bin\**\*" />
		</ItemGroup>
		<Delete Files="@(FilesToDelete)" />
		<RemoveDir Directories="$(SolutionDir)\**\obj" />
		<ItemGroup>
			<DirectoriesToDelete Include="$(SolutionDir)\**\obj\**\*;$(SolutionDir)\**\bin\**\*" />
		</ItemGroup>
		<RemoveDir Directories="@(DirectoriesToDelete)" />

		<Message Text="==> COMMON_DONE"/>
	</Target>

	<!-- Install dependencies -->
	<Target Name="INSTALL_DEP" >
		<Exec Command="dotnet restore"/>
		<Message Text="==> COMMON_DONE"/>
	</Target>

	<!-- Opt out of the DOTNET_CLI_TELEMETRY_OPTOUT - move to common -->
	<Target Name="TELEMETRY_OPT_OUT" AfterTargets="AUTOTAG_PROD">
		<Exec Command='setx DOTNET_CLI_TELEMETRY_OPTOUT 1'/>
		<Message Text="==> DONE"/>
	</Target>

	<!-- Create a development package for testing without incrementing the version-->
	<Target Name="DEV" DependsOnTargets="
				SOLUTION;
                TEST">
  	</Target>
	
	<!-- Create a stage package for testing -->
	<Target Name="STAGE" DependsOnTargets="
                CLEAN;
                TAG;
                AUTOTAG_STAGE;
				SOLUTION;
                TEST;
				COPY_ARTIFACTS;
                PACKAGE">
  </Target>

  <!-- Create a PROD package for release -->
  <Target Name="PROD" DependsOnTargets="
                CLEAN;
                GIT_PULL;
                TAG;
                AUTOTAG_PROD;
                SOLUTION;
				TEST;
                COPY_ARTIFACTS;
                PACKAGE">
  
  </Target>

	<!-- Creates a stage or prod release -->
	<Target Name="GITHUB_RELEASE" DependsOnTargets="ARTIFACTS;GIT_BRANCH" AfterTargets="PROD" Condition="'$(GITHUB_ACTIONS)' != ''" >
		<Git Command="PushTag" TaskParameter="$(ProductVersion)" />
		<Exec Command='"$(BuildTools)\nb.exe"  release_create --repo $(OWNER)/$(SolutionName) --tag $(ProductVersion) --branch $(GitBranch) --file $(ArtifactsFolder).zip' WorkingDirectory="$(BuildTools)" />

		<Message Text="==> DONE"/>
	</Target>

	<!-- Creates a stage or prod pre-release -->
	<Target Name="GITHUB_PRE_RELEASE" DependsOnTargets="ARTIFACTS;GIT_BRANCH" AfterTargets="STAGE" Condition="'$(GITHUB_ACTIONS)' != ''" >
		<Git Command="PushTag" TaskParameter="$(ProductVersion)" />
		<Exec Command='"$(BuildTools)\nb.exe" pre_release_create --repo $(OWNER)/$(SolutionName) --tag $(ProductVersion) --branch $(GitBranch) --file $(ArtifactsFolder).zip' WorkingDirectory="$(BuildTools)" />

		<Message Text="==> DONE"/>
	</Target>

	<!-- Create a STAGE package and deploy for testing -->
	<Target Name="STAGE_DEPLOY" DependsOnTargets="
                            STAGE;
                            DEPLOY">
		<Message Text="==> COMMON_DONE"/>
	</Target>

	<!-- Create a PROD package and deploy for release -->	
	<Target Name="PROD_DEPLOY" DependsOnTargets="
                            PROD;
                            DEPLOY">
		<Message Text="==> COMMON_DONE"/>
	</Target>

	<!-- Build the solution Release configuration  using dotnet build-->
	<Target Name="SOLUTION" DependsOnTargets="TAG;INSTALL_DEP">
		<Message Text="Git tag: $(ProductVersion)"/>
		<Exec Command='dotnet build --no-restore $(SolutionDir)\$(SolutionName).sln --configuration $(TargetRelease) /p:FileVersion=$(ProductVersion) /p:AssemblyVersion=$(ProductVersion) /p:UICulture="en-US" /p:Culture="en-US"' />
		<Message Text="==> COMMON_DONE"/>
	</Target>

	<!-- Build the solution Release configuration  using MSBuild-->
	<Target Name="SOLUTION_MSBUILD" DependsOnTargets="TAG">
		<Exec Command="dotnet restore"></Exec>
		<MSBuild Projects="$(SolutionDir)\$(SolutionName).sln" Properties="Configuration=$(TargetRelease);Platform=Any CPU;Version=$(ProductVersion);AssemblyVersion=$(ProductVersion);UICulture=en-US;Culture=en-US"/>
		<Message Text="==> COMMON_DONE"/>
	</Target>

	<!-- Create a package for the solution default is a zip file of all artifacts -->
	<Target Name="PACKAGE" DependsOnTargets="ARTIFACTS;TAG">
		<Exec Command='"$(ZipExe)" a -r -tzip $(ArtifactsFolder).zip $(ArtifactsFolder)\*'/>
		
		<RemoveDir Directories="$(ArtifactsFolder);"/> 
		<Message Text="==> COMMON_DONE"/>
	</Target>

	<!-- Save the artifacts to the artifacts folder -->
	<Target Name="COPY_ARTIFACTS" DependsOnTargets="ARTIFACTS;TAG">
		<Error Condition="'$(ArtifactsFolder)' == ''" Text="Error: ArtifactsFolder property is not defined." />
		<Message Text="ArtifactsFolder: $(ArtifactsFolder)"/>


		<Copy SourceFiles="@(BinaryFiles)"
			  DestinationFolder="$(ArtifactsFolder)"
			  Condition="'@(BinaryFiles, ' ')' != ''"
			  SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(EnUSFiles)"
			DestinationFolder="$(ArtifactsFolder)\en-US"
			Condition="'@(EnUSFiles, ' ')' != ''"
			SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(ref)"
		  DestinationFolder="$(ArtifactsFolder)\ref"
		  Condition="'@(ref, ' ')' != ''"
			  SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(RunTimesLib)"
			  DestinationFolder="$(ArtifactsFolder)\runtimes\win\lib\netstandard2.0"
			  Condition="'@(RunTimesLib, ' ')' != ''"
			  SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(Default)"
			  DestinationFolder="$(ArtifactsFolder)\Default"
			  Condition="'@(Default, ' ')' != ''"
			  SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(RunTimesLibNet)"
			  DestinationFolder="$(ArtifactsFolder)\runtimes\win\lib\net9.0"
			  Condition="'@(RunTimesLibNet, ' ')' != ''"
			  SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(RunTimesNetStandard20)"
			DestinationFolder="$(ArtifactsFolder)\netstandard2.0\"
			Condition="'@(RunTimesNetStandard20, ' ')' != ''"
			SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(RunTimesNetStandard21)"
			DestinationFolder="$(ArtifactsFolder)\netstandard2.1\"
			Condition="'@(RunTimesNetStandard21, ' ')' != ''"
			SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(RunTimesNative)"
			DestinationFolder="$(ArtifactsFolder)\runtimes\win\native\"
			Condition="'@(RunTimesNative, ' ')' != ''"
			SkipUnchangedFiles="true" />

		<Message Text="==> COMMON_DONE"/>
	</Target>
	
	<!-- Deploy the package. default is to extract artifacts into DeploymentProperty folder -->
	<Target Name="DEPLOY" DependsOnTargets="IS_ADMIN;ARTIFACTS">
		<RedError Condition="'$(IsAdmin)' == false" Message="Must be an admin to deploy project: '$(SolutionName)'." />
		<RedError Condition="'$(DeploymentFolder)' == ''" Message="Error: DeploymentFolder property is not defined." />
		<Message Text="DeploymentFolder: $(DeploymentFolder)"/>

		<PropertyGroup>
			<SetupDir>$(TEMP)\home</SetupDir>
		</PropertyGroup>

		<Exec Command='"$(ZipExe)" x $(ArtifactsFolder).zip -o"$(DeploymentFolder)" -y'/>
		<RemoveDir Directories="$(SetupDir)"></RemoveDir>
		<Message Text="Deployed Success to $(DeploymentFolder)"/>
		<Message Text="==> COMMON_DONE"/>
	</Target>

	<!-- Run all tests using dotnet test in Release mode -->
	<Target Name="TEST" DependsOnTargets="ARTIFACTS;TAG">
		<RemoveDir Directories="$(ArtifactsTestResultsFolder)"></RemoveDir>
		<!-- Conditionally collect code coverage based on EnableCodeCoverage property -->
		<PropertyGroup>
			<TestCommand Condition="'$(EnableCodeCoverage)' == 'true'">dotnet test $(SolutionName).sln --configuration $(TargetRelease) --logger "console;verbosity=normal" --logger trx --results-directory:$(ArtifactsTestResultsFolder) --verbosity normal --collect:"XPlat Code Coverage"</TestCommand>
			<TestCommand Condition="'$(EnableCodeCoverage)' != 'true'">dotnet test $(SolutionName).sln --no-build --configuration $(TargetRelease) --logger "console;verbosity=normal" %(DotNetTestFiles.Identity) --logger trx --results-directory:$(ArtifactsTestResultsFolder) --verbosity normal</TestCommand>
		</PropertyGroup>
		<Exec Command='$(TestCommand)'/>
		<Message Text="==> COMMON_DONE"/>
	</Target>

	<!-- Run all tests using dotnet test in Debug mode -->
	<Target Name="TEST_DEBUG" DependsOnTargets="ARTIFACTS;TAG">
		<Exec Command='dotnet.exe test --configuration $(TargetDebug) --logger "console;verbosity=normal" %(DotNetTestFiles.Identity) --collect:"XPlat Code Coverage" --logger trx --results-directory:$(ArtifactsTestResultsFolder) --verbosity normal'/>
		<Message Text="==> COMMON_DONE"/>
	</Target>

	<!-- Publish all non-test projects to artifacts folder -->
	<Target Name="PUBLISH" DependsOnTargets="ARTIFACTS;TAG">
		<RemoveDir Directories="$(ArtifactsFolder)"></RemoveDir>
		<Message Text="Publishing all non-test projects using ntools-scripts module" Importance="high" />
		<Exec Command='pwsh -NoProfile -ExecutionPolicy Bypass -Command "Import-Module &apos;$(BuildTools)\modules\ntools-scripts\ntools-scripts.psm1&apos; -Force; Publish-AllProjects -OutputDir &apos;$(ArtifactsFolder)&apos; -Version &apos;$(ProductVersion)&apos; -RepositoryRoot &apos;$(SolutionDir)&apos;"' WorkingDirectory="$(SolutionDir)" />
		<Message Text="All non-test projects published to $(ArtifactsFolder)" Importance="high" />
		<Message Text="==> COMMON_DONE"/>
	</Target>

	<!-- Generate code coverage reports -->
	<Target Name="COVERAGE" DependsOnTargets="ARTIFACTS;TAG;" 
			Condition="'$(EnableCodeCoverage)' == 'true'">
		<Message Text="Generating code coverage reports..." />
		
		<!-- Debug: Show property values -->
		<Message Text="Debug: SolutionDir = $(SolutionDir)" />
		<Message Text="Debug: CoverageFolder = $(CoverageFolder)" />
		<Message Text="Debug: ArtifactsTestResultsFolder = $(ArtifactsTestResultsFolder)" />
		
		<!-- Ensure we have test results before generating coverage -->
		<Error Condition="!Exists('$(ArtifactsTestResultsFolder)')" 
			   Text="Test results folder not found at: $(ArtifactsTestResultsFolder). Please run tests first with 'nb STAGE' or 'nb TEST'." />
		
		<!-- Install ReportGenerator tool if not already installed -->
		<Exec Command="dotnet tool install --global dotnet-reportgenerator-globaltool" 
			  ContinueOnError="true" 
			  IgnoreExitCode="true" />
		
		<!-- Create coverage directory -->
		<MakeDir Directories="$(CoverageFolder)" Condition="!Exists('$(CoverageFolder)')" />
		
		<!-- Debug: Show what directory was created -->
		<Message Text="Debug: Coverage directory created/exists at: $(CoverageFolder)" />
		
		<!-- Generate coverage report using ReportGenerator with configurable filters -->
		<Message Text="Debug: Running ReportGenerator with targetdir: $(CoverageFolder)" />
		<Exec Command='reportgenerator "-reports:$(ArtifactsTestResultsFolder)\**\coverage.cobertura.xml" "-targetdir:$(CoverageFolder)" "-reporttypes:Html;Cobertura;TextSummary" "-assemblyfilters:$(CoverageAssemblyFilters)" "-classfilters:$(CoverageClassFilters)"' 
			  WorkingDirectory="$(SolutionDir)"
			  ContinueOnError="true">
			<Output TaskParameter="ExitCode" PropertyName="ReportGenExitCode" />
		</Exec>
		
		<!-- Debug: Check if Summary.txt was created in the right place -->
		<Message Text="Debug: Checking for Summary.txt at: $(CoverageFolder)\Summary.txt" />
		<Message Condition="Exists('$(CoverageFolder)\Summary.txt')" Text="Debug: ✅ Summary.txt found at correct location" />
		<Message Condition="!Exists('$(CoverageFolder)\Summary.txt')" Text="Debug: ❌ Summary.txt NOT found at expected location" />
		
		<!-- Fallback: try with different coverage file pattern -->
		<Exec Condition="'$(ReportGenExitCode)' != '0'" 
			  Command='reportgenerator "-reports:$(ArtifactsTestResultsFolder)\**\*.xml" "-targetdir:$(CoverageFolder)" "-reporttypes:Html;Cobertura;TextSummary" "-assemblyfilters:$(CoverageAssemblyFilters)" "-classfilters:$(CoverageClassFilters)"' 
			  WorkingDirectory="$(SolutionDir)"
			  ContinueOnError="true">
			<Output TaskParameter="ExitCode" PropertyName="ReportGenFallbackExitCode" />
		</Exec>
		
		<!-- Copy coverage file to root for GitHub Actions -->
		<Copy SourceFiles="$(CoverageFolder)\Cobertura.xml" 
			  DestinationFiles="$(SolutionDir)\coverage.cobertura.xml" 
			  ContinueOnError="true" />
		
		<Message Text="Code coverage report generated in: $(CoverageFolder)" />
		<Message Text="Open $(CoverageFolder)\index.html to view the report" />
		<Message Text="==> COMMON_DONE" />
	</Target>

	<!-- Display high-level code coverage summary -->
	<Target Name="COVERAGE_SUMMARY" DependsOnTargets="COVERAGE" 
			Condition="'$(EnableCodeCoverage)' == 'true'">
		<Message Text="Displaying code coverage summary..." />
		
		<!-- Define coverage summary file path using configurable CoverageFolder -->
		<PropertyGroup>
			<CoverageSummaryFile>$(CoverageFolder)\Summary.txt</CoverageSummaryFile>
		</PropertyGroup>
		
		<!-- Check if summary file exists -->
		<Error Condition="!Exists('$(CoverageSummaryFile)')" 
			   Text="Coverage summary file not found at: $(CoverageSummaryFile). Please run 'nb COVERAGE' first to generate coverage reports." />
		
		<!-- Display header -->
		<Message Text="════════════════════════════════════════════════════════════════" />
		<Message Text="                    CODE COVERAGE SUMMARY" />
		<Message Text="════════════════════════════════════════════════════════════════" />
		
		<!-- Use type command to display the file content -->
		<Exec Command='type "$(CoverageSummaryFile)"' 
			  WorkingDirectory="$(SolutionDir)" />
		
		<!-- Display footer -->
		<Message Text="════════════════════════════════════════════════════════════════" />
		<Message Text="💡 For detailed coverage report, open: $(CoverageFolder)\index.html" />
		<Message Text="📊 Coverage data file: $(SolutionDir)\coverage.cobertura.xml" />
		<Message Text="════════════════════════════════════════════════════════════════" />
		
		<Message Text="==> COMMON_DONE" />
	</Target>

	<!-- Enhanced stage package for testing with coverage and smoke tests -->
	<Target Name="STAGE_NEW" DependsOnTargets="
                CLEAN;
                TAG;
                AUTOTAG_STAGE;
				TEST;
                COVERAGE;
                COVERAGE_SUMMARY;
				PUBLISH;
				COPY_ARTIFACTS;
				SMOKE_TEST;
				PACKAGE" >
  	</Target>

	<!-- Enhanced prod package for release with coverage and smoke tests -->
	<Target Name="PROD_NEW" DependsOnTargets="
				CLEAN;
				TAG;
				AUTOTAG_PROD;
				SOLUTION;
				TEST;
				COVERAGE;
				COVERAGE_SUMMARY;
				PUBLISH;
				COPY_ARTIFACTS;
				SMOKE_TEST;
				PACKAGE" >
  	</Target>

	<!-- Check if current process is running in admin mode AdminCheckExitCode property is set -->
	<Target Name="IS_ADMIN" >
	    <Exec Command="net session" ContinueOnError="true">
			<Output TaskParameter="ExitCode" PropertyName="AdminCheckExitCode"/>
		</Exec>
		
		<PropertyGroup>
			<IsAdmin Condition="'$(AdminCheckExitCode)' == '0'">true</IsAdmin>
			<IsAdmin Condition="'$(AdminCheckExitCode)' != '0'">false</IsAdmin>
		</PropertyGroup>

		<Message Text="IsAdmin: $(IsAdmin)" />
	</Target>

	<!--Example how to build a single project -->
	<Target Name="SingleProject" >
		<Exec Command='dotnet build $(SolutionDir)\nbuild\nbuild.csproj --configuration $(TargetRelease) --runtime win-x64 /p:FileVersion=$(ProductVersion) /p:AssemblyVersion=$(ProductVersion)'></Exec>
	</Target>

	<!--Error handling placeholder -->
	<Target Name="HandleError" >
		<Message Text="An error occurred while reading the version file." Importance="high"/>
	</Target>


</Project>

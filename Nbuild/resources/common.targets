<Project InitialTargets="PROPERTIES" DefaultTargets="SOLUTION"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<!--
	- This is a common.targets file that can be used by any project.  Customizations is made by overriding
		the properties or targets in the project file.  The common.targets file is imported at the start of
		the project file, so any properties or targets defined in the project file will override the ones.
	- This file is imported by the project file using the following statement:
		<Import Project="common.targets" />
	- This is generated by nbuild.exe
    - @REM for more information, please visit <TBD>		
	Reference: https://learn.microsoft.com/en-us/visualstudio/msbuild/walkthrough-using-msbuild?view=vs-2022
	-->

	<PropertyGroup>
		<!--The SolutionName should be replaced in nbuild.targets-->
		<SolutionName></SolutionName>
		<DeploymentFolder></DeploymentFolder>
		<DevDrive Condition=" '$(DevDrive)' == '' ">$(DevDrive)</DevDrive>
		<DevDrive Condition=" '$(DevDrive)' == '' ">C:</DevDrive>
		<MainDir Condition=" '$(MainDir)' == '' ">$(MainDir)</MainDir>
		<MainDir Condition=" '$(MainDir)' == '' ">Source</MainDir>
		<DevDir>$(DevDrive)\$(MainDir)</DevDir>
		<BuildTools>$(ProgramFiles)\nbuild</BuildTools>
		<CommonTargetsVersion>6.2.0</CommonTargetsVersion>
	</PropertyGroup>
	
	<UsingTask TaskName="NbuildTasks.ColorMessage" AssemblyFile="$(BuildTools)\NbuildTasks.dll"/>
	<UsingTask TaskName="NbuildTasks.RedError" AssemblyFile="$(BuildTools)\NbuildTasks.dll" />
	<UsingTask TaskName="NbuildTasks.Git" AssemblyFile="$(BuildTools)\NbuildTasks.dll" />
	<UsingTask TaskName="NbuildTasks.WebDownload" AssemblyFile="$(BuildTools)\NbuildTasks.dll" />
	<UsingTask TaskName="NbuildTasks.FileVersion" AssemblyFile="$(BuildTools)\NbuildTasks.dll" />
	<UsingTask TaskName="NbuildTasks.UnZip" AssemblyFile="$(BuildTools)\NbuildTasks.dll" />
	<UsingTask TaskName="NbuildTasks.Zip" AssemblyFile="$(BuildTools)\NbuildTasks.dll" />
	

	<Import Project="$(BuildTools)\apps-versions.targets"/>
	<Import Project="$(BuildTools)\git.targets"/>
	<Import Project="$(BuildTools)\dotnet.targets"/>
	<Import Project="$(BuildTools)\code.targets"/>
	<Import Project="$(BuildTools)\node.targets"/>
	<Import Project="$(BuildTools)\mongodb.targets"/>
	<Import Project="$(BuildTools)\nuget.targets"/>
	<Import Project="$(BuildTools)\ngit.targets"/>
	
	<!-- Common properties that will be used by all targets -->
	<Target Name="PROPERTIES" DependsOnTargets="TAG">
		<PropertyGroup>
			<NbuildExe>"$(BuildTools)\ng.exe"</NbuildExe>
			<NugetExe>$(BuildTools)\nuget.exe</NugetExe>
			<ZipExe>$(ProgramFiles)\7-Zip\7z.exe</ZipExe>
			<TargetRelease>Release</TargetRelease>
			<TargetDebug>Debug</TargetDebug>
			<SolutionDir>$(DevDir)\$(SolutionName)</SolutionDir>
			<OutputPathRelease>$(SolutionDir)\$(TargetRelease)</OutputPathRelease>
			<OutputPathDebug>$(SolutionDir)\$(TargetDebug)</OutputPathDebug>
			<ArtifactsDir>$(DevDrive)\Artifacts</ArtifactsDir>
			<TestFilesFolder>$(DevDrive)\Test</TestFilesFolder>
			
		</PropertyGroup>

		<RedError Condition="'$(ProductVersion)' == ''" Message="Error: Version property is not defined. Type Ngit.exe -c settag -tag 0.0.1" />
		<RedError Condition="'$(SolutionName)' == ''" Message="Error: SolutionName property is not defined." />
		<RedError Condition="'$(DeploymentFolder)' == ''" Message="Error: DeploymentFolder property is not defined." />

		<Message Text="CommonTargets Version: $(CommonTargetsVersion)"/>
		<Message Text="Solution Name: $(SolutionName)"/>
		<Message Text="Solution Dir: $(SolutionDir)"/>
		<Message Text="Product Version: $(ProductVersion)"/>
		<Exec Command="git remote -v" ContinueOnError="True"></Exec>
		<Exec Command="git branch" ContinueOnError="True"></Exec>
		<Exec Command="git describe" ConsoleToMSBuild="true" ContinueOnError="True" ></Exec>
		<Message Text="MSBuild = $(MSBuildToolsPath) Version = VS$(VisualStudioVersion)"/>

		<Message Text="==> COMMON_DONE"/>
		<OnError ExecuteTargets="HandleError"/>
	</Target>

	<!-- Clean up the project and artifacts folder -->
	<Target Name="CLEAN" >
		<MSBuild Projects="$(SolutionDir)\$(SolutionName).sln" Targets="Clean" Properties="Configuration=$(TargetRelease);Platform=Any CPU" />
		<MSBuild Projects="$(SolutionDir)\$(SolutionName).sln" Targets="Clean" Properties="Configuration=$(TargetDebug);Platform=Any CPU"/>
		
		<RemoveDir Directories="$(OutputPathRelease);
                            $(OutputPathDebug);
                            $(SolutionDir)\x64;
							"/>

		<ItemGroup>
			<FilesToDelete Include="$(SolutionDir)\**\obj\**\*;$(SolutionDir)\**\bin\**\*" />
		</ItemGroup>
		<Delete Files="@(FilesToDelete)" />
		<RemoveDir Directories="$(SolutionDir)\**\obj" />
		<ItemGroup>
			<DirectoriesToDelete Include="$(SolutionDir)\**\obj\**\*;$(SolutionDir)\**\bin\**\*" />
		</ItemGroup>
		<RemoveDir Directories="@(DirectoriesToDelete)" />

		<Message Text="==> COMMON_DONE"/>
	</Target>

	<!-- Install dependencies -->
	<Target Name="INSTALL_DEP" >
		<Exec Command="dotnet restore"/>
		<Message Text="==> COMMON_DONE"/>
	</Target>

	<!-- Opt out of the DOTNET_CLI_TELEMETRY_OPTOUT - move to common -->
	<Target Name="TELEMETRY_OPT_OUT" AfterTargets="AUTOTAG_PRODUCTION">
		<Exec Command='setx DOTNET_CLI_TELEMETRY_OPTOUT 1'/>
		<Message Text="==> DONE"/>
	</Target>

	<!-- Create a staging package for testing -->
	<Target Name="STAGING" DependsOnTargets="
                CLEAN;
                TAG;
                AUTOTAG_STAGING;
				SOLUTION;
                TEST;
				COPY_ARTIFACTS;
                PACKAGE">
  </Target>

  <!-- Create a production package for release -->
  <Target Name="PRODUCTION" DependsOnTargets="
                CLEAN;
                GIT_PULL;
                TAG;
                AUTOTAG_PRODUCTION;
                SOLUTION;
				TEST;
                COPY_ARTIFACTS;
                PACKAGE">
  
  </Target>

	<!-- Create a staging package and deploy for testing -->
	<Target Name="STAGING_DEPLOY" DependsOnTargets="
                            STAGING;
                            DEPLOY">
		<Message Text="==> COMMON_DONE"/>
	</Target>

	<!-- Create a production package and deploy for release -->	
	<Target Name="PRODUCTION_DEPLOY" DependsOnTargets="
                            PRODUCTION;
                            DEPLOY">
		<Message Text="==> COMMON_DONE"/>
	</Target>

	<!-- Build the solution Release configuration  using dotnet build-->
	<Target Name="SOLUTION" DependsOnTargets="TAG;INSTALL_DEP">
		<Message Text="Git tag: $(ProductVersion)"/>
		<Exec Command='dotnet build --no-restore $(SolutionDir)\$(SolutionName).sln --configuration $(TargetRelease) /p:FileVersion=$(ProductVersion) /p:AssemblyVersion=$(ProductVersion) /p:UICulture="en-US" /p:Culture="en-US"' />
		<Message Text="==> COMMON_DONE"/>
	</Target>

	<!-- Build the solution Release configuration  using MSBuild-->
	<Target Name="SOLUTION_MSBUILD" DependsOnTargets="TAG">
		<Exec Command="dotnet restore"></Exec>
		<MSBuild Projects="$(SolutionDir)\$(SolutionName).sln" Properties="Configuration=$(TargetRelease);Platform=Any CPU;Version=$(ProductVersion);AssemblyVersion=$(ProductVersion);UICulture=en-US;Culture=en-US"/>
		<Message Text="==> COMMON_DONE"/>
	</Target>

	<!-- Create a packahe for the solution default is a zip file of all artifacts -->
	<Target Name="PACKAGE" DependsOnTargets="ARTIFACTS;TAG">
		<!-- <Exec Command='powershell -Command "Compress-Archive -Path $(ArtifactsFolder)\* -DestinationPath $(ArtifactsFolder).zip" -Force'/> -->
		<!-- <Zip Path="$(ArtifactsFolder)" FileName="$(ArtifactsFolder).zip"/> -->
		<Exec Command='"$(ZipExe)" a -r -tzip $(ArtifactsFolder).zip $(ArtifactsFolder)\*'/>
		
		<RemoveDir Directories="$(ArtifactsFolder);"/> 
		<Message Text="==> COMMON_DONE"/>
	</Target>

	<!-- Save the artifacts to the artifacts folder -->
	<Target Name="COPY_ARTIFACTS" DependsOnTargets="ARTIFACTS;TAG">
		<Error Condition="'$(ArtifactsFolder)' == ''" Text="Error: ArtifactsFolder property is not defined." />
		<Message Text="ArtifactsFolder: $(ArtifactsFolder)"/>


		<Copy SourceFiles="@(BinaryFiles)"
			  DestinationFolder="$(ArtifactsFolder)"
			  Condition="'@(BinaryFiles, ' ')' != ''"
			  SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(EnUSFiles)"
			DestinationFolder="$(ArtifactsFolder)\en-US"
			Condition="'@(EnUSFiles, ' ')' != ''"
			SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(ref)"
		  DestinationFolder="$(ArtifactsFolder)\ref"
		  Condition="'@(ref, ' ')' != ''"
			  SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(RunTimesLib)"
			  DestinationFolder="$(ArtifactsFolder)\runtimes\win\lib\netstandard2.0"
			  Condition="'@(RunTimesLib, ' ')' != ''"
			  SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(Default)"
			  DestinationFolder="$(ArtifactsFolder)\Default"
			  Condition="'@(Default, ' ')' != ''"
			  SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(RunTimesLibNet)"
			  DestinationFolder="$(ArtifactsFolder)\runtimes\win\lib\net8.0"
			  Condition="'@(RunTimesLibNet, ' ')' != ''"
			  SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(RunTimesNetStandard20)"
			DestinationFolder="$(ArtifactsFolder)\netstandard2.0\"
			Condition="'@(RunTimesNetStandard20, ' ')' != ''"
			SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(RunTimesNetStandard21)"
			DestinationFolder="$(ArtifactsFolder)\netstandard2.1\"
			Condition="'@(RunTimesNetStandard21, ' ')' != ''"
			SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(RunTimesNative)"
			DestinationFolder="$(ArtifactsFolder)\runtimes\win\native\"
			Condition="'@(RunTimesNative, ' ')' != ''"
			SkipUnchangedFiles="true" />

		<Message Text="==> COMMON_DONE"/>
	</Target>
	
	<!-- Deploy the package. default is to extract artifacts into DeploymentProperty folder -->
	<Target Name="DEPLOY" DependsOnTargets="IS_ADMIN;ARTIFACTS">
		<RedError Condition="'$(IsAdmin)' == false" Message="Must be an admin to deploy project: '$(SolutionName)'." />
		<RedError Condition="'$(DeploymentFolder)' == ''" Message="Error: DeploymentFolder property is not defined." />
		<Message Text="DeploymentFolder: $(DeploymentFolder)"/>

		<PropertyGroup>
			<SetupDir>$(TEMP)\home</SetupDir>
		</PropertyGroup>
		
		<!-- <Exec Command='powershell -Command &quot;Expand-Archive -Path c:\Artifacts\ntools\Release\1.1.11.zip -DestinationPath "C:\Program Files\Nbuild" -Force&quot;'/> -->
		<!-- <Unzip FileName="$(ArtifactsFolder).zip" Destination="C:\Program Files\Nbuild" /> -->

		<Exec Command='"$(ZipExe)" x $(ArtifactsFolder).zip -o"$(DeploymentFolder)" -y'/>
		<RemoveDir Directories="$(SetupDir)"></RemoveDir>
		<Message Text="Deployed Success to $(DeploymentFolder)"/>
		<Message Text="==> COMMON_DONE"/>
	</Target>

	<!-- Run all tests using dotnet test in Release mode -->
	<Target Name="TEST" DependsOnTargets="ARTIFACTS;TAG">
		<RemoveDir Directories="$(ArtifactsTestResultsFolder)"></RemoveDir>
		<!--To colllect code coverage, add the following option to the test command: collect:"XPlat Code Coverage"-->
		<Exec Command='dotnet test --no-build --configuration $(TargetRelease) --logger "console;verbosity=normal" %(DotNetTestFiles.Identity) --logger trx --results-directory:$(ArtifactsTestResultsFolder) --verbosity normal'/>
		<Message Text="==> COMMON_DONE"/>
	</Target>

	<!-- Run all tests using dotnet test in Debug mode -->
	<Target Name="TEST_DEBUG" DependsOnTargets="ARTIFACTS;TAG">
		<Exec Command='dotnet.exe test --configuration $(TargetDebug) --logger "console;verbosity=normal" %(DotNetTestFiles.Identity) --collect:"XPlat Code Coverage" --logger trx --results-directory:$(ArtifactsTestResultsFolder) --verbosity normal'/>
		<Message Text="==> COMMON_DONE"/>
	</Target>

	<!-- Check if current process is running in admin mode AdminCheckExitCode property is set -->
	<Target Name="IS_ADMIN" >
	    <Exec Command="net session" ContinueOnError="true">
			<Output TaskParameter="ExitCode" PropertyName="AdminCheckExitCode"/>
		</Exec>
		
		<PropertyGroup>
			<IsAdmin Condition="'$(AdminCheckExitCode)' == '0'">true</IsAdmin>
			<IsAdmin Condition="'$(AdminCheckExitCode)' != '0'">false</IsAdmin>
		</PropertyGroup>

		<Message Text="IsAdmin: $(IsAdmin)" />
	</Target>

	<!--Example how to build a single project -->
	<Target Name="SingleProject" >
		<Exec Command='dotnet build $(SolutionDir)\nbuild\nbuild.csproj --configuration $(TargetRelease) --runtime win-x64 /p:FileVersion=$(ProductVersion) /p:AssemblyVersion=$(ProductVersion)'></Exec>
	</Target>

	<!--Error handling placeholder -->
	<Target Name="HandleError" >
		<Message Text="An error occurred while reading the version file." Importance="high"/>
	</Target>	
</Project>

<Project InitialTargets="PROPERTIES" DefaultTargets="SOLUTION"
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<!--
	- This is a common.targets file that can be used by any project.  Customizations is made by overriding
		the properties or targets in the project file.  The common.targets file is imported at the start of
		the project file, so any properties or targets defined in the project file will override the ones.
	- This file is imported by the project file using the following statement:
		<Import Project="common.targets" />
	- This is generated by nbuild.exe
    - @REM for more information, please visit <TBD>		
	Reference: https://learn.microsoft.com/en-us/visualstudio/msbuild/walkthrough-using-msbuild?view=vs-2022
	-->
	<UsingTask TaskName="NbuildTasks.ColorMessage" AssemblyFile="$(BuildTools)\netstandard2.0\NbuildTasks.dll"/>
	<UsingTask TaskName="NbuildTasks.RedError" AssemblyFile="$(BuildTools)\netstandard2.0\NbuildTasks.dll" />
	<UsingTask TaskName="NbuildTasks.Git" AssemblyFile="$(BuildTools)\netstandard2.0\NbuildTasks.dll" />

	<PropertyGroup>
		<!--The SolutionName should be replaced in nbuild.targets-->
    	<SolutionName></SolutionName>
		<DeploymentFolder></DeploymentFolder>
		<DevDrive>C:</DevDrive>
		<MainDir>Source</MainDir>
		<DevDir>$(DevDrive)\$(MainDir)</DevDir>
		<BuildTools>$(ProgramFiles)\nbuild</BuildTools>
		<CommonTargetsVersion>6.2.0</CommonTargetsVersion>
	</PropertyGroup>
	
	<Target Name="PROPERTIES">
		<PropertyGroup>
			<VersionFile>version.txt</VersionFile>
			<BuildTypeFile>build_type.txt</BuildTypeFile>
			<Tag>tag.txt</Tag>
			<NbuildExe>"$(BuildTools)\ngit.exe"</NbuildExe>
			<NugetExe>$(BuildTools)\nuget.exe</NugetExe>
			<ZipExe>$(ProgramFiles)\BuildTools\7-Zip\7z.exe</ZipExe>
			<TargetRelease>Release</TargetRelease>
			<TargetDebug>Debug</TargetDebug>
			<SolutionDir>$(DevDir)\$(SolutionName)</SolutionDir>
			<OutputPathRelease>$(SolutionDir)\$(TargetRelease)</OutputPathRelease>
			<OutputPathDebug>$(SolutionDir)\$(TargetDebug)</OutputPathDebug>
			<ArtifactsDir>$(DevDrive)\Artifacts</ArtifactsDir>
			<TestFilesFolder>$(DevDrive)\Test</TestFilesFolder>
			<TestResultsFolder>$(DevDrive)\TestResults</TestResultsFolder>
		</PropertyGroup>

		<ReadLinesFromFile File="$(VersionFile)" Condition="Exists('$(VersionFile)')">
			<Output TaskParameter="Lines" PropertyName="ProductVersion" />
		</ReadLinesFromFile>
		
		<RedError Condition="'$(ProductVersion)' == ''" Message="Error: Version property is not defined. Type nbuild.exe -git settag -project [] -branch [] -tag 0.0.1" />
		<RedError Condition="'$(SolutionName)' == ''" Message="Error: SolutionName property is not defined." />
		<RedError Condition="'$(DeploymentFolder)' == ''" Message="Error: DeploymentFolder property is not defined." />

		<Message Text="CommonTargets Version: $(CommonTargetsVersion)"/>
		<Message Text="Solution Name: $(SolutionName)"/>
		<Message Text="Solution Dir: $(SolutionDir)"/>
		<Message Text="Version File: $(VersionFile)"/>
		<Message Text="Project Version: $(ProductVersion)"/>
		<Exec Command="git remote -v"></Exec>
		<Exec Command="git branch"></Exec>
		<Exec Command="git describe" ConsoleToMSBuild="true"></Exec>
		<Message Text="MSBuild = $(MSBuildToolsPath) Version = VS$(VisualStudioVersion)"/>

		<Message Text="==> COMMON-DONE"/>
		<OnError ExecuteTargets="HandleError"/>
	</Target>

	<Target Name="CLEAN">
		<MSBuild Projects="$(SolutionDir)\$(SolutionName).sln" Targets="Clean" Properties="Configuration=$(TargetRelease);Platform=Any CPU" />
		<MSBuild Projects="$(SolutionDir)\$(SolutionName).sln" Targets="Clean" Properties="Configuration=$(TargetDebug);Platform=Any CPU"/>
		
		<RemoveDir Directories="$(OutputPathRelease);
                            $(OutputPathDebug);
                            $(SolutionDir)\x64;
							"/>

		<ItemGroup>
			<FilesToDelete Include="$(SolutionDir)\**\obj\**\*" />
		</ItemGroup>
		<Delete Files="@(FilesToDelete)" />
		<RemoveDir Directories="$(SolutionDir)\**\obj" />
		<ItemGroup>
			<DirectoriesToDelete Include="$(SolutionDir)\**\obj\**\*" />
		</ItemGroup>
		<RemoveDir Directories="@(DirectoriesToDelete)" />

		<Message Text="==> COMMON_DONE"/>
	</Target>

	<Target Name="STAGING" DependsOnTargets="
                CLEAN;
                GET_TAG;
                AUTOTAG_STAGING;
                SET_AUTOTAG_STAGING;
                SOLUTION;
                TEST;
                SAVE_ARTIFACTS;
                PUSH_TAG;
                PACKAGE">
  </Target>

  <!-- Perform a production release -->
  <Target Name="PRODUCTION" DependsOnTargets="
                CLEAN;
                GIT_PULL;
                GET_TAG;
                AUTOTAG_PRODUCTION;
                SET_AUTOTAG_PRODUCTION;
                SOLUTION;
                TEST;
                SAVE_ARTIFACTS;
                PUSH_TAG;
                PACKAGE">
  
  </Target>


	<Target Name="STAGING_DEPLOY" DependsOnTargets="
                            STAGING;
                            DEPLOY">
		<Message Text="==> COMMON_DONE"/>
	</Target>
	
	
	
	<Target Name="PRODUCTION_DEPLOY" DependsOnTargets="
                            PRODUCTION;
                            DEPLOY">
		<Message Text="==> COMMON_DONE"/>
	</Target>
	

<!--Git targets Start-->

  <!-- Perform a staging build -->

  <!-- Display the current git status -->
  <Target Name="GIT_STATUS" AfterTargets="
            GET_TAG;
            AUTOTAG_STAGING;
            SET_AUTOTAG_STAGING;
            PUSH_TAG">

	  <Exec Command='git status' />
  </Target>

  <!-- Increment version for a staging build -->
	<Target Name="AUTOTAG_STAGING" DependsOnTargets="GIT_BRANCH">
	  <Exec Command='$(NbuildExe) -git autotag -project $(SolutionName) -buildtype staging' ConsoleToMSBuild="true">
		  <Output TaskParameter="ConsoleOutput" PropertyName="ProductVersion" />
	  </Exec>

	  <Message Text="Staging tag: $(ProductVersion)"/>

	  <RedError Condition="'$(ProductVersion)' == ''" Message="Error: Next Version property is not defined." />

  </Target>

  <!-- Set version for a staging build --> 
	<Target Name="SET_AUTOTAG_STAGING" DependsOnTargets="AUTOTAG_STAGING">
    <Message Text="Git Next tag: $(ProductVersion)"/>
		
    <Exec Command='$(NbuildExe) -git settag -project $(SolutionName) -tag $(ProductVersion)' ConsoleToMSBuild="true">
		  <Output TaskParameter="ConsoleOutput" PropertyName="Result" />
	  </Exec>

	  <RedError Condition="'$(Result)' != 'true'" Message="Error: Next Version property is not defined." />
		
		<Exec Command='$(NbuildExe) -git gettag -project $(SolutionName)' ConsoleToMSBuild="true">
			<Output TaskParameter="ConsoleOutput" PropertyName="ProductVersion" />
		</Exec>

		<Message Text="Git tag: $(ProductVersion)"/>
	  <Message Text="==> COMMON_DONE"/>
  </Target>

  <!-- Get the latest tag from git -->
	<Target Name="GIT_PULL" DependsOnTargets="GIT_BRANCH">
    <Exec Command='git pull -r'/>
  </Target>

	<Target Name="AUTOTAG_PRODUCTION" DependsOnTargets="GIT_BRANCH">
	  <RedError Condition="'$(GitBranch)' != 'main'" Message="Error: Must be on main branch for a production release." />

	  <Exec Command='$(NbuildExe) -git autotag -project $(SolutionName) -buildtype production' ConsoleToMSBuild="true">
		  <Output TaskParameter="ConsoleOutput" PropertyName="ProductVersion" />
	  </Exec>

  	<Message Text="Next tag: $(ProductVersion)"/>

	  <RedError Condition="'$(ProductVersion)' == ''" Message="Error: Next Version property is not defined." />
	  <Message Text="==> COMMON_DONE"/>
  </Target>

	<Target Name="GET_TAG" AfterTargets="*">
	  <Exec Command='$(NbuildExe) -git gettag -project $(SolutionName)' ConsoleToMSBuild="true">
		  <Output TaskParameter="ConsoleOutput" PropertyName="ProductVersion" />
	  </Exec>
		
	  <Message Text="Git tag: $(ProductVersion)"/>

	<Git Command="GetTag" >
		<Output TaskParameter="Output" PropertyName="ProductVersion"/>
	</Git>
		<Message Text="Task - Git Tag:'$(ProductVersion)'"/>

	  <RedError Condition="'$(ProductVersion)' == ''" Message="Error: Product Version property is not defined." />
	  <Message Text="==> COMMON_DONE"/>
  </Target>

	<Target Name="SET_AUTOTAG_PRODUCTION" DependsOnTargets="AUTOTAG_PRODUCTION">
    <Message Text="Git Next tag: $(ProductVersion)"/>
		
    <Exec Command='$(NbuildExe) -git settag -project $(SolutionName) -tag $(ProductVersion)' ConsoleToMSBuild="true">
		  <Output TaskParameter="ConsoleOutput" PropertyName="Result" />
	  </Exec>

	  <RedError Condition="'$(Result)' != 'true'" Message="Error: Next Version property is not defined." />
	  <Message Text="==> COMMON_DONE"/>
  </Target>

	<Target Name="PUSH_TAG" DependsOnTargets="GIT_BRANCH;GET_TAG">
    <Exec Command='git add .'/>
    <Exec Command='git commit -m "-Fix $(GitBranch) $(ProductVersion)"'/>
    <Exec Command='git push origin $(GitBranch)'/>
    <Exec Command='git push -u origin $(GitBranch) --tags'/>

    <!-- <Exec Command='$(NbuildExe) -git pushtag -project $(SolutionName) -branch $(GitBranch) -tag $(ProductVersion)' ConsoleToMSBuild="true">
		  <Output TaskParameter="ConsoleOutput" PropertyName="Result" />
	  </Exec>

	  <Message Text="Git tag: $(Result)"/>

	  <RedError Condition="'$(Result)' != 'true'" Message="Error: Puh tag failed." /> -->

	  <Message Text="==> COMMON_DONE"/>
  </Target>

	<Target Name="GIT_BRANCH">
	  <Exec Command='$(NbuildExe) -git getbranch -project $(SolutionName)' ConsoleToMSBuild="true">
		  <Output TaskParameter="ConsoleOutput" PropertyName="GitBranch" />
	  </Exec>

	  <Message Text="Git Branch: $(GitBranch)"/>
	
	  <Git Command="GetBranch">
			<Output TaskParameter="Output" PropertyName="GitBranch"/>
		</Git>
		<Message Text="Task - Git Branch:'$(GitBranch)'"/>

	  <RedError Condition="'$(GitBranch)' == ''" Message="Error: GitBranch property is not defined." />
	  <Message Text="==> COMMON_DONE"/>
  </Target>
	<!--Git Targets End-->

	<Target Name="SOLUTION" DependsOnTargets="GET_TAG">
		<Message Text="Git tag: $(ProductVersion)"/>
		<Exec Command='dotnet build $(SolutionDir)\$(SolutionName).sln --configuration $(TargetRelease) /p:FileVersion=$(ProductVersion) /p:AssemblyVersion=$(ProductVersion) /p:UICulture="en-US" /p:Culture="en-US"' ></Exec>
		<Message Text="==> COMMON_DONE"/>
	</Target>

	<Target Name="SOLUTION_MSBUILD">
		<Exec Command="dotnet restore"></Exec>
		<MSBuild Projects="$(SolutionDir)\$(SolutionName).sln" Properties="Configuration=$(TargetRelease);Platform=Any CPU;Version=$(ProductVersion);AssemblyVersion=$(ProductVersion);UICulture=en-US;Culture=en-US"/>
		<Message Text="==> COMMON_DONE"/>
	</Target>

	<Target Name="PACKAGE" DependsOnTargets="ARTIFACTS;GET_TAG">
		<Exec Command='"$(ZipExe)" a -r -tzip $(ArtifactsFolder).zip $(ArtifactsFolder)\*'/>
		<RemoveDir Directories="$(ArtifactsFolder);
							"/> 
		<Message Text="==> COMMON_DONE"/>
	</Target>

	<Target Name="SAVE_ARTIFACTS" DependsOnTargets="ARTIFACTS;GET_TAG">
		<Error Condition="'$(ArtifactsFolder)' == ''" Text="Error: ArtifactsFolder property is not defined." />
		<Message Text="ArtifactsFolder: $(ArtifactsFolder)"/>

		
		<Copy SourceFiles="@(BinaryFiles)"
			  DestinationFolder="$(ArtifactsFolder)"
			  Condition="'@(BinaryFiles, ' ')' != ''"
			  SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(EnUSFiles)"
			DestinationFolder="$(ArtifactsFolder)\en-US"
			Condition="'@(EnUSFiles, ' ')' != ''"
			SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(ref)"
		  DestinationFolder="$(ArtifactsFolder)\ref"
		  Condition="'@(ref, ' ')' != ''"
			  SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(RunTimesLib)"
			  DestinationFolder="$(ArtifactsFolder)\runtimes\win\lib\netstandard2.0"
			  Condition="'@(RunTimesLib, ' ')' != ''"
			  SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(Default)"
			  DestinationFolder="$(ArtifactsFolder)\Default"
			  Condition="'@(Default, ' ')' != ''"
			  SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(RunTimesLibNet)"
			  DestinationFolder="$(ArtifactsFolder)\runtimes\win\lib\net8.0"
			  Condition="'@(RunTimesLibNet, ' ')' != ''"
			  SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(RunTimesNetStandard20)"
			DestinationFolder="$(ArtifactsFolder)\netstandard2.0\"
			Condition="'@(RunTimesNetStandard20, ' ')' != ''"
			SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(RunTimesNetStandard21)"
			DestinationFolder="$(ArtifactsFolder)\netstandard2.1\"
			Condition="'@(RunTimesNetStandard21, ' ')' != ''"
			SkipUnchangedFiles="true" />

		<Copy SourceFiles="@(RunTimesNative)"
			DestinationFolder="$(ArtifactsFolder)\runtimes\win\native\"
			Condition="'@(RunTimesNative, ' ')' != ''"
			SkipUnchangedFiles="true" />

		<Message Text="==> COMMON_DONE"/>
	</Target>

	<Target Name="DEPLOY" DependsOnTargets="IS_ADMIN;ARTIFACTS">
		<RedError Condition="'$(IsAdmin)' == false" Message="Must be an admin to deploy project: '$(SolutionName)'." />
		<RedError Condition="'$(DeploymentFolder)' == ''" Message="Error: DeploymentFolder property is not defined." />
		<Message Text="DeploymentFolder: $(DeploymentFolder)"/>

		<PropertyGroup>
			<SetupDir>$(TEMP)\home</SetupDir>
		</PropertyGroup>
		
		<Exec Command='"$(ZipExe)" x $(ArtifactsFolder).zip -o"$(DeploymentFolder)" -y'/>

		<RemoveDir Directories="$(SetupDir)"></RemoveDir>
		<Message Text="Deployed Success to $(DeploymentFolder)"/>
		<Message Text="==> COMMON_DONE"/>
	</Target>

	<Target Name="TEST">
		<Exec Command='"c:\program files\dotnet\dotnet.exe" test --configuration $(TargetDebug) --logger "console;verbosity=normal;DOTNET_CLI_TELEMETRY_OPTOUT=1" %(DotNetTestFiles.Identity) --collect:"XPlat Code Coverage" --logger trx --results-directory:$(TestResultsFolder) --verbosity normal'/>
		<Message Text="==> COMMON_DONE"/>
	</Target>

	<Target Name="TEST_RELEASE">
		<Exec Command='"c:\program files\dotnet\dotnet.exe" test --configuration $(TargetRelease) --logger "console;verbosity=normal;DOTNET_CLI_TELEMETRY_OPTOUT=1" %(DotNetTestFiles.Identity) --collect:"XPlat Code Coverage" --logger trx --results-directory:$(TestResultsFolder) --verbosity normal'/>
		<Message Text="==> COMMON_DONE"/>
	</Target>

	<Target Name="IS_ADMIN">
	    <Exec Command="net session" ContinueOnError="true">
		<Output TaskParameter="ExitCode" PropertyName="AdminCheckExitCode"/>
    </Exec>

  	<PropertyGroup>
    	<IsAdmin Condition="'$(AdminCheckExitCode)' == '0'">true</IsAdmin>
    	<IsAdmin Condition="'$(AdminCheckExitCode)' != '0'">false</IsAdmin>
  	</PropertyGroup>

    <Message Text="IsAdmin: $(IsAdmin)" />
	</Target>

	<Target Name="SingleProject">
		<Exec Command='dotnet build $(SolutionDir)\nbuild\nbuild.csproj --configuration $(TargetRelease) --runtime win-x64 /p:FileVersion=$(ProductVersion) /p:AssemblyVersion=$(ProductVersion)'></Exec>
	</Target>

	<Target Name="HandleError">
		<Message Text="An error occurred while reading the version file." Importance="high"/>
	</Target>	
</Project>

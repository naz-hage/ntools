{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Software Tools Collection This repository contains a collection of software tools specifically designed to automate various build and test tasks on Windows clients. Whether you are a developer working on your local machine or using GitHub Actions for continuous integration, these tools will simplify your workflow and enhance your productivity. Install ntools Practice using ntools Setup your project Dev Setup Add a new tool Add a new property Add a new target Add a new task Add a new condition Don't hesitate to write an issue if you have any questions or suggestions.","title":"Overview"},{"location":"#software-tools-collection","text":"This repository contains a collection of software tools specifically designed to automate various build and test tasks on Windows clients. Whether you are a developer working on your local machine or using GitHub Actions for continuous integration, these tools will simplify your workflow and enhance your productivity. Install ntools Practice using ntools Setup your project Dev Setup Add a new tool Add a new property Add a new target Add a new task Add a new condition Don't hesitate to write an issue if you have any questions or suggestions.","title":"Software Tools Collection"},{"location":"buildtypes/","text":"ntools have two predefined build types: stage and prod . The stage build type is deploy code to a stage environment used for debugging and testing, while the prod build type is used for prod deployment. The stage build type includes debugging symbols and is not optimized, while the production build type is optimized for performance and does not include debugging symbols. stage The stage build type use the following command: nb stage It includes the following steps: Clean the project Restore the project Build the project Test the project Publish the project to the stage environment Run various tests on the stage environment The version is set according to the rules in versioning Production The prod build type use the following command: nb prod It includes the following steps: Clean the project Restore the project Build the project Test the project Publish the project to the production environment Run smoke tests on the production environment This build is available for download from the GitHub release page The version is set according to the rules in versioning Your project can have additional build types which you can add to your nbuild.targets fille,","title":"Build Types"},{"location":"buildtypes/#_1","text":"","title":""},{"location":"buildtypes/#stage","text":"The stage build type use the following command: nb stage It includes the following steps: Clean the project Restore the project Build the project Test the project Publish the project to the stage environment Run various tests on the stage environment The version is set according to the rules in versioning","title":"stage"},{"location":"buildtypes/#production","text":"The prod build type use the following command: nb prod It includes the following steps: Clean the project Restore the project Build the project Test the project Publish the project to the production environment Run smoke tests on the production environment This build is available for download from the GitHub release page The version is set according to the rules in versioning Your project can have additional build types which you can add to your nbuild.targets fille,","title":"Production"},{"location":"changelog/","text":"Latest Release Version 1.7.0 - oct-24 issue #78 - Feature: Add Hash Checks for File Integrity after app installation enhancement issue #76 - Feature: Enhanced Build Process with Verbose Logging and Terraform Support enhancement issue #74 - Feature: Add pwsh as MS Build task to execute PowerShell scripts with validation and logging. enhancement issue #69 - Feature: Add common devops scripts enhancement issue #67 - Feature: Add new msbuild tasks to common.targets that supports terraform enhancement issue #65 - Feature: Update development tools to latest stable versions enhancement Version 1.6.0 - 21-jun-24 - issue #62 - Feature: Rename ng.exe to ngit.exe Version 1.5.0 - 03-may-24 issue #56 - Feature: Remove the dependency on the $(DevDrive) and $(MainDir) environment variables issue #55 - Feature: Add documentation of staging and production releases with ntools Version 1.4.0 - 25-apr-24 Complete issue #37 Complete issue #38 Complete issue #34 Complete issue #44 Complete issue #41 Version 1.3.0 - 15-feb-24 Fix issue #29 Add default value for -json option Fix specifying the process start info for ntools-launcher. if StartInfo.FileName uses executable name only that is in the system path, then the StartInfo.FileName will be replaced with the full pathName. See FileMapping.cs file Add install.ps1 which is equivalent to install.bat. update to ntools-launcher 1.3.0 Version 1.2.0 - 22-jan-24 Fix issue #27 Update to ntools-launcher 1.2.0 Use $\"{Environment.GetFolderPath(Environment.SpecialFolder.System)}\" for c:\\windows\\system32 When Using ntools-launcher use default Process::StartInfo RedirectStandardOutput = true, RedirectStandardError = true, WindowStyle = ProcessWindowStyle.Hidden, CreateNoWindow = false, UseShellExecute = false, Version 1.2.0 - 22-jan-24 See issue#5 Add NbuildTask to download and install applications from the web..j Add targets to install Git Nodejs VSCode VS2020 Postman Docker Desktop WSL Dotnet Core SDK Dotnet Core Runtime Add -i [list | download | install] and -json option to Nb.exe to download and install applications from the web. Use json input applist.json file to specify the applications to download and install. Version 1.1.0 - 05-jan-24 Move Launcher project to its own public repo ntools-launcher . Publish Launcher 1.1.0 to nuget.org and unlist 1.0.0.5 Target .netstandard2.0 project to support MS build tasks. MS Build tasks only support .netstandard2.0. Add Nbuild project to streamline the building process of ntools and other projects, renaming it yo Nb.exe for convenience. Refactor Launcher tests Introduce Nbuild project to streamline the building process of ntools and other projects, renaming it yo Nb.exe for convenience. Add NbuildTasks project that exposes MS build tasks. Introduce Git Wrapper class to streamline git operations including: Git.GetTag Git.SetTag Git.Autotag Git.PushTag Git.DeleteTag Git.GetBranch Introduce Ngit project to provide a simplified and automated interface for git operations. Depends on DevDrive and MainDir environment variables. Default values are used if they don't exist. DevDrive defaults to C: and MainDir defaults to C:\\source . Use DevDrive and MainDir from environment variables if they exist. Otherwise, use default values. This applies to common.targets and NbuildTasks Refactor Nbackup - remove cli options src, dest, and options and use json input only file instead. Update documentation Reference: issue#23 Next Delete non-prod releases from Artifacts folder Add https://github.com/naz-hage/learn/tree/main/dotnet/cleanup-non-prod project to NbuildTasks.","title":"Changelog"},{"location":"changelog/#latest-release","text":"","title":"Latest Release"},{"location":"changelog/#version-170-oct-24","text":"issue #78 - Feature: Add Hash Checks for File Integrity after app installation enhancement issue #76 - Feature: Enhanced Build Process with Verbose Logging and Terraform Support enhancement issue #74 - Feature: Add pwsh as MS Build task to execute PowerShell scripts with validation and logging. enhancement issue #69 - Feature: Add common devops scripts enhancement issue #67 - Feature: Add new msbuild tasks to common.targets that supports terraform enhancement issue #65 - Feature: Update development tools to latest stable versions enhancement","title":"Version 1.7.0 - oct-24"},{"location":"changelog/#version-160-21-jun-24","text":"","title":"Version 1.6.0 - 21-jun-24"},{"location":"changelog/#-issue-62-feature-rename-ngexe-to-ngitexe","text":"","title":"- issue #62 - Feature: Rename ng.exe to ngit.exe"},{"location":"changelog/#version-150-03-may-24","text":"issue #56 - Feature: Remove the dependency on the $(DevDrive) and $(MainDir) environment variables issue #55 - Feature: Add documentation of staging and production releases with ntools","title":"Version 1.5.0 - 03-may-24"},{"location":"changelog/#version-140-25-apr-24","text":"Complete issue #37 Complete issue #38 Complete issue #34 Complete issue #44 Complete issue #41","title":"Version 1.4.0 - 25-apr-24"},{"location":"changelog/#version-130-15-feb-24","text":"Fix issue #29 Add default value for -json option Fix specifying the process start info for ntools-launcher. if StartInfo.FileName uses executable name only that is in the system path, then the StartInfo.FileName will be replaced with the full pathName. See FileMapping.cs file Add install.ps1 which is equivalent to install.bat. update to ntools-launcher 1.3.0","title":"Version 1.3.0 - 15-feb-24"},{"location":"changelog/#version-120-22-jan-24","text":"Fix issue #27 Update to ntools-launcher 1.2.0 Use $\"{Environment.GetFolderPath(Environment.SpecialFolder.System)}\" for c:\\windows\\system32 When Using ntools-launcher use default Process::StartInfo RedirectStandardOutput = true, RedirectStandardError = true, WindowStyle = ProcessWindowStyle.Hidden, CreateNoWindow = false, UseShellExecute = false,","title":"Version 1.2.0 - 22-jan-24"},{"location":"changelog/#version-120-22-jan-24_1","text":"See issue#5 Add NbuildTask to download and install applications from the web..j Add targets to install Git Nodejs VSCode VS2020 Postman Docker Desktop WSL Dotnet Core SDK Dotnet Core Runtime Add -i [list | download | install] and -json option to Nb.exe to download and install applications from the web. Use json input applist.json file to specify the applications to download and install.","title":"Version 1.2.0 - 22-jan-24"},{"location":"changelog/#version-110-05-jan-24","text":"Move Launcher project to its own public repo ntools-launcher . Publish Launcher 1.1.0 to nuget.org and unlist 1.0.0.5 Target .netstandard2.0 project to support MS build tasks. MS Build tasks only support .netstandard2.0. Add Nbuild project to streamline the building process of ntools and other projects, renaming it yo Nb.exe for convenience. Refactor Launcher tests Introduce Nbuild project to streamline the building process of ntools and other projects, renaming it yo Nb.exe for convenience. Add NbuildTasks project that exposes MS build tasks. Introduce Git Wrapper class to streamline git operations including: Git.GetTag Git.SetTag Git.Autotag Git.PushTag Git.DeleteTag Git.GetBranch Introduce Ngit project to provide a simplified and automated interface for git operations. Depends on DevDrive and MainDir environment variables. Default values are used if they don't exist. DevDrive defaults to C: and MainDir defaults to C:\\source . Use DevDrive and MainDir from environment variables if they exist. Otherwise, use default values. This applies to common.targets and NbuildTasks Refactor Nbackup - remove cli options src, dest, and options and use json input only file instead. Update documentation Reference: issue#23","title":"Version 1.1.0 - 05-jan-24"},{"location":"changelog/#next","text":"Delete non-prod releases from Artifacts folder Add https://github.com/naz-hage/learn/tree/main/dotnet/cleanup-non-prod project to NbuildTasks.","title":"Next"},{"location":"installation/","text":"To get started with ntools , you need to install the latest version of 64-bit Git for Windows on your machine, then follow these steps: Open a PowerShell in administrative mode. Assume c:\\source as directory %MainDirectory% which will be used through this document. Clone this repository to your local machine from the %MainDirectory% folder. cd c:\\source git clone https://github.com/naz-hage/ntools Change the PowerShell execution policy to allow the installation script to run. Run the following command: Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope Process This command will allow the installation script to run. Once the installation is complete, the execution policy will revert to its original state. Run the following command to install the ntools: cd c:\\source\\ntools\\dev-setup .\\install.ps1 This command will install the Dotnet Core Desktop runtime and download the ntools from GitHub, installs the ntools package in the %ProgramFiles%\\Nbuild folder, sets up the nTools development environment, adds the %ProgramFiles%\\Nbuild will be added to the system path. After the installation is complete, check out the nbuild.targets for more all the available targets, and navigate to Usage to learn how to execute a build target. ntools is now installed on your machine, and you can start using it to learn how to build and run additional targets . If you have any questions or encounter any issues during the installation process, please don't hesitate to write an an issue . We're here to help!","title":"Installation"},{"location":"setup/","text":"Setting Up Your Project with dev-setup The dev-setup folder is a critical part of your project setup. It contains scripts and configuration files to automate the installation of development tools and the setup of your development environment. Overview of dev-setup Folder The dev-setup folder typically includes the following files: ntools.json Contains installation information for ntools. This file is required to install ntools before other deveopment tools. apps.json Lists the development tools required for your project, including their installation and uninstallation details. dev-setup.ps1 A PowerShell script that installs the tools listed in apps.json and sets up the development environment. File Details 1. ntools.json This file provides the installation details for ntools, which is required to manage other tools in the project. Example: { \"Version\": \"1.2.0\", \"NbuildAppList\": [ { \"Name\": \"Ntools\", \"Version\": \"1.8.0\", \"AppFileName\": \"$(InstallPath)\\\\nb.exe\", \"WebDownloadFile\": \"https://github.com/naz-hage/ntools/releases/download/$(Version)/$(Version).zip\", \"DownloadedFile\": \"$(Version).zip\", \"InstallCommand\": \"powershell.exe\", \"InstallArgs\": \"-Command Expand-Archive -Path $(Version).zip -DestinationPath '$(InstallPath)' -Force\", \"InstallPath\": \"$(ProgramFiles)\\\\Nbuild\", \"UninstallCommand\": \"powershell.exe\", \"UninstallArgs\": \"-Command Remove-Item -Path '$(InstallPath)' -Recurse -Force\", \"StoredHash\": \"XXX\", \"AddToPath\": true } ] } 2. apps.json This file lists all the development tools required for the project. Each tool is defined with its name, version, installation details, and uninstallation details. Example: { \"Version\": \"1.2.0\", \"NbuildAppList\": [ { \"Name\": \"7-zip\", \"Version\": \"23.01\", \"AppFileName\": \"$(InstallPath)\\\\7z.exe\", \"WebDownloadFile\": \"https://www.7-zip.org/a/7z2301-x64.exe\", \"DownloadedFile\": \"7zip.exe\", \"InstallCommand\": \"$(DownloadedFile)\", \"InstallArgs\": \"/S /D=\\\"$(ProgramFiles)\\\\7-Zip\\\"\", \"InstallPath\": \"$(ProgramFiles)\\\\7-Zip\", \"UninstallCommand\": \"$(InstallPath)\\\\Uninstall.exe\", \"UninstallArgs\": \"/S\" } ] } Key Elements in apps.json: Element Name Description Name The name of the tool. Version The version of the tool. AppFileName The file name of the tool, used to check if it is already installed. WebDownloadFile The URL to download the tool. DownloadedFile The name of the downloaded file, used for installation. InstallCommand The command to install the tool. InstallArgs The arguments for the installation command. InstallPath The location where the tool will be installed. UninstallCommand The command to uninstall the tool. UninstallArgs The arguments for the uninstallation command. StoredHash (Optional) SHA256 hash of the file for verification. AddToPath (Optional) Whether to add the tool's path to the system PATH environment variable. 3. dev-setup.ps1 This PowerShell script automates the installation of tools and sets up the development environment. Key Responsibilities: - Installs ntools using ntools.json. - Installs other tools listed in apps.json. - Verifies administrative privileges before proceeding. Example: # Import the install module $url = \"https://raw.githubusercontent.com/naz-hage/ntools/main/dev-setup/install.psm1\" $output = \"./install.psm1\" Invoke-WebRequest -Uri $url -OutFile $output Import-Module ./install.psm1 -Force # Install Ntools MainInstallApp -command install -json .\\ntools.json if ($LASTEXITCODE -ne 0) { Write-OutputMessage \"Error: Installation of ntools failed. Exiting script.\" exit 1 } # Install other tools & $global:NbExePath install -json .\\apps.json if ($LASTEXITCODE -ne 0) { Write-OutputMessage \"Error: Installation of other tools failed. Exiting script.\" exit 1 } Write-OutputMessage \"Completed installation script.\" Folder Structure Your project folder should look like this: %MainDirectory%\\ \u251c\u2500\u2500 MyProject\\ \u2502 \u251c\u2500\u2500 dev-setup\\ \u2502 \u2502 \u251c\u2500\u2500 ntools.json \u2502 \u2502 \u251c\u2500\u2500 apps.json \u2502 \u2502 \u251c\u2500\u2500 dev-setup.ps1 \u2502 \u251c\u2500\u2500 ... other project and test files \u2502 \u2514\u2500\u2500 nbuild.targets (this file is required in the solution folder) Adding a New Development Tool To add a new tool to your project: 1. Identify the tool's: - Download URL and file name. - Installation and uninstallation commands and arguments. - Installation path. - File name for version checks. - Version and name. 2. Add the tool's details to apps.json. Example for a new tool: { \"Name\": \"Docker\", \"Version\": \"4.38.0.0\", \"AppFileName\": \"$(InstallPath)\\\\Docker Desktop.exe\", \"WebDownloadFile\": \"https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe\", \"DownloadedFile\": \"Docker Desktop Installer.exe\", \"InstallCommand\": \"$(DownloadedFile)\", \"InstallArgs\": \"install --quiet\", \"InstallPath\": \"$(ProgramFiles)\\\\Docker\\\\Docker\", \"UninstallCommand\": \"powershell.exe\", \"UninstallArgs\": \"-Command \\\"Remove-Item -Path '$(InstallPath)' -Recurse -Force\\\"\", \"AddToPath\": true } Notes Error Handling in dev-setup.ps1 : What happens if a tool fails to install? Are there retries or logs generated? Environment Variables: Are there any required environment variables for dev-setup.ps1 to work? Dependencies: Are there any dependencies for the tools listed in apps.json (e.g., PowerShell version)? Testing the Setup: How can users verify that the setup was successful?","title":"Setup your project"},{"location":"setup/#setting-up-your-project-with-dev-setup","text":"The dev-setup folder is a critical part of your project setup. It contains scripts and configuration files to automate the installation of development tools and the setup of your development environment.","title":"Setting Up Your Project with dev-setup"},{"location":"setup/#overview-of-dev-setup-folder","text":"The dev-setup folder typically includes the following files: ntools.json Contains installation information for ntools. This file is required to install ntools before other deveopment tools. apps.json Lists the development tools required for your project, including their installation and uninstallation details. dev-setup.ps1 A PowerShell script that installs the tools listed in apps.json and sets up the development environment.","title":"Overview of dev-setup Folder"},{"location":"setup/#file-details","text":"","title":"File Details"},{"location":"setup/#1-ntoolsjson","text":"This file provides the installation details for ntools, which is required to manage other tools in the project. Example: { \"Version\": \"1.2.0\", \"NbuildAppList\": [ { \"Name\": \"Ntools\", \"Version\": \"1.8.0\", \"AppFileName\": \"$(InstallPath)\\\\nb.exe\", \"WebDownloadFile\": \"https://github.com/naz-hage/ntools/releases/download/$(Version)/$(Version).zip\", \"DownloadedFile\": \"$(Version).zip\", \"InstallCommand\": \"powershell.exe\", \"InstallArgs\": \"-Command Expand-Archive -Path $(Version).zip -DestinationPath '$(InstallPath)' -Force\", \"InstallPath\": \"$(ProgramFiles)\\\\Nbuild\", \"UninstallCommand\": \"powershell.exe\", \"UninstallArgs\": \"-Command Remove-Item -Path '$(InstallPath)' -Recurse -Force\", \"StoredHash\": \"XXX\", \"AddToPath\": true } ] }","title":"1. ntools.json"},{"location":"setup/#2-appsjson","text":"This file lists all the development tools required for the project. Each tool is defined with its name, version, installation details, and uninstallation details. Example: { \"Version\": \"1.2.0\", \"NbuildAppList\": [ { \"Name\": \"7-zip\", \"Version\": \"23.01\", \"AppFileName\": \"$(InstallPath)\\\\7z.exe\", \"WebDownloadFile\": \"https://www.7-zip.org/a/7z2301-x64.exe\", \"DownloadedFile\": \"7zip.exe\", \"InstallCommand\": \"$(DownloadedFile)\", \"InstallArgs\": \"/S /D=\\\"$(ProgramFiles)\\\\7-Zip\\\"\", \"InstallPath\": \"$(ProgramFiles)\\\\7-Zip\", \"UninstallCommand\": \"$(InstallPath)\\\\Uninstall.exe\", \"UninstallArgs\": \"/S\" } ] } Key Elements in apps.json: Element Name Description Name The name of the tool. Version The version of the tool. AppFileName The file name of the tool, used to check if it is already installed. WebDownloadFile The URL to download the tool. DownloadedFile The name of the downloaded file, used for installation. InstallCommand The command to install the tool. InstallArgs The arguments for the installation command. InstallPath The location where the tool will be installed. UninstallCommand The command to uninstall the tool. UninstallArgs The arguments for the uninstallation command. StoredHash (Optional) SHA256 hash of the file for verification. AddToPath (Optional) Whether to add the tool's path to the system PATH environment variable.","title":"2. apps.json"},{"location":"setup/#3-dev-setupps1","text":"This PowerShell script automates the installation of tools and sets up the development environment. Key Responsibilities: - Installs ntools using ntools.json. - Installs other tools listed in apps.json. - Verifies administrative privileges before proceeding. Example: # Import the install module $url = \"https://raw.githubusercontent.com/naz-hage/ntools/main/dev-setup/install.psm1\" $output = \"./install.psm1\" Invoke-WebRequest -Uri $url -OutFile $output Import-Module ./install.psm1 -Force # Install Ntools MainInstallApp -command install -json .\\ntools.json if ($LASTEXITCODE -ne 0) { Write-OutputMessage \"Error: Installation of ntools failed. Exiting script.\" exit 1 } # Install other tools & $global:NbExePath install -json .\\apps.json if ($LASTEXITCODE -ne 0) { Write-OutputMessage \"Error: Installation of other tools failed. Exiting script.\" exit 1 } Write-OutputMessage \"Completed installation script.\"","title":"3. dev-setup.ps1"},{"location":"setup/#folder-structure","text":"Your project folder should look like this: %MainDirectory%\\ \u251c\u2500\u2500 MyProject\\ \u2502 \u251c\u2500\u2500 dev-setup\\ \u2502 \u2502 \u251c\u2500\u2500 ntools.json \u2502 \u2502 \u251c\u2500\u2500 apps.json \u2502 \u2502 \u251c\u2500\u2500 dev-setup.ps1 \u2502 \u251c\u2500\u2500 ... other project and test files \u2502 \u2514\u2500\u2500 nbuild.targets (this file is required in the solution folder)","title":"Folder Structure"},{"location":"setup/#adding-a-new-development-tool","text":"To add a new tool to your project: 1. Identify the tool's: - Download URL and file name. - Installation and uninstallation commands and arguments. - Installation path. - File name for version checks. - Version and name. 2. Add the tool's details to apps.json. Example for a new tool: { \"Name\": \"Docker\", \"Version\": \"4.38.0.0\", \"AppFileName\": \"$(InstallPath)\\\\Docker Desktop.exe\", \"WebDownloadFile\": \"https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe\", \"DownloadedFile\": \"Docker Desktop Installer.exe\", \"InstallCommand\": \"$(DownloadedFile)\", \"InstallArgs\": \"install --quiet\", \"InstallPath\": \"$(ProgramFiles)\\\\Docker\\\\Docker\", \"UninstallCommand\": \"powershell.exe\", \"UninstallArgs\": \"-Command \\\"Remove-Item -Path '$(InstallPath)' -Recurse -Force\\\"\", \"AddToPath\": true }","title":"Adding a New Development Tool"},{"location":"setup/#notes","text":"Error Handling in dev-setup.ps1 : What happens if a tool fails to install? Are there retries or logs generated? Environment Variables: Are there any required environment variables for dev-setup.ps1 to work? Dependencies: Are there any dependencies for the tools listed in apps.json (e.g., PowerShell version)? Testing the Setup: How can users verify that the setup was successful?","title":"Notes"},{"location":"usage/","text":"Once Ntools is installed, Open a Developer Command prompt for Visual Studio 2022 and navigate to your solution folder (i.e. c:\\source\\ntools ). The Nb.exe is the main executable for the Ntools. The following are some examples of how to use the Ntools: Build a solution: Compiles the solution in the solution directory Nb.exe solution Clean a solution: Deletes the release/Debug, bin and obj folders in the solution directory Nb.exe clean Test solution: runs all the tests in the solution Nb.exe test Create a stage release: Creates a stage build which includes the following steps: Clean the solution Build the solution Run tests Create a stage build Publish the stage build Create a zip file of the stage build file Nb.exe stage Display available targets: Lists all the available targets in the targets file Nb.exe targets See the list of available targets at Nbuild Targets","title":"Practice"},{"location":"versioning/","text":"Version and Tag Throughout this document, the terms \"version\" and \"tag\" are used interchangeably. The version applies to binaries, product, or repo tagging. The rules for ntools versioning are as follows: The version is a string in the format of X.Y.Z , where X , Y , and Z are integers. The version is incremented as follows: X is the major number: Incremented for breaking changes. Y is the minor number: Incremented for new features or bug fixes. Incremented when production Build Type is deployed. Incrementing Y resets Z to 0. Z is the build number: Incremented when staging Build Type is deployed. Tags in the GitHubRelease are used to: Identify specific versions of the repository. Associate release assets with a particular version. Generate release notes based on commits since the last tag.","title":"Versioning"},{"location":"versioning/#version-and-tag","text":"Throughout this document, the terms \"version\" and \"tag\" are used interchangeably. The version applies to binaries, product, or repo tagging. The rules for ntools versioning are as follows: The version is a string in the format of X.Y.Z , where X , Y , and Z are integers. The version is incremented as follows: X is the major number: Incremented for breaking changes. Y is the minor number: Incremented for new features or bug fixes. Incremented when production Build Type is deployed. Incrementing Y resets Z to 0. Z is the build number: Incremented when staging Build Type is deployed. Tags in the GitHubRelease are used to: Identify specific versions of the repository. Associate release assets with a particular version. Generate release notes based on commits since the last tag.","title":"Version and Tag"},{"location":"ntools/devsetup/","text":"Content of dev-setup.ps1: This script sets up the development environment for your project, installs ntools and the necessary development tools, and sets the development environment variables. # dev-setup.ps1 # Get the common Install module and import it $url = \"https://raw.githubusercontent.com/naz-hage/ntools/main/dev-setup/install.psm1\" $output = \"./install.psm1\" Invoke-WebRequest -Uri $url -OutFile $output Import-Module ./install.psm1 -Force $fileName = Split-Path -Leaf $PSCommandPath Write-OutputMessage $fileName \"Started installation script.\" # Check if the script is running with admin rights if (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] \"Administrator\")) { Write-OutputMessage $fileName \"Error: Please run this script as an administrator.\" exit 1 } else { Write-OutputMessage $fileName \"Admin rights detected\" } # Install Ntools MainInstallApp -command install -json .\\app-Ntools.json if ($LASTEXITCODE -ne 0) { Write-OutputMessage $fileName \"Error: Installation of ntools (app-Ntools.json) failed. Exiting script.\" exit 1 } # Install development tools for the project & $global:NbExePath install -json .\\apps.json if ($LASTEXITCODE -ne 0) { Write-OutputMessage $fileName \"Error: Installation of other tools (apps.json) failed. Exiting script.\" exit 1 } Write-OutputMessage $fileName \"Completed installation script.\" Write-OutputMessage $fileName \"EmtpyLine\"","title":"Devsetup"},{"location":"ntools/github-release/","text":"GitHubRelease is a command-line tool designed to help you create and manage GitHub releases. It also enables you to download release assets, such as files named in the format x.y.z.zip. The tool expects downloaded assets to be in a zip file named ${tag}.zip, where tag must be a valid tag in the repository created by the tool (e.g., x.y.z ). checkout the tagging section for more details. Requirements Repository Requirements The repository must have: A GitHub token to create releases. A GitHub owner to create releases. A Git branch to create releases. At least one Git tag prior to creating releases. Environment Requirements The GitHub API token (Required) and repository owner (Optional) are obtained from environment variables: OWNER : The GitHub repository owner's username. The owner is optional and can be specified in the command line with -repo option. Checkout usage below. API_GITHUB_KEY : The GitHub API token (personal access token). Local development with Windows Platforms: For additional security, the GitHub API token should be saved in the Windows Credential Manager with: Target Name: GitHubRelease Credential Name: API_GITHUB_KEY GitHub Actions Workflow Example Here is an example of how to set up the required environment variables in a GitHub Actions workflow file: - name: Build using ntools run: | & \"$env:ProgramFilesPath/nbuild/nb.exe\" ${{ env.Build_Type }} -v ${{ env.Enable_Logging }} shell: pwsh working-directory: ${{ github.workspace }} env: OWNER: ${{ github.repository_owner }} API_GITHUB_KEY: ${{ secrets.API_GITHUB_KEY }} The above action builds, test, and creates a release using the GitHubRelease tool and upload to GitHub. Branch Checkout Example Before running the tool, you must checkout a branch. Here is an example of how to checkout a branch in a GitHub Actions workflow file: - name: Checkout Repository uses: actions/checkout@v4 with: token: ${{ secrets.API_GITHUB_KEY }} fetch-depth: 0 ref: ${{ github.event.pull_request.head.ref }} repository: ${{ github.event.pull_request.head.repo.full_name }} Release Process Stage Release When nb stage runs successfully: The tool creates a stage release tagged with the next stage release number. The release notes include the commits since the last stage or production tag. The API token from the repository secrets is used to create this release. The release package is uploaded to the release. Production Release When nb prod runs successfully: The tool creates a production release tagged with the next production release number. The release notes include the commits since the last production tag. All previous stage releases are deleted. The API token from the repository secrets is used to create this release. The release package is uploaded to the release. Create a GitHub Token Follow the GitHub documentation to create a GitHub token. Required Permissions The access token must have the following permissions: Permission Type Scope Description Repository Contents: Read/Write Access repository contents. Metadata: Read-only Access repository metadata. Actions: Read/Write Manage GitHub Actions (if needed). Packages: Read/Write Manage GitHub Packages (if needed). Workflow Workflows: Read/Write Manage workflows (if needed). Release Releases: Read/Write Manage GitHub releases. GitHubRelease Command Line Options Usage GitHubRelease.exe command [-repo value] [-tag value] [-branch value] [-file value] [-path value] [-v value] - command : Specifies the command to execute. create -> Create a release. Requires repo, tag, branch and file. download -> Download an asset. Requires repo, tag, and path (optional) ---- (one of create,download, required) - repo : Specifies the Git repository in the format any of the following formats: repoName (UserName is declared the `OWNER` environment variable) userName/repoName https://github.com/userName/repoName (Full URL to the repository on GitHub). This is applicable to all commands. (string, default=) - tag : Specifies the tag name. Applicable for all commands (string, default=) - branch : Specifies the branch name. Applicable for create command (string, default=main) - file : Specifies the asset file name. Must include full path. Applicable for create command (string, default=) - path : Specifies the asset path. Must be an absolute path. (string, default=) - v : Optional parameter which sets the console output verbose level. (true or false, default=False) Example: Creating a Release To create a release for the repository my-repo with the tag 1.0.0 , branch main , and an asset located at C:\\Releases\\1.0.0.zip , you would use the following command: GitHubRelease.exe create -repo userName/my-repo -tag 1.0.0 -branch main -file C:\\Releases\\1.1.0.zip Example: Downloading an Asset To download an asset from the release with the tag 1.0.0 in the repository my-repo to the path C:\\Downloads : GitHubRelease.exe download -repo userName/my-repo -tag 1.0.0 -path C:\\Downloads An asset named 1.0.0.zip will be downloaded to the specified path if it exists in the release. Here is the updated section in github-release.md with an example using the -repo option with a full GitHub URL: Example: Creating a Release with Full GitHub URL To create a release for the repository my-repo with the tag 1.0.0 , branch main , and an asset located at C:\\Releases\\1.0.0.zip , using the full GitHub URL: GitHubRelease.exe create -repo https://github.com/userName/my-repo -tag 1.0.0 -branch main -file C:\\Releases\\1.0.0.zip Example: Downloading an Asset with Full GitHub URL To download an asset from the release with the tag 1.0.0 in the repository my-repo to the path C:\\Downloads , using the full GitHub URL: GitHubRelease.exe download -repo https://github.com/userName/my-repo -tag 1.0.0 -path C:\\Downloads An asset named 1.0.0.zip will be downloaded to the specified path if it exists in the release.","title":"Github Release (githubrelease.exe)"},{"location":"ntools/github-release/#requirements","text":"","title":"Requirements"},{"location":"ntools/github-release/#repository-requirements","text":"The repository must have: A GitHub token to create releases. A GitHub owner to create releases. A Git branch to create releases. At least one Git tag prior to creating releases.","title":"Repository Requirements"},{"location":"ntools/github-release/#environment-requirements","text":"The GitHub API token (Required) and repository owner (Optional) are obtained from environment variables: OWNER : The GitHub repository owner's username. The owner is optional and can be specified in the command line with -repo option. Checkout usage below. API_GITHUB_KEY : The GitHub API token (personal access token). Local development with Windows Platforms: For additional security, the GitHub API token should be saved in the Windows Credential Manager with: Target Name: GitHubRelease Credential Name: API_GITHUB_KEY","title":"Environment Requirements"},{"location":"ntools/github-release/#github-actions-workflow-example","text":"Here is an example of how to set up the required environment variables in a GitHub Actions workflow file: - name: Build using ntools run: | & \"$env:ProgramFilesPath/nbuild/nb.exe\" ${{ env.Build_Type }} -v ${{ env.Enable_Logging }} shell: pwsh working-directory: ${{ github.workspace }} env: OWNER: ${{ github.repository_owner }} API_GITHUB_KEY: ${{ secrets.API_GITHUB_KEY }} The above action builds, test, and creates a release using the GitHubRelease tool and upload to GitHub.","title":"GitHub Actions Workflow Example"},{"location":"ntools/github-release/#branch-checkout-example","text":"Before running the tool, you must checkout a branch. Here is an example of how to checkout a branch in a GitHub Actions workflow file: - name: Checkout Repository uses: actions/checkout@v4 with: token: ${{ secrets.API_GITHUB_KEY }} fetch-depth: 0 ref: ${{ github.event.pull_request.head.ref }} repository: ${{ github.event.pull_request.head.repo.full_name }}","title":"Branch Checkout Example"},{"location":"ntools/github-release/#release-process","text":"","title":"Release Process"},{"location":"ntools/github-release/#stage-release","text":"When nb stage runs successfully: The tool creates a stage release tagged with the next stage release number. The release notes include the commits since the last stage or production tag. The API token from the repository secrets is used to create this release. The release package is uploaded to the release.","title":"Stage Release"},{"location":"ntools/github-release/#production-release","text":"When nb prod runs successfully: The tool creates a production release tagged with the next production release number. The release notes include the commits since the last production tag. All previous stage releases are deleted. The API token from the repository secrets is used to create this release. The release package is uploaded to the release.","title":"Production Release"},{"location":"ntools/github-release/#create-a-github-token","text":"Follow the GitHub documentation to create a GitHub token.","title":"Create a GitHub Token"},{"location":"ntools/github-release/#required-permissions","text":"The access token must have the following permissions: Permission Type Scope Description Repository Contents: Read/Write Access repository contents. Metadata: Read-only Access repository metadata. Actions: Read/Write Manage GitHub Actions (if needed). Packages: Read/Write Manage GitHub Packages (if needed). Workflow Workflows: Read/Write Manage workflows (if needed). Release Releases: Read/Write Manage GitHub releases.","title":"Required Permissions"},{"location":"ntools/github-release/#githubrelease-command-line-options","text":"","title":"GitHubRelease Command Line Options"},{"location":"ntools/github-release/#usage","text":"GitHubRelease.exe command [-repo value] [-tag value] [-branch value] [-file value] [-path value] [-v value] - command : Specifies the command to execute. create -> Create a release. Requires repo, tag, branch and file. download -> Download an asset. Requires repo, tag, and path (optional) ---- (one of create,download, required) - repo : Specifies the Git repository in the format any of the following formats: repoName (UserName is declared the `OWNER` environment variable) userName/repoName https://github.com/userName/repoName (Full URL to the repository on GitHub). This is applicable to all commands. (string, default=) - tag : Specifies the tag name. Applicable for all commands (string, default=) - branch : Specifies the branch name. Applicable for create command (string, default=main) - file : Specifies the asset file name. Must include full path. Applicable for create command (string, default=) - path : Specifies the asset path. Must be an absolute path. (string, default=) - v : Optional parameter which sets the console output verbose level. (true or false, default=False)","title":"Usage"},{"location":"ntools/github-release/#example-creating-a-release","text":"To create a release for the repository my-repo with the tag 1.0.0 , branch main , and an asset located at C:\\Releases\\1.0.0.zip , you would use the following command: GitHubRelease.exe create -repo userName/my-repo -tag 1.0.0 -branch main -file C:\\Releases\\1.1.0.zip","title":"Example: Creating a Release"},{"location":"ntools/github-release/#example-downloading-an-asset","text":"To download an asset from the release with the tag 1.0.0 in the repository my-repo to the path C:\\Downloads : GitHubRelease.exe download -repo userName/my-repo -tag 1.0.0 -path C:\\Downloads An asset named 1.0.0.zip will be downloaded to the specified path if it exists in the release. Here is the updated section in github-release.md with an example using the -repo option with a full GitHub URL:","title":"Example: Downloading an Asset"},{"location":"ntools/github-release/#example-creating-a-release-with-full-github-url","text":"To create a release for the repository my-repo with the tag 1.0.0 , branch main , and an asset located at C:\\Releases\\1.0.0.zip , using the full GitHub URL: GitHubRelease.exe create -repo https://github.com/userName/my-repo -tag 1.0.0 -branch main -file C:\\Releases\\1.0.0.zip","title":"Example: Creating a Release with Full GitHub URL"},{"location":"ntools/github-release/#example-downloading-an-asset-with-full-github-url","text":"To download an asset from the release with the tag 1.0.0 in the repository my-repo to the path C:\\Downloads , using the full GitHub URL: GitHubRelease.exe download -repo https://github.com/userName/my-repo -tag 1.0.0 -path C:\\Downloads An asset named 1.0.0.zip will be downloaded to the specified path if it exists in the release.","title":"Example: Downloading an Asset with Full GitHub URL"},{"location":"ntools/nbackup/","text":"Nbackup ( nbackup.exe ) is a tool that leverages robocopy to backup a list of files and folders from a source to a destination. It is designed to be reliable and efficient, ensuring that your data is safe. Usage Nbackup.exe [-i value] [-e value] [-v value] [-performbackup value] - i : input json file which specifies source, destination and backup options. (string, default=) - e : Extract input json example file to current directory. (string, default=) - v : Verbose level (true or false, default=False) - performbackup : Set to false to verify json file without backup (true or false, default=True) A sample json file is provided below: { \"BackupsList\": [ { \"Source\": \".\", \"Destination\": \"%APPDATA%\\\\ntools\", \"ExcludeFolders\": [ \".git\", \".vs\" ], \"ExcludeFiles\": [ \"*.exe\", \"*.dll\", \"*.pdb\" ], \"LogFile\": \"%APPDATA%\\\\backup.log\", \"BackupOptions\": \"/V /R:5 /W:5 /MT:16 /dcopy:DAT /copy:DT\" } ] }","title":"Nbackup (nbackup.exe)"},{"location":"ntools/nbackup/#usage","text":"Nbackup.exe [-i value] [-e value] [-v value] [-performbackup value] - i : input json file which specifies source, destination and backup options. (string, default=) - e : Extract input json example file to current directory. (string, default=) - v : Verbose level (true or false, default=False) - performbackup : Set to false to verify json file without backup (true or false, default=True) A sample json file is provided below: { \"BackupsList\": [ { \"Source\": \".\", \"Destination\": \"%APPDATA%\\\\ntools\", \"ExcludeFolders\": [ \".git\", \".vs\" ], \"ExcludeFiles\": [ \"*.exe\", \"*.dll\", \"*.pdb\" ], \"LogFile\": \"%APPDATA%\\\\backup.log\", \"BackupOptions\": \"/V /R:5 /W:5 /MT:16 /dcopy:DAT /copy:DT\" } ] }","title":"Usage"},{"location":"ntools/nbuild-targets/","text":"The table below lists all available targets for the Nbuild tool. c:\\source\\ntools\\nbuild.targets Targets Target Name Description ARTIFACTS Setup the ARTIFACTS folders for binaries and test results - override CLEAN_ARTIFACTS Delete the ARTIFACTS folder after PACKAGE target is completed TEST_GIT Temporary Target to test the Git Task LOCAL Build local stage without incrementing the version FILE_VERSIONS Test for FileVersion task and powershell file-version.ps1 NBUILD_DOWNLOAD Download Nbuild specified in the NbuildTargetVersion NBUILD_INSTALL Install Nbuild specified in the NbuildTargetVersion DEV_SETUP Setup Development Environment MKDOCS Build docs locally for testing NBUILD_DOWNLOAD Download Nbuild specified in the NbuildTargetVersion Update the ntools-launcher nuget package in the local feed fot testing - not needed for normal builds NBUILD_INSTALL Install Nbuild specified in the NbuildTargetVersion GET_PRODUCT_CODES Example to get the installation Product code used for uninstallation of product C:\\Program Files\\Nbuild\\common.targets Targets Target Name Description PROPERTIES Common properties that will be used by all targets CLEAN Clean up the project and artifacts folder INSTALL_DEP Install dependencies TELEMETRY_OPT_OUT Opt out of the DOTNET_CLI_TELEMETRY_OPTOUT - move to common DEV Create a development package for testing STAGE Create a stage package for testing PROD Create a production package for release STAGE_DEPLOY Create a stage package and deploy for testing PROD_DEPLOY Create a production package and deploy for release SOLUTION Build the solution Release configuration using dotnet build SOLUTION_MSBUILD Build the solution Release configuration using MSBuild PACKAGE Create a package for the solution default is a zip file of all artifacts COPY_ARTIFACTS Save the artifacts to the artifacts folder DEPLOY Deploy the package. default is to extract artifacts into DeploymentProperty folder TEST Run all tests using dotnet test in Release mode TEST_DEBUG Run all tests using dotnet test in Debug mode IS_ADMIN Check if current process is running in admin mode AdminCheckExitCode property is set SingleProject Example how to build a single project HandleError Error handling placeholder C:\\Program Files\\nbuild\\apps-versions.targets Targets Target Name Description APP_COMMON Defines the download location for the apps C:\\Program Files\\nbuild\\git.targets Targets Target Name Description GIT_DOWNLOAD Download Git For Windows version specified in GitTargetVersion - Requires admin mode GIT_INSTALL Download Git For Windows version specified in GitTargetVersion property and install GIT_UPDATE Update the current Git for Windows C:\\Program Files\\nbuild\\dotnet.targets Targets Target Name Description DOTNET_SDK_DOWNLOAD Download dotnet Core sdk DOTNET_SDK_INSTALL Download and install dotnet Core sdk DOTNET_DOWNLOAD Download DotNet Core DOTNET_INSTALL Download and install DotNet Core C:\\Program Files\\nbuild\\code.targets Targets Target Name Description CODE_DOWNLOAD Download node version specified in CodeTargetVersion - Requires admin mode CODE_INSTALL Download node version specified in CodeTargetVersion property and install C:\\Program Files\\nbuild\\node.targets Targets Target Name Description NODE_DOWNLOAD Download node version specified in NodeTargetVersion - Requires admin mode NODE_INSTALL Download node version specified in NodeTargetVersion property and install NODE_VERSION Display the installed note version C:\\Program Files\\nbuild\\mongodb.targets Targets Target Name Description MONGODB_INSTALL Display mongodb version specified in TargetNodeVersion property and install C:\\Program Files\\nbuild\\nuget.targets Targets Target Name Description NUGET_VERSION Display the installed nuget version NUGET_INSTALL Download latest nuget.exe and install C:\\Program Files\\nbuild\\ngit.targets Targets Target Name Description GIT_STATUS Display the current git status AUTOTAG_STAGE Increment version for a stage build SET_TAG Set version for a stage build GIT_PULL Get the latest tag from git AUTOTAG_PROD Increment version for a production build TAG Get the tag from git PUSH_TAG Push the tag to the remote repo GIT_BRANCH Get the current git branch","title":"Nbuild targets"},{"location":"ntools/nbuild/","text":"Usage nbuild.targets common.targets Examples Nbuild Nbuild ( nb.exe ) is a wrapper for MSBuild that simplifies building solutions and provides a way to define and run custom targets. Nb.exe is also a command line tool that installs the development tools and run times required to build and test any solution. To build a target type Nb.exe [Target Name] The list of targets is generated by running the Nb.exe targets command. Nb.exe expects the nbuild.targets file to be present in the solution folder. Below is a full list of options that can be used with Nb.exe : Usage Nb.exe command [-json value] [-v value] [-tag value] [-buildtype value] - command : Specifies the command to execute. list -> Lists apps specified in the -json option. install -> Downloads and installs apps specified in the -json option (require admin privileges to run). uninstall -> Uninstalls apps specified in the -json option (require admin privileges to run). download -> Downloads apps specified in the -json option (require admin privileges to run). targets -> Lists available targets and saves them in the targets.md file. path -> Displays environment path in local machine. git_info -> Displays the current git information in the local repository. git_settag -> Set specified tag with -tag option git_autotag -> Set next tag based on the build type: STAGE | PROD git_push_autotag -> Set next tag based on the build type and push to remote repo git_branch -> Displays the current git branch in the local repository ---- (one of list,install,uninstall,download,targets,path,git_info,git_settag,git_autotag,git_push_autotag,git_branch required) - json : Specifies the JSON file that holds the list of apps. Only valid for the install, download, and list commands. - By default, the -json option points to the ntools deployment folder: $(ProgramFiles)\\build\\ntools.json. Sample JSON file: https://github.com/naz-hage/ntools/blob/main/dev-setup/ntools.json (string, default=$(ProgramFiles)\\nbuild\\ntools.json) - v : Optional parameter which sets the console output verbose level ---- - if no command line options are specified with the -v option , i.e.: 'Nb.exe stage -v true` `Nb` will run an MSbuild target `stage` defined in a `nbuild.targets` file which present in the solution folder. Run `Nb.exe Targets` to list the available targets. -v Possible Values: (true or false, default=False) - tag : Specifies the tag used for git_settag command. (string, default=) - buildtype : Specifies the build type used for git_autotag and git_push_autotag commands. Possible values: STAGE, PROD. (string, default=) If the -json option is not specified, the default json file $(ProgramFiles)\\Nbuild\\NTools.json is used . nbuild.targets See nbuild.targets for more information on how to create a nbuild.targets file. common.targets The common.targets file includes all the defaults targets needed to build, test and deploy a solution. The common.targets file is located in the $(ProgramFiles)\\Nbuild folder. The nbuild.targets file in the solution folder imports the common.targets file Below is list of common targets that are defined in the common.targets file Target Name Description PROPERTIES Common properties that will be used by all targets CLEAN Clean up the project and artifacts folder INSTALL_DEP Install dependencies TELEMETRY_OPT_OUT Opt out of the DOTNET_CLI_TELEMETRY_OPTOUT - move to common STAGE Create a stage package for testing PROD Create a production package for release STAGE_DEPLOY Create a stage package and deploy for testing PROD_DEPLOY Create a production package and deploy for release SOLUTION Build the solution Release configuration using dotnet build SOLUTION_MSBUILD Build the solution Release configuration using MSBuild PACKAGE Create a package for the solution default is a zip file of all artifacts COPY_ARTIFACTS Save the artifacts to the artifacts folder DEPLOY Deploy the package. default is to extract artifacts into DeploymentProperty folder TEST Run all tests using dotnet test in Release mode TEST_DEBUG Run all tests using dotnet test in Debug mode IS_ADMIN Check if current process is running in admin mode AdminCheckExitCode property is set SingleProject Example how to build a single project HandleError Error handling placeholder","title":"Nbuild (nb.exe)"},{"location":"ntools/nbuild/#nbuild","text":"Nbuild ( nb.exe ) is a wrapper for MSBuild that simplifies building solutions and provides a way to define and run custom targets. Nb.exe is also a command line tool that installs the development tools and run times required to build and test any solution. To build a target type Nb.exe [Target Name] The list of targets is generated by running the Nb.exe targets command. Nb.exe expects the nbuild.targets file to be present in the solution folder. Below is a full list of options that can be used with Nb.exe :","title":"Nbuild"},{"location":"ntools/nbuild/#usage","text":"Nb.exe command [-json value] [-v value] [-tag value] [-buildtype value] - command : Specifies the command to execute. list -> Lists apps specified in the -json option. install -> Downloads and installs apps specified in the -json option (require admin privileges to run). uninstall -> Uninstalls apps specified in the -json option (require admin privileges to run). download -> Downloads apps specified in the -json option (require admin privileges to run). targets -> Lists available targets and saves them in the targets.md file. path -> Displays environment path in local machine. git_info -> Displays the current git information in the local repository. git_settag -> Set specified tag with -tag option git_autotag -> Set next tag based on the build type: STAGE | PROD git_push_autotag -> Set next tag based on the build type and push to remote repo git_branch -> Displays the current git branch in the local repository ---- (one of list,install,uninstall,download,targets,path,git_info,git_settag,git_autotag,git_push_autotag,git_branch required) - json : Specifies the JSON file that holds the list of apps. Only valid for the install, download, and list commands. - By default, the -json option points to the ntools deployment folder: $(ProgramFiles)\\build\\ntools.json. Sample JSON file: https://github.com/naz-hage/ntools/blob/main/dev-setup/ntools.json (string, default=$(ProgramFiles)\\nbuild\\ntools.json) - v : Optional parameter which sets the console output verbose level ---- - if no command line options are specified with the -v option , i.e.: 'Nb.exe stage -v true` `Nb` will run an MSbuild target `stage` defined in a `nbuild.targets` file which present in the solution folder. Run `Nb.exe Targets` to list the available targets. -v Possible Values: (true or false, default=False) - tag : Specifies the tag used for git_settag command. (string, default=) - buildtype : Specifies the build type used for git_autotag and git_push_autotag commands. Possible values: STAGE, PROD. (string, default=) If the -json option is not specified, the default json file $(ProgramFiles)\\Nbuild\\NTools.json is used .","title":"Usage"},{"location":"ntools/nbuild/#nbuildtargets","text":"See nbuild.targets for more information on how to create a nbuild.targets file.","title":"nbuild.targets"},{"location":"ntools/nbuild/#commontargets","text":"The common.targets file includes all the defaults targets needed to build, test and deploy a solution. The common.targets file is located in the $(ProgramFiles)\\Nbuild folder. The nbuild.targets file in the solution folder imports the common.targets file Below is list of common targets that are defined in the common.targets file Target Name Description PROPERTIES Common properties that will be used by all targets CLEAN Clean up the project and artifacts folder INSTALL_DEP Install dependencies TELEMETRY_OPT_OUT Opt out of the DOTNET_CLI_TELEMETRY_OPTOUT - move to common STAGE Create a stage package for testing PROD Create a production package for release STAGE_DEPLOY Create a stage package and deploy for testing PROD_DEPLOY Create a production package and deploy for release SOLUTION Build the solution Release configuration using dotnet build SOLUTION_MSBUILD Build the solution Release configuration using MSBuild PACKAGE Create a package for the solution default is a zip file of all artifacts COPY_ARTIFACTS Save the artifacts to the artifacts folder DEPLOY Deploy the package. default is to extract artifacts into DeploymentProperty folder TEST Run all tests using dotnet test in Release mode TEST_DEBUG Run all tests using dotnet test in Debug mode IS_ADMIN Check if current process is running in admin mode AdminCheckExitCode property is set SingleProject Example how to build a single project HandleError Error handling placeholder","title":"common.targets"},{"location":"ntools/nbuildtasks/","text":"NbuildTasks NbuildTasks (nbuildtasks.dll) is a class library that exposes custom MSBuild tasks. It is used by Nbuild to perform various tasks such as web download and tools installation during the build of any project. List of Tasks Task Name Description RedError Displays an error message in red color in the console output. Git Git commands such as get or set the tag from the branch or build type and displays it in the console output. ColorMessage Displays a message in the console output with the specified color. FileVersion Gets the version of the specified file. WebDownload Downloads a file from the specified URL. Unzip Unzips the specified file. Zip Zips the specified file. Here are examples of custom Tasks that can be used during builds: RedError <!-- This target uses the `RedError` task to display an error message in red color --> <Target Name=\"RED_ERROR\"> <RedError Message=\"This is an error message displayed in Red\" /> </Target> Git <Target Name=\"TAG\"> <-- This target uses the `GetTag` task to display the tag from a branch --> <GetTag Branch=\"$(Branch)\" BuildType=\"$(BuildType)\"> <Output TaskParameter=\"Tag\" PropertyName=\"Tag\" /> </GetTag> <Message Text=\"Tag: $(Tag)\" Importance=\"high\" /> </Target> ColorMessage <!-- This target uses the `ColorMessage` task to display a message with a specified color --> <Target Name=\"COLOR_MESSAGE\"> <ColorMessage Message=\"This is a message displayed in Yellow\" Color=\"Yellow\" /> </Target> FileVersion <!-- This target uses the `FileVersion` task to file version of specified file --> <Target Name=\"FILE_VERSION\"> <PropertyGroup> <FileExe>$(ProgramFiles)\\Nbuild\\nb.exe</FileExe> </PropertyGroup> <FileVersion Name=\"$(FileExe)\" Condition=\"Exists('$(FileExe)')\" > <Output TaskParameter=\"Output\" PropertyName=\"Version\" /> </FileVersion> </Target> WebDownload <!-- This target uses the `WebDownload` task to download a file from a specified URL --> <Target Name=\"WEB_DOWNLOAD\" DependsOnTargets=\"IS_ADMIN\" > <PropertyGroup> <!-- visit https://nodejs.org/dist/ to get the latest stable version --> <DownloadsDirectory>c:\\NtoolsDownloads</DownloadsDirectory> <NodeAppName>Node.js</NodeAppName> <NodeTargetVersion>21.5.0</NodeTargetVersion> <WebUri>https://nodejs.org/dist/v$(NodeTargetVersion)/node-v$(NodeTargetVersion)-x64.msi</WebUri> <FileName>$(DownloadsDirectory)\\node-v$(NodeTargetVersion)-x64.msi</FileName> </PropertyGroup> <RedError Condition=\"'$(IsAdmin)' == false\" Message=\"Must be an admin to install $(NodeAppName)\" /> <Delete Files=\"$(FileName)\" Condition=\"Exists('$(FileName)') == true\" /> <WebDownload WebUri=\"$(WebUri)\" FileName=\"$(FileName)\" /> <Message Text=\"==> NODE_DONE\"/> </Target> Unzip <!-- This target uses the `Unzip` task to decompress a specified file --> <Target Name=\"UNZIP\"> <PropertyGroup> <FileName>c:\\temp\\source.zip</FileName> <Path>c:\\temp\\test1</Path> </PropertyGroup> <Unzip FileName=\"$(FileName)\" Destination=\"$(Path)\" /> <Message Text=\"==> ZIP_DONE\"/> </Target> Zip <!-- This target uses the `Zip` task to compress a specified file --> <Target Name=\"ZIP\"> <PropertyGroup> <FileName>c:\\temp\\source.zip</FileName> <Path>c:\\temp\\test</Path> </PropertyGroup> <Zip FileName=\"$(FileName)\" Path=\"$(Path)\" /> <Message Text=\"==> ZIP_DONE\"/> </Target> Pwsh <!-- This target uses the `Pwsh` custom NTools MS Build task to launch a PowerShell Core script --> <Target Name=\"INSTALL_NTOOLS\"> <Pwsh ScriptPath=\"$(SolutionDir)\\dev-setup\\install.ps1\" Arguments=\"\" WorkingDirectory =\"$(SolutionDir)\\dev-setup\"/> <Message Text=\"==> INSTALL_NTOOLS_DONE\"/> </Target> You can also find the complete list of predefined MSBuild properties in the Microsoft documentation . Here are few examples: $(MSBuildProjectFile) : The file name of the project file. $(MSBuildProjectName) : The file name of the project file without the extension. $(MSBuildProjectExtension) : The extension of the project file. $(MSBuildProjectFullPath) : The absolute path of the project file. $(MSBuildThisFileDirectory) : The directory of the MSBuild file that is currently being processed.","title":"Nbuild Tasks"},{"location":"ntools/nbuildtasks/#nbuildtasks","text":"NbuildTasks (nbuildtasks.dll) is a class library that exposes custom MSBuild tasks. It is used by Nbuild to perform various tasks such as web download and tools installation during the build of any project.","title":"NbuildTasks"},{"location":"ntools/nbuildtasks/#list-of-tasks","text":"Task Name Description RedError Displays an error message in red color in the console output. Git Git commands such as get or set the tag from the branch or build type and displays it in the console output. ColorMessage Displays a message in the console output with the specified color. FileVersion Gets the version of the specified file. WebDownload Downloads a file from the specified URL. Unzip Unzips the specified file. Zip Zips the specified file. Here are examples of custom Tasks that can be used during builds:","title":"List of Tasks"},{"location":"ntools/nbuildtasks/#rederror","text":"<!-- This target uses the `RedError` task to display an error message in red color --> <Target Name=\"RED_ERROR\"> <RedError Message=\"This is an error message displayed in Red\" /> </Target>","title":"RedError"},{"location":"ntools/nbuildtasks/#git","text":"<Target Name=\"TAG\"> <-- This target uses the `GetTag` task to display the tag from a branch --> <GetTag Branch=\"$(Branch)\" BuildType=\"$(BuildType)\"> <Output TaskParameter=\"Tag\" PropertyName=\"Tag\" /> </GetTag> <Message Text=\"Tag: $(Tag)\" Importance=\"high\" /> </Target>","title":"Git"},{"location":"ntools/nbuildtasks/#colormessage","text":"<!-- This target uses the `ColorMessage` task to display a message with a specified color --> <Target Name=\"COLOR_MESSAGE\"> <ColorMessage Message=\"This is a message displayed in Yellow\" Color=\"Yellow\" /> </Target>","title":"ColorMessage"},{"location":"ntools/nbuildtasks/#fileversion","text":"<!-- This target uses the `FileVersion` task to file version of specified file --> <Target Name=\"FILE_VERSION\"> <PropertyGroup> <FileExe>$(ProgramFiles)\\Nbuild\\nb.exe</FileExe> </PropertyGroup> <FileVersion Name=\"$(FileExe)\" Condition=\"Exists('$(FileExe)')\" > <Output TaskParameter=\"Output\" PropertyName=\"Version\" /> </FileVersion> </Target>","title":"FileVersion"},{"location":"ntools/nbuildtasks/#webdownload","text":"<!-- This target uses the `WebDownload` task to download a file from a specified URL --> <Target Name=\"WEB_DOWNLOAD\" DependsOnTargets=\"IS_ADMIN\" > <PropertyGroup> <!-- visit https://nodejs.org/dist/ to get the latest stable version --> <DownloadsDirectory>c:\\NtoolsDownloads</DownloadsDirectory> <NodeAppName>Node.js</NodeAppName> <NodeTargetVersion>21.5.0</NodeTargetVersion> <WebUri>https://nodejs.org/dist/v$(NodeTargetVersion)/node-v$(NodeTargetVersion)-x64.msi</WebUri> <FileName>$(DownloadsDirectory)\\node-v$(NodeTargetVersion)-x64.msi</FileName> </PropertyGroup> <RedError Condition=\"'$(IsAdmin)' == false\" Message=\"Must be an admin to install $(NodeAppName)\" /> <Delete Files=\"$(FileName)\" Condition=\"Exists('$(FileName)') == true\" /> <WebDownload WebUri=\"$(WebUri)\" FileName=\"$(FileName)\" /> <Message Text=\"==> NODE_DONE\"/> </Target>","title":"WebDownload"},{"location":"ntools/nbuildtasks/#unzip","text":"<!-- This target uses the `Unzip` task to decompress a specified file --> <Target Name=\"UNZIP\"> <PropertyGroup> <FileName>c:\\temp\\source.zip</FileName> <Path>c:\\temp\\test1</Path> </PropertyGroup> <Unzip FileName=\"$(FileName)\" Destination=\"$(Path)\" /> <Message Text=\"==> ZIP_DONE\"/> </Target>","title":"Unzip"},{"location":"ntools/nbuildtasks/#zip","text":"<!-- This target uses the `Zip` task to compress a specified file --> <Target Name=\"ZIP\"> <PropertyGroup> <FileName>c:\\temp\\source.zip</FileName> <Path>c:\\temp\\test</Path> </PropertyGroup> <Zip FileName=\"$(FileName)\" Path=\"$(Path)\" /> <Message Text=\"==> ZIP_DONE\"/> </Target>","title":"Zip"},{"location":"ntools/nbuildtasks/#pwsh","text":"<!-- This target uses the `Pwsh` custom NTools MS Build task to launch a PowerShell Core script --> <Target Name=\"INSTALL_NTOOLS\"> <Pwsh ScriptPath=\"$(SolutionDir)\\dev-setup\\install.ps1\" Arguments=\"\" WorkingDirectory =\"$(SolutionDir)\\dev-setup\"/> <Message Text=\"==> INSTALL_NTOOLS_DONE\"/> </Target> You can also find the complete list of predefined MSBuild properties in the Microsoft documentation . Here are few examples: $(MSBuildProjectFile) : The file name of the project file. $(MSBuildProjectName) : The file name of the project file without the extension. $(MSBuildProjectExtension) : The extension of the project file. $(MSBuildProjectFullPath) : The absolute path of the project file. $(MSBuildThisFileDirectory) : The directory of the MSBuild file that is currently being processed.","title":"Pwsh"},{"location":"ntools/ngit/","text":"Ngit is a simple wrapper for the Git tool that performs basic commands such as getting and setting tags. Usage Ngit.exe command [-url value] [-tag value] [-buildtype value] [-v value] - command : Specifies the git command to execute. tag -> Get the current tag settag -> Set specified tag in -tag option autotag -> Set next tag based on the build type: STAGE | PROD setautotag -> Set next tag based on the build type and push to remote repo deletetag -> Delete specified tag in -tag option branch -> Get the current branch clone -> Clone specified Git repo in the -url option ---- (one of tag,setTag,autoTag,setAutoTag,deleteTag,branch,clone,pushTag, required) - url : Specifies the Git repository URL. (string, default=) - tag : Specifies the tag used for settag and deletetag commands. (string, default=) - buildtype : Specifies the build type used for autotag and setautotag commands. Possible values: STAGE, PROD. (string, default=) - v : Specifies whether to print additional information. (true or false, default=False) Examples Example 1: Get the Current Tag To retrieve the current Git tag: Ngit.exe tag -v true Example 2: Set a Specific Tag To set a specific tag (e.g., 1.0.0 ): Ngit.exe settag -tag 1.0.0 -v true Example 3: Auto-Tag Based on Build Type To set the next tag based on the build type STAGE : Ngit.exe autotag -buildtype STAGE -v true Example 4: Clone a Repository To clone a Git repository from a specific URL: Ngit.exe clone -url https://github.com/example/repo.git -v true Example 5: Delete a Tag To delete a specific tag (e.g., 1.0.0 ): Ngit.exe deletetag -tag 1.0.0 -v true These examples demonstrate how to use Ngit for common Git operations such as managing tags, branches, and repositories.","title":"Ngit (ngit.exe)"},{"location":"ntools/ngit/#usage","text":"Ngit.exe command [-url value] [-tag value] [-buildtype value] [-v value] - command : Specifies the git command to execute. tag -> Get the current tag settag -> Set specified tag in -tag option autotag -> Set next tag based on the build type: STAGE | PROD setautotag -> Set next tag based on the build type and push to remote repo deletetag -> Delete specified tag in -tag option branch -> Get the current branch clone -> Clone specified Git repo in the -url option ---- (one of tag,setTag,autoTag,setAutoTag,deleteTag,branch,clone,pushTag, required) - url : Specifies the Git repository URL. (string, default=) - tag : Specifies the tag used for settag and deletetag commands. (string, default=) - buildtype : Specifies the build type used for autotag and setautotag commands. Possible values: STAGE, PROD. (string, default=) - v : Specifies whether to print additional information. (true or false, default=False)","title":"Usage"},{"location":"ntools/ngit/#examples","text":"","title":"Examples"},{"location":"ntools/ngit/#example-1-get-the-current-tag","text":"To retrieve the current Git tag: Ngit.exe tag -v true","title":"Example 1: Get the Current Tag"},{"location":"ntools/ngit/#example-2-set-a-specific-tag","text":"To set a specific tag (e.g., 1.0.0 ): Ngit.exe settag -tag 1.0.0 -v true","title":"Example 2: Set a Specific Tag"},{"location":"ntools/ngit/#example-3-auto-tag-based-on-build-type","text":"To set the next tag based on the build type STAGE : Ngit.exe autotag -buildtype STAGE -v true","title":"Example 3: Auto-Tag Based on Build Type"},{"location":"ntools/ngit/#example-4-clone-a-repository","text":"To clone a Git repository from a specific URL: Ngit.exe clone -url https://github.com/example/repo.git -v true","title":"Example 4: Clone a Repository"},{"location":"ntools/ngit/#example-5-delete-a-tag","text":"To delete a specific tag (e.g., 1.0.0 ): Ngit.exe deletetag -tag 1.0.0 -v true These examples demonstrate how to use Ngit for common Git operations such as managing tags, branches, and repositories.","title":"Example 5: Delete a Tag"},{"location":"ntools/ntools/","text":"The Windows dev environment has good information on how to setup a Windows dev environment. The table below list the latest dev tools used in Ntools. Tool Version Last Checked on Git for Windows 2.49.0 18-Mar-25 Windows Terminal 1.21.10351.0 10-Mar-25 Download MongoDB Community Server 8.0.5 10-Mar-25 Terraform 1.11.1 09-Mar-25 Terraform Lint 0.55.1 09-Mar-25 Azure CLI 2.70.0 10-Mar-25 Visual Studio 2022 Community Edition 17.11.3 14-Sep-24 Visual Studio Code 1.98.2 06-Mar-25 Node.js 22.14.1 10-mar-25 Download Postman Get Started for Free v11.36.0 10-mar-25 Install Docker Desktop on Windows 4.38.0.0 03-Mar-25 Download .NET SDKs for Visual Studio 9.0.100 15-Nov-24 Burp Suite 2021.11.2 01-Oct-23 Draw.io N/A 01-Oct-23 Dotnet Runtime 9.0.2 10-Mar-25 PowerShell 7.5.1 26-May-25 NuGet 6.13.2 10-mar-25 SysInternals 2.90.0 22-Jun-24 Python 3.13.2 10-mar-25 Argo CD 2.14.5 12-mar-25 minikube 1.35.0 12-mar-25 kubernetes 1.32.2 12-mar-25","title":"Development Tools"}]}
{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Software Tools Collection This repository contains a collection of software tools specifically designed to automate various build and test tasks on Windows clients. Whether you are a developer working on your local machine or using GitHub Actions for continuous integration, these tools will simplify your workflow and enhance your productivity. Getting started Install ntools Practice using ntools Setup your project PowerShell Module ntools-scripts Module - Consolidated PowerShell module with all NTools functions List of tools Nbuild (nb.exe) File and Folder Listing Utility (lf.exe) Nbackup (nbackup.exe) Azure DevOps Work Item CLI Utility (wi.exe) Github Release Don't hesitate to write an issue if you have any questions or suggestions.","title":"Overview"},{"location":"#software-tools-collection","text":"This repository contains a collection of software tools specifically designed to automate various build and test tasks on Windows clients. Whether you are a developer working on your local machine or using GitHub Actions for continuous integration, these tools will simplify your workflow and enhance your productivity. Getting started Install ntools Practice using ntools Setup your project PowerShell Module ntools-scripts Module - Consolidated PowerShell module with all NTools functions List of tools Nbuild (nb.exe) File and Folder Listing Utility (lf.exe) Nbackup (nbackup.exe) Azure DevOps Work Item CLI Utility (wi.exe) Github Release Don't hesitate to write an issue if you have any questions or suggestions.","title":"Software Tools Collection"},{"location":"buildtypes/","text":"ntools have two predefined build types: stage and prod . The stage build type is deploy code to a stage environment used for debugging and testing, while the prod build type is used for prod deployment. The stage build type includes debugging symbols and is not optimized, while the production build type is optimized for performance and does not include debugging symbols. stage The stage build type use the following command: nb stage It includes the following steps: Clean the project Restore the project Build the project Test the project Publish the project to the stage environment Run various tests on the stage environment The version is set according to the rules in versioning prod The prod build type use the following command: nb prod It includes the following steps: Clean the project Restore the project Build the project Test the project Publish the project to the production environment Run smoke tests on the production environment This build is available for download from the GitHub release page The version is set according to the rules in versioning Your project can have additional build types which you can add to your nbuild.targets fille,","title":"Build Types"},{"location":"buildtypes/#stage","text":"The stage build type use the following command: nb stage It includes the following steps: Clean the project Restore the project Build the project Test the project Publish the project to the stage environment Run various tests on the stage environment The version is set according to the rules in versioning","title":"stage"},{"location":"buildtypes/#prod","text":"The prod build type use the following command: nb prod It includes the following steps: Clean the project Restore the project Build the project Test the project Publish the project to the production environment Run smoke tests on the production environment This build is available for download from the GitHub release page The version is set according to the rules in versioning Your project can have additional build types which you can add to your nbuild.targets fille,","title":"prod"},{"location":"installation/","text":"To get started with ntools , you need to install the latest version of 64-bit Git for Windows on your machine, then follow these steps: Open a PowerShell in administrative mode. Assume c:\\source as directory %MainDirectory% which will be used through this document. Clone this repository to your local machine from the %MainDirectory% folder. cd c:\\source git clone https://github.com/naz-hage/ntools Change the PowerShell execution policy to allow the installation script to run. Run the following command: Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope Process This command will allow the installation script to run. Once the installation is complete, the execution policy will revert to its original state. Run the following command to install the ntools: cd c:\\source\\ntools\\dev-setup .\\install.ps1 Or using the new ntools-scripts module (recommended): cd c:\\source\\ntools Import-Module \"./scripts/module-package/ntools-scripts.psm1\" -Force Install-NTools -NtoolsJsonPath \"./dev-setup/ntools.json\" This command will install the Dotnet Core Desktop runtime and download the ntools from GitHub, installs the ntools package in the %ProgramFiles%\\Nbuild folder, sets up the nTools development environment, adds the %ProgramFiles%\\Nbuild will be added to the system path. After the installation is complete, check out the nbuild.targets for more all the available targets, and navigate to Usage to learn how to execute a build target. ntools is now installed on your machine, and you can start using it to learn how to build and run additional targets . If you have any questions or encounter any issues during the installation process, please don't hesitate to write an an issue . We're here to help!","title":"Installation"},{"location":"setup/","text":"Setting Up Your Project with dev-setup The dev-setup folder is a critical part of your project setup. It contains scripts and configuration files to automate the installation of development tools and the setup of your development environment. PowerShell Module Integration New in v2.3.0 : NTools now includes a consolidated PowerShell module ( ntools-scripts ) that replaces individual scripts with a unified, function-based approach. This module is automatically integrated with the setup process. Using ntools-scripts Module # Import the module Import-Module \"./scripts/module-package/ntools-scripts.psm1\" -Force # Install NTools using the module (recommended approach) Install-NTools -NtoolsJsonPath \"./dev-setup/ntools.json\" # Set up development environment Set-DevelopmentEnvironment Install-DevelopmentApps For complete module documentation, see ntools-scripts Module . Overview of dev-setup Folder The dev-setup folder typically includes the following files: ntools.json Contains installation information for ntools. This file is required to install ntools before other development tools. apps.json Lists the development tools required for your project, including their installation and uninstallation details. Legacy scripts (deprecated in favor of ntools-scripts module) Individual PowerShell scripts for specific tasks File Details 1. ntools.json This file provides the installation details for ntools, which is required to manage other tools in the project. Example: { \"Version\": \"1.2.0\", \"NbuildAppList\": [ { \"Name\": \"Ntools\", \"Version\": \"1.8.0\", \"AppFileName\": \"$(InstallPath)\\\\nb.exe\", \"WebDownloadFile\": \"https://github.com/naz-hage/ntools/releases/download/$(Version)/$(Version).zip\", \"DownloadedFile\": \"$(Version).zip\", \"InstallCommand\": \"powershell.exe\", \"InstallArgs\": \"-Command Expand-Archive -Path $(Version).zip -DestinationPath '$(InstallPath)' -Force\", \"InstallPath\": \"$(ProgramFiles)\\\\Nbuild\", \"UninstallCommand\": \"powershell.exe\", \"UninstallArgs\": \"-Command Remove-Item -Path '$(InstallPath)' -Recurse -Force\", \"StoredHash\": \"XXX\", \"AddToPath\": true } ] } 2. apps.json This file lists all the development tools required for the project. Each tool is defined with its name, version, installation details, and uninstallation details. Example: { \"Version\": \"1.2.0\", \"NbuildAppList\": [ { \"Name\": \"7-zip\", \"Version\": \"23.01\", \"AppFileName\": \"$(InstallPath)\\\\7z.exe\", \"WebDownloadFile\": \"https://www.7-zip.org/a/7z2301-x64.exe\", \"DownloadedFile\": \"7zip.exe\", \"InstallCommand\": \"$(DownloadedFile)\", \"InstallArgs\": \"/S /D=\\\"$(ProgramFiles)\\\\7-Zip\\\"\", \"InstallPath\": \"$(ProgramFiles)\\\\7-Zip\", \"UninstallCommand\": \"$(InstallPath)\\\\Uninstall.exe\", \"UninstallArgs\": \"/S\" } ] } Key Elements in apps.json: Element Name Description Name The name of the tool. Version The version of the tool. AppFileName The file name of the tool, used to check if it is already installed. WebDownloadFile The URL to download the tool. DownloadedFile The name of the downloaded file, used for installation. InstallCommand The command to install the tool. InstallArgs The arguments for the installation command. InstallPath The location where the tool will be installed. UninstallCommand The command to uninstall the tool. UninstallArgs The arguments for the uninstallation command. StoredHash (Optional) SHA256 hash of the file for verification. AddToPath (Optional) Whether to add the tool's path to the system PATH environment variable. 3. dev-setup.ps1 This PowerShell script automates the installation of tools and sets up the development environment. Key Responsibilities: Installs ntools using ntools.json. Installs other tools listed in apps.json. Verifies administrative privileges before proceeding. Example: # Import the install module $url = \"https://raw.githubusercontent.com/naz-hage/ntools/main/dev-setup/install.psm1\" $output = \"./install.psm1\" Invoke-WebRequest -Uri $url -OutFile $output Import-Module ./install.psm1 -Force # Install Ntools MainInstallApp -command install -json .\\ntools.json if ($LASTEXITCODE -ne 0) { Write-OutputMessage \"Error: Installation of ntools failed. Exiting script.\" exit 1 } # Install other tools & $global:NbExePath install -json .\\apps.json if ($LASTEXITCODE -ne 0) { Write-OutputMessage \"Error: Installation of other tools failed. Exiting script.\" exit 1 } Write-OutputMessage \"Completed installation script.\" Folder Structure Your project folder should look like this: %MainDirectory%\\ \u251c\u2500\u2500 MyProject\\ \u2502 \u251c\u2500\u2500 dev-setup\\ \u2502 \u2502 \u251c\u2500\u2500 ntools.json \u2502 \u2502 \u251c\u2500\u2500 apps.json \u2502 \u2502 \u251c\u2500\u2500 dev-setup.ps1 \u2502 \u251c\u2500\u2500 ... other project and test files \u2502 \u2514\u2500\u2500 nbuild.targets (this file is required in the solution folder) Adding a New Development Tool To add a new tool to your project: 1. Identify the tool's: - Download URL and file name. - Installation and uninstallation commands and arguments. - Installation path. - File name for version checks. - Version and name. 2. Add the tool's details to apps.json. Example for a new tool: { \"Name\": \"Docker\", \"Version\": \"4.38.0.0\", \"AppFileName\": \"$(InstallPath)\\\\Docker Desktop.exe\", \"WebDownloadFile\": \"https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe\", \"DownloadedFile\": \"Docker Desktop Installer.exe\", \"InstallCommand\": \"$(DownloadedFile)\", \"InstallArgs\": \"install --quiet\", \"InstallPath\": \"$(ProgramFiles)\\\\Docker\\\\Docker\", \"UninstallCommand\": \"powershell.exe\", \"UninstallArgs\": \"-Command \\\"Remove-Item -Path '$(InstallPath)' -Recurse -Force\\\"\", \"AddToPath\": true }","title":"Setup your project"},{"location":"setup/#setting-up-your-project-with-dev-setup","text":"The dev-setup folder is a critical part of your project setup. It contains scripts and configuration files to automate the installation of development tools and the setup of your development environment.","title":"Setting Up Your Project with dev-setup"},{"location":"setup/#powershell-module-integration","text":"New in v2.3.0 : NTools now includes a consolidated PowerShell module ( ntools-scripts ) that replaces individual scripts with a unified, function-based approach. This module is automatically integrated with the setup process.","title":"PowerShell Module Integration"},{"location":"setup/#using-ntools-scripts-module","text":"# Import the module Import-Module \"./scripts/module-package/ntools-scripts.psm1\" -Force # Install NTools using the module (recommended approach) Install-NTools -NtoolsJsonPath \"./dev-setup/ntools.json\" # Set up development environment Set-DevelopmentEnvironment Install-DevelopmentApps For complete module documentation, see ntools-scripts Module .","title":"Using ntools-scripts Module"},{"location":"setup/#overview-of-dev-setup-folder","text":"The dev-setup folder typically includes the following files: ntools.json Contains installation information for ntools. This file is required to install ntools before other development tools. apps.json Lists the development tools required for your project, including their installation and uninstallation details. Legacy scripts (deprecated in favor of ntools-scripts module) Individual PowerShell scripts for specific tasks","title":"Overview of dev-setup Folder"},{"location":"setup/#file-details","text":"","title":"File Details"},{"location":"setup/#1-ntoolsjson","text":"This file provides the installation details for ntools, which is required to manage other tools in the project. Example: { \"Version\": \"1.2.0\", \"NbuildAppList\": [ { \"Name\": \"Ntools\", \"Version\": \"1.8.0\", \"AppFileName\": \"$(InstallPath)\\\\nb.exe\", \"WebDownloadFile\": \"https://github.com/naz-hage/ntools/releases/download/$(Version)/$(Version).zip\", \"DownloadedFile\": \"$(Version).zip\", \"InstallCommand\": \"powershell.exe\", \"InstallArgs\": \"-Command Expand-Archive -Path $(Version).zip -DestinationPath '$(InstallPath)' -Force\", \"InstallPath\": \"$(ProgramFiles)\\\\Nbuild\", \"UninstallCommand\": \"powershell.exe\", \"UninstallArgs\": \"-Command Remove-Item -Path '$(InstallPath)' -Recurse -Force\", \"StoredHash\": \"XXX\", \"AddToPath\": true } ] }","title":"1. ntools.json"},{"location":"setup/#2-appsjson","text":"This file lists all the development tools required for the project. Each tool is defined with its name, version, installation details, and uninstallation details. Example: { \"Version\": \"1.2.0\", \"NbuildAppList\": [ { \"Name\": \"7-zip\", \"Version\": \"23.01\", \"AppFileName\": \"$(InstallPath)\\\\7z.exe\", \"WebDownloadFile\": \"https://www.7-zip.org/a/7z2301-x64.exe\", \"DownloadedFile\": \"7zip.exe\", \"InstallCommand\": \"$(DownloadedFile)\", \"InstallArgs\": \"/S /D=\\\"$(ProgramFiles)\\\\7-Zip\\\"\", \"InstallPath\": \"$(ProgramFiles)\\\\7-Zip\", \"UninstallCommand\": \"$(InstallPath)\\\\Uninstall.exe\", \"UninstallArgs\": \"/S\" } ] } Key Elements in apps.json: Element Name Description Name The name of the tool. Version The version of the tool. AppFileName The file name of the tool, used to check if it is already installed. WebDownloadFile The URL to download the tool. DownloadedFile The name of the downloaded file, used for installation. InstallCommand The command to install the tool. InstallArgs The arguments for the installation command. InstallPath The location where the tool will be installed. UninstallCommand The command to uninstall the tool. UninstallArgs The arguments for the uninstallation command. StoredHash (Optional) SHA256 hash of the file for verification. AddToPath (Optional) Whether to add the tool's path to the system PATH environment variable.","title":"2. apps.json"},{"location":"setup/#3-dev-setupps1","text":"This PowerShell script automates the installation of tools and sets up the development environment. Key Responsibilities: Installs ntools using ntools.json. Installs other tools listed in apps.json. Verifies administrative privileges before proceeding. Example: # Import the install module $url = \"https://raw.githubusercontent.com/naz-hage/ntools/main/dev-setup/install.psm1\" $output = \"./install.psm1\" Invoke-WebRequest -Uri $url -OutFile $output Import-Module ./install.psm1 -Force # Install Ntools MainInstallApp -command install -json .\\ntools.json if ($LASTEXITCODE -ne 0) { Write-OutputMessage \"Error: Installation of ntools failed. Exiting script.\" exit 1 } # Install other tools & $global:NbExePath install -json .\\apps.json if ($LASTEXITCODE -ne 0) { Write-OutputMessage \"Error: Installation of other tools failed. Exiting script.\" exit 1 } Write-OutputMessage \"Completed installation script.\"","title":"3. dev-setup.ps1"},{"location":"setup/#folder-structure","text":"Your project folder should look like this: %MainDirectory%\\ \u251c\u2500\u2500 MyProject\\ \u2502 \u251c\u2500\u2500 dev-setup\\ \u2502 \u2502 \u251c\u2500\u2500 ntools.json \u2502 \u2502 \u251c\u2500\u2500 apps.json \u2502 \u2502 \u251c\u2500\u2500 dev-setup.ps1 \u2502 \u251c\u2500\u2500 ... other project and test files \u2502 \u2514\u2500\u2500 nbuild.targets (this file is required in the solution folder)","title":"Folder Structure"},{"location":"setup/#adding-a-new-development-tool","text":"To add a new tool to your project: 1. Identify the tool's: - Download URL and file name. - Installation and uninstallation commands and arguments. - Installation path. - File name for version checks. - Version and name. 2. Add the tool's details to apps.json. Example for a new tool: { \"Name\": \"Docker\", \"Version\": \"4.38.0.0\", \"AppFileName\": \"$(InstallPath)\\\\Docker Desktop.exe\", \"WebDownloadFile\": \"https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe\", \"DownloadedFile\": \"Docker Desktop Installer.exe\", \"InstallCommand\": \"$(DownloadedFile)\", \"InstallArgs\": \"install --quiet\", \"InstallPath\": \"$(ProgramFiles)\\\\Docker\\\\Docker\", \"UninstallCommand\": \"powershell.exe\", \"UninstallArgs\": \"-Command \\\"Remove-Item -Path '$(InstallPath)' -Recurse -Force\\\"\", \"AddToPath\": true }","title":"Adding a New Development Tool"},{"location":"usage/","text":"Once Ntools is installed, Open a Developer Command prompt for Visual Studio 2022 and navigate to your solution folder (i.e. c:\\source\\ntools ). The nb.exe is the main executable for the Ntools. The following are some examples of how to use the Ntools: Build a solution: Compiles the solution in the solution directory nb.exe solution Clean a solution: Deletes the release/Debug, bin and obj folders in the solution directory nb.exe clean Test solution: runs all the tests in the solution with optional code coverage nb.exe test Create a stage release: Creates a stage build which includes the following steps: Clean the solution Build the solution Run tests with code coverage Generate coverage reports Publish the stage build Verify artifacts with smoke tests Create a zip file of the stage build file nb.exe stage Comprehensive smoke test: Validates published artifacts and build system integrity nb.exe smoke_test Display available targets: Lists all the available targets in the targets file nb.exe targets See the complete list of available targets at Nbuild Targets Learn more about code coverage at Code Coverage","title":"Practice"},{"location":"version-automation-guide/","text":"Version Automation Guide This document outlines the automation solutions implemented to keep the docs/ntools/ntools.md file synchronized with version information from JSON configuration files in the dev-setup/ directory. The ntools project maintains tool version information in two places: 1. JSON Configuration Files ( dev-setup/*.json ) - Used for automated installation 2. Documentation Table ( docs/ntools/ntools.md ) - User-facing version reference Previously, these had to be updated manually, leading to inconsistencies and outdated documentation. Solutions Implemented 1. PowerShell Module Integration (v2.3.0+) Module : scripts/module-package/ntools-scripts.psm1 Function : Update-DocVersions and Get-VersionFromJson Purpose : Consolidated version management within the ntools-scripts module Integration : Available in all build processes and CI/CD pipelines Using the Module Approach # Import the module Import-Module \"./scripts/module-package/ntools-scripts.psm1\" -Force # Update documentation with latest versions Update-DocVersions -JsonDirectory \"./dev-setup\" -MarkdownFile \"./docs/ntools/ntools.md\" # Get version from specific JSON file $version = Get-VersionFromJson -JsonFilePath \"./dev-setup/ntools.json\" Tool versions in documentation are updated using the MSBuild task ( UpdateVersionsInDocs ) via the nb update_doc_versions command. This extracts all tool/version pairs from every NbuildAppList entry in every *.json file in dev-setup and updates the documentation table accordingly. See the documentation in ntools.md for details. NBuild Task Integration File : NbuildTasks/UpdateVersionsInDocs.cs Purpose : MSBuild task for build-time automation Execution : Integrated into your existing NBuild workflow Features Native C# MSBuild task implementation JSON parsing using System.Text.Json Regex-based markdown table updating Comprehensive tool name mapping logic Build-time logging and error handling Can be part of CI/CD pipeline Usage <Target Name=\"UpdateDocVersions\"> <UpdateVersionsInDocs DevSetupPath=\"$(MSBuildProjectDirectory)\\dev-setup\" DocsPath=\"$(MSBuildProjectDirectory)\\docs\\ntools\\ntools.md\" /> </Target>","title":"Version Automation Guide"},{"location":"version-automation-guide/#version-automation-guide","text":"This document outlines the automation solutions implemented to keep the docs/ntools/ntools.md file synchronized with version information from JSON configuration files in the dev-setup/ directory. The ntools project maintains tool version information in two places: 1. JSON Configuration Files ( dev-setup/*.json ) - Used for automated installation 2. Documentation Table ( docs/ntools/ntools.md ) - User-facing version reference Previously, these had to be updated manually, leading to inconsistencies and outdated documentation.","title":"Version Automation Guide"},{"location":"version-automation-guide/#solutions-implemented","text":"","title":"Solutions Implemented"},{"location":"version-automation-guide/#1-powershell-module-integration-v230","text":"Module : scripts/module-package/ntools-scripts.psm1 Function : Update-DocVersions and Get-VersionFromJson Purpose : Consolidated version management within the ntools-scripts module Integration : Available in all build processes and CI/CD pipelines","title":"1. PowerShell Module Integration (v2.3.0+)"},{"location":"version-automation-guide/#using-the-module-approach","text":"# Import the module Import-Module \"./scripts/module-package/ntools-scripts.psm1\" -Force # Update documentation with latest versions Update-DocVersions -JsonDirectory \"./dev-setup\" -MarkdownFile \"./docs/ntools/ntools.md\" # Get version from specific JSON file $version = Get-VersionFromJson -JsonFilePath \"./dev-setup/ntools.json\" Tool versions in documentation are updated using the MSBuild task ( UpdateVersionsInDocs ) via the nb update_doc_versions command. This extracts all tool/version pairs from every NbuildAppList entry in every *.json file in dev-setup and updates the documentation table accordingly. See the documentation in ntools.md for details.","title":"Using the Module Approach"},{"location":"version-automation-guide/#nbuild-task-integration","text":"File : NbuildTasks/UpdateVersionsInDocs.cs Purpose : MSBuild task for build-time automation Execution : Integrated into your existing NBuild workflow","title":"NBuild Task Integration"},{"location":"version-automation-guide/#features","text":"Native C# MSBuild task implementation JSON parsing using System.Text.Json Regex-based markdown table updating Comprehensive tool name mapping logic Build-time logging and error handling Can be part of CI/CD pipeline","title":"Features"},{"location":"version-automation-guide/#usage","text":"<Target Name=\"UpdateDocVersions\"> <UpdateVersionsInDocs DevSetupPath=\"$(MSBuildProjectDirectory)\\dev-setup\" DocsPath=\"$(MSBuildProjectDirectory)\\docs\\ntools\\ntools.md\" /> </Target>","title":"Usage"},{"location":"versioning/","text":"Version and Tag Throughout this document, the terms \"version\" and \"tag\" are used interchangeably. The version applies to binaries, product, or repo tagging. The rules for ntools versioning are as follows: The version is a string in the format of X.Y.Z , where X , Y , and Z are integers. The version is incremented as follows: X is the major number: Incremented for breaking changes. Y is the minor number: Incremented for new features or bug fixes. Incremented when production Build Type is deployed. Incrementing Y resets Z to 0. Z is the build number: Incremented when staging Build Type is deployed. Tags in the GitHubRelease are used to: Identify specific versions of the repository. Associate release assets with a particular version. Generate release notes based on commits since the last tag.","title":"Versioning"},{"location":"versioning/#version-and-tag","text":"Throughout this document, the terms \"version\" and \"tag\" are used interchangeably. The version applies to binaries, product, or repo tagging. The rules for ntools versioning are as follows: The version is a string in the format of X.Y.Z , where X , Y , and Z are integers. The version is incremented as follows: X is the major number: Incremented for breaking changes. Y is the minor number: Incremented for new features or bug fixes. Incremented when production Build Type is deployed. Incrementing Y resets Z to 0. Z is the build number: Incremented when staging Build Type is deployed. Tags in the GitHubRelease are used to: Identify specific versions of the repository. Associate release assets with a particular version. Generate release notes based on commits since the last tag.","title":"Version and Tag"},{"location":"ntools/code-coverage/","text":"Code Coverage in NTools The NTools build system includes comprehensive code coverage support that can be easily configured and integrated into your build pipeline. Overview Code coverage is automatically collected when running the TEST target if the EnableCodeCoverage property is set to true (which is the default). The system uses XPlat Code Coverage collection and ReportGenerator for creating detailed HTML and text reports. Configuration Basic Configuration The following properties control code coverage behavior: Property Default Value Description EnableCodeCoverage true Controls whether code coverage is collected during test runs CoverageAssemblyFilters +*;-*Tests*;-*Test* Filters for assemblies to include/exclude from coverage CoverageClassFilters +*;-*.Tests.*;-*.Test.* Filters for classes to include/exclude from coverage Customizing Coverage Filters You can customize coverage filters by setting properties in your project file: <PropertyGroup> <EnableCodeCoverage>true</EnableCodeCoverage> <CoverageAssemblyFilters>+MyProject*;-*Tests*;-*Mock*</CoverageAssemblyFilters> <CoverageClassFilters>+*;-*.Tests.*;-*.Mocks.*</CoverageClassFilters> </PropertyGroup> Filter Syntax Coverage filters use the following syntax: - + includes the pattern - - excludes the pattern - * is a wildcard - Filters are separated by semicolons ( ; ) MSBuild Targets COVERAGE Target The COVERAGE target generates comprehensive code coverage reports: nb COVERAGE This target: 1. Installs ReportGenerator tool if not present 2. Processes coverage files from test results 3. Generates HTML reports in CoverageReport folder 4. Creates text summaries for CI/CD integration 5. Copies coverage files for GitHub Actions COVERAGE_SUMMARY Target For a quick coverage overview: nb COVERAGE_SUMMARY This displays high-level coverage metrics without generating full reports. TEST Target with Coverage The TEST target automatically includes coverage collection when EnableCodeCoverage is true: nb TEST This runs all tests and collects coverage data in a single step. Output Files After running coverage targets, you'll find: HTML Reports CoverageReport/index.html - Main coverage report CoverageReport/ - Detailed HTML coverage reports Text Reports Console output with coverage summary Coverage files copied to artifacts for CI/CD Coverage Data Raw coverage files in test results directory Processed coverage data for further analysis CI/CD Integration GitHub Actions Coverage reports are automatically copied to appropriate locations for GitHub Actions integration. The COVERAGE target handles this automatically. Disabling Coverage To disable coverage collection (e.g., for faster builds): <PropertyGroup> <EnableCodeCoverage>false</EnableCodeCoverage> </PropertyGroup> Or via command line: nb TEST -p:EnableCodeCoverage=false Examples Basic Usage # Run tests with coverage nb TEST # Generate coverage reports nb COVERAGE # Quick coverage summary nb COVERAGE_SUMMARY Custom Configuration <PropertyGroup> <EnableCodeCoverage>true</EnableCodeCoverage> <CoverageAssemblyFilters>+MyProject*;+MyLibrary*;-*Tests*</CoverageAssemblyFilters> <CoverageClassFilters>+*;-*.Tests.*;-*TestHelpers*</CoverageClassFilters> </PropertyGroup> Full Build Pipeline # Complete build with tests and coverage nb STAGE","title":"Code Coverage"},{"location":"ntools/code-coverage/#code-coverage-in-ntools","text":"The NTools build system includes comprehensive code coverage support that can be easily configured and integrated into your build pipeline.","title":"Code Coverage in NTools"},{"location":"ntools/code-coverage/#overview","text":"Code coverage is automatically collected when running the TEST target if the EnableCodeCoverage property is set to true (which is the default). The system uses XPlat Code Coverage collection and ReportGenerator for creating detailed HTML and text reports.","title":"Overview"},{"location":"ntools/code-coverage/#configuration","text":"","title":"Configuration"},{"location":"ntools/code-coverage/#basic-configuration","text":"The following properties control code coverage behavior: Property Default Value Description EnableCodeCoverage true Controls whether code coverage is collected during test runs CoverageAssemblyFilters +*;-*Tests*;-*Test* Filters for assemblies to include/exclude from coverage CoverageClassFilters +*;-*.Tests.*;-*.Test.* Filters for classes to include/exclude from coverage","title":"Basic Configuration"},{"location":"ntools/code-coverage/#customizing-coverage-filters","text":"You can customize coverage filters by setting properties in your project file: <PropertyGroup> <EnableCodeCoverage>true</EnableCodeCoverage> <CoverageAssemblyFilters>+MyProject*;-*Tests*;-*Mock*</CoverageAssemblyFilters> <CoverageClassFilters>+*;-*.Tests.*;-*.Mocks.*</CoverageClassFilters> </PropertyGroup>","title":"Customizing Coverage Filters"},{"location":"ntools/code-coverage/#filter-syntax","text":"Coverage filters use the following syntax: - + includes the pattern - - excludes the pattern - * is a wildcard - Filters are separated by semicolons ( ; )","title":"Filter Syntax"},{"location":"ntools/code-coverage/#msbuild-targets","text":"","title":"MSBuild Targets"},{"location":"ntools/code-coverage/#coverage-target","text":"The COVERAGE target generates comprehensive code coverage reports: nb COVERAGE This target: 1. Installs ReportGenerator tool if not present 2. Processes coverage files from test results 3. Generates HTML reports in CoverageReport folder 4. Creates text summaries for CI/CD integration 5. Copies coverage files for GitHub Actions","title":"COVERAGE Target"},{"location":"ntools/code-coverage/#coverage_summary-target","text":"For a quick coverage overview: nb COVERAGE_SUMMARY This displays high-level coverage metrics without generating full reports.","title":"COVERAGE_SUMMARY Target"},{"location":"ntools/code-coverage/#test-target-with-coverage","text":"The TEST target automatically includes coverage collection when EnableCodeCoverage is true: nb TEST This runs all tests and collects coverage data in a single step.","title":"TEST Target with Coverage"},{"location":"ntools/code-coverage/#output-files","text":"After running coverage targets, you'll find:","title":"Output Files"},{"location":"ntools/code-coverage/#html-reports","text":"CoverageReport/index.html - Main coverage report CoverageReport/ - Detailed HTML coverage reports","title":"HTML Reports"},{"location":"ntools/code-coverage/#text-reports","text":"Console output with coverage summary Coverage files copied to artifacts for CI/CD","title":"Text Reports"},{"location":"ntools/code-coverage/#coverage-data","text":"Raw coverage files in test results directory Processed coverage data for further analysis","title":"Coverage Data"},{"location":"ntools/code-coverage/#cicd-integration","text":"","title":"CI/CD Integration"},{"location":"ntools/code-coverage/#github-actions","text":"Coverage reports are automatically copied to appropriate locations for GitHub Actions integration. The COVERAGE target handles this automatically.","title":"GitHub Actions"},{"location":"ntools/code-coverage/#disabling-coverage","text":"To disable coverage collection (e.g., for faster builds): <PropertyGroup> <EnableCodeCoverage>false</EnableCodeCoverage> </PropertyGroup> Or via command line: nb TEST -p:EnableCodeCoverage=false","title":"Disabling Coverage"},{"location":"ntools/code-coverage/#examples","text":"","title":"Examples"},{"location":"ntools/code-coverage/#basic-usage","text":"# Run tests with coverage nb TEST # Generate coverage reports nb COVERAGE # Quick coverage summary nb COVERAGE_SUMMARY","title":"Basic Usage"},{"location":"ntools/code-coverage/#custom-configuration","text":"<PropertyGroup> <EnableCodeCoverage>true</EnableCodeCoverage> <CoverageAssemblyFilters>+MyProject*;+MyLibrary*;-*Tests*</CoverageAssemblyFilters> <CoverageClassFilters>+*;-*.Tests.*;-*TestHelpers*</CoverageClassFilters> </PropertyGroup>","title":"Custom Configuration"},{"location":"ntools/code-coverage/#full-build-pipeline","text":"# Complete build with tests and coverage nb STAGE","title":"Full Build Pipeline"},{"location":"ntools/github-release/","text":"nb.exe is also designed to help you create and manage GitHub releases. It also enables you to download release assets, such as files named in the format x.y.z.zip. The tool expects downloaded assets to be in a zip file named ${tag}.zip, where tag must be a valid tag in the repository created by the tool (e.g., x.y.z ). checkout the versioning section for more details. Requirements Repository Requirements The repository must have: A GitHub token to create releases. A GitHub owner to create releases. A Git branch to create releases. At least one Git tag prior to creating releases. Environment Requirements The GitHub API token (Required) and repository owner (Optional) are obtained from environment variables: OWNER : The GitHub repository owner's username. The owner is optional and can be specified in the command line with -repo option. Checkout usage below. API_GITHUB_KEY : The GitHub API token (personal access token). Local development with Windows Platforms: For additional security, the GitHub API token should be saved in the Windows Credential Manager with: Target Name: GitHubRelease Credential Name: API_GITHUB_KEY GitHub Actions Workflow Example Here is an example of how to set up the required environment variables in a GitHub Actions workflow file: - name: Build using ntools run: | & \"$env:ProgramFilesPath/nbuild/nb.exe\" ${{ env.Build_Type }} -v ${{ env.Enable_Logging }} shell: pwsh working-directory: ${{ github.workspace }} env: OWNER: ${{ github.repository_owner }} API_GITHUB_KEY: ${{ secrets.API_GITHUB_KEY }} The above action builds, test, and creates a release using the GitHubRelease tool and upload to GitHub. Branch Checkout Example Before running the tool, you must checkout a branch. Here is an example of how to checkout a branch in a GitHub Actions workflow file: - name: Checkout Repository uses: actions/checkout@v4 with: token: ${{ secrets.API_GITHUB_KEY }} fetch-depth: 0 ref: ${{ github.event.pull_request.head.ref }} repository: ${{ github.event.pull_request.head.repo.full_name }} Release Process Stage Release When nb stage runs successfully: The tool creates a stage release tagged with the next stage release number. The release notes include the commits since the last stage or production tag. The API token from the repository secrets is used to create this release. The release package is uploaded to the release. Production Release When nb prod runs successfully: The tool creates a production release tagged with the next production release number. The release notes include the commits since the last production tag. All previous stage releases are deleted. The API token from the repository secrets is used to create this release. The release package is uploaded to the release. Create a GitHub Token Follow the GitHub documentation to create a GitHub token. Required Permissions The access token must have the following permissions: Permission Type Scope Description Repository Contents: Read/Write Access repository contents. Metadata: Read-only Access repository metadata. Actions: Read/Write Manage GitHub Actions (if needed). Packages: Read/Write Manage GitHub Packages (if needed). Workflow Workflows: Read/Write Manage workflows (if needed). Release Releases: Read/Write Manage GitHub releases. GitHubRelease Command Line Options Usage See nb.exe for the command line options. Manifests and private GitHub release assets nb download and nb install can consume JSON manifests that reference GitHub release assets (for example WebDownloadFile entries that point at https://github.com/OWNER/REPO/releases/download/TAG/asset.zip ). For private repositories, unauthenticated requests to the public releases/download URL will return 404. nb will attempt an authenticated fallback using the GitHub API when a token is available. How authentication is provided - Preferred: set API_GITHUB_KEY in the environment or in your CI secrets. nb and the GitHubRelease library will read the token from the environment or the Windows Credential Manager. - Example (PowerShell): $env:API_GITHUB_KEY = 'ghp_XXXX' .\\Release\\nb.exe install --json private-repo.json --verbose Behavior - On download failure (404) for a GitHub release URL, nb will parse the owner/repo/tag and call into GitHubRelease.ReleaseService.DownloadAssetByName(tag, assetName, dest) which uses the GitHub API to find the asset and download it using the authenticated asset endpoint. This approach supports private repositories when the token has appropriate scopes (typically repo and releases ). Notes and troubleshooting - Ensure the token has repo / releases scopes for private repositories. - For enterprise GitHub installations with custom hosts, the GitHubRelease helpers must be configured to use the appropriate API base URL.","title":"Github Release"},{"location":"ntools/github-release/#requirements","text":"","title":"Requirements"},{"location":"ntools/github-release/#repository-requirements","text":"The repository must have: A GitHub token to create releases. A GitHub owner to create releases. A Git branch to create releases. At least one Git tag prior to creating releases.","title":"Repository Requirements"},{"location":"ntools/github-release/#environment-requirements","text":"The GitHub API token (Required) and repository owner (Optional) are obtained from environment variables: OWNER : The GitHub repository owner's username. The owner is optional and can be specified in the command line with -repo option. Checkout usage below. API_GITHUB_KEY : The GitHub API token (personal access token). Local development with Windows Platforms: For additional security, the GitHub API token should be saved in the Windows Credential Manager with: Target Name: GitHubRelease Credential Name: API_GITHUB_KEY","title":"Environment Requirements"},{"location":"ntools/github-release/#github-actions-workflow-example","text":"Here is an example of how to set up the required environment variables in a GitHub Actions workflow file: - name: Build using ntools run: | & \"$env:ProgramFilesPath/nbuild/nb.exe\" ${{ env.Build_Type }} -v ${{ env.Enable_Logging }} shell: pwsh working-directory: ${{ github.workspace }} env: OWNER: ${{ github.repository_owner }} API_GITHUB_KEY: ${{ secrets.API_GITHUB_KEY }} The above action builds, test, and creates a release using the GitHubRelease tool and upload to GitHub.","title":"GitHub Actions Workflow Example"},{"location":"ntools/github-release/#branch-checkout-example","text":"Before running the tool, you must checkout a branch. Here is an example of how to checkout a branch in a GitHub Actions workflow file: - name: Checkout Repository uses: actions/checkout@v4 with: token: ${{ secrets.API_GITHUB_KEY }} fetch-depth: 0 ref: ${{ github.event.pull_request.head.ref }} repository: ${{ github.event.pull_request.head.repo.full_name }}","title":"Branch Checkout Example"},{"location":"ntools/github-release/#release-process","text":"","title":"Release Process"},{"location":"ntools/github-release/#stage-release","text":"When nb stage runs successfully: The tool creates a stage release tagged with the next stage release number. The release notes include the commits since the last stage or production tag. The API token from the repository secrets is used to create this release. The release package is uploaded to the release.","title":"Stage Release"},{"location":"ntools/github-release/#production-release","text":"When nb prod runs successfully: The tool creates a production release tagged with the next production release number. The release notes include the commits since the last production tag. All previous stage releases are deleted. The API token from the repository secrets is used to create this release. The release package is uploaded to the release.","title":"Production Release"},{"location":"ntools/github-release/#create-a-github-token","text":"Follow the GitHub documentation to create a GitHub token.","title":"Create a GitHub Token"},{"location":"ntools/github-release/#required-permissions","text":"The access token must have the following permissions: Permission Type Scope Description Repository Contents: Read/Write Access repository contents. Metadata: Read-only Access repository metadata. Actions: Read/Write Manage GitHub Actions (if needed). Packages: Read/Write Manage GitHub Packages (if needed). Workflow Workflows: Read/Write Manage workflows (if needed). Release Releases: Read/Write Manage GitHub releases.","title":"Required Permissions"},{"location":"ntools/github-release/#githubrelease-command-line-options","text":"","title":"GitHubRelease Command Line Options"},{"location":"ntools/github-release/#usage","text":"See nb.exe for the command line options.","title":"Usage"},{"location":"ntools/github-release/#manifests-and-private-github-release-assets","text":"nb download and nb install can consume JSON manifests that reference GitHub release assets (for example WebDownloadFile entries that point at https://github.com/OWNER/REPO/releases/download/TAG/asset.zip ). For private repositories, unauthenticated requests to the public releases/download URL will return 404. nb will attempt an authenticated fallback using the GitHub API when a token is available. How authentication is provided - Preferred: set API_GITHUB_KEY in the environment or in your CI secrets. nb and the GitHubRelease library will read the token from the environment or the Windows Credential Manager. - Example (PowerShell): $env:API_GITHUB_KEY = 'ghp_XXXX' .\\Release\\nb.exe install --json private-repo.json --verbose Behavior - On download failure (404) for a GitHub release URL, nb will parse the owner/repo/tag and call into GitHubRelease.ReleaseService.DownloadAssetByName(tag, assetName, dest) which uses the GitHub API to find the asset and download it using the authenticated asset endpoint. This approach supports private repositories when the token has appropriate scopes (typically repo and releases ). Notes and troubleshooting - Ensure the token has repo / releases scopes for private repositories. - For enterprise GitHub installations with custom hosts, the GitHubRelease helpers must be configured to use the appropriate API base URL.","title":"Manifests and private GitHub release assets"},{"location":"ntools/lf/","text":"lf: File and Folder Listing Utility lf is a command-line tool for listing files and folders in a directory tree, with flexible filtering options. It is built using System.CommandLine and is part of the ntools suite. Features List files by extension, recursively. List folders containing specified names, recursively. Simple, fast, and scriptable. Commands 1. files Lists files with specified extensions in a directory (recursively). Options: - -d , --directoryPath Directory path to search in (default: current directory) - -e , --extensions Comma-separated file extensions (default: .yml,.yaml ) Example: lf files -d C:\\Projects -e .cs,.md This command will list all .cs and .md files in the C:\\Projects directory and its subdirectories. 2. folders Lists folders containing specified names in a directory (recursively). Options: - -d , --directoryPath Directory path to search in (default: current directory) - -n , --name Comma-separated list of folder names to search for Example: lf folders -d C:\\Projects -n bin,obj This command will list all folders named bin and obj in the C:\\Projects directory and its subdirectories.","title":"lf (lf.exe)"},{"location":"ntools/lf/#lf-file-and-folder-listing-utility","text":"lf is a command-line tool for listing files and folders in a directory tree, with flexible filtering options. It is built using System.CommandLine and is part of the ntools suite.","title":"lf: File and Folder Listing Utility"},{"location":"ntools/lf/#features","text":"List files by extension, recursively. List folders containing specified names, recursively. Simple, fast, and scriptable.","title":"Features"},{"location":"ntools/lf/#commands","text":"","title":"Commands"},{"location":"ntools/lf/#1-files","text":"Lists files with specified extensions in a directory (recursively). Options: - -d , --directoryPath Directory path to search in (default: current directory) - -e , --extensions Comma-separated file extensions (default: .yml,.yaml ) Example: lf files -d C:\\Projects -e .cs,.md This command will list all .cs and .md files in the C:\\Projects directory and its subdirectories.","title":"1. files"},{"location":"ntools/lf/#2-folders","text":"Lists folders containing specified names in a directory (recursively). Options: - -d , --directoryPath Directory path to search in (default: current directory) - -n , --name Comma-separated list of folder names to search for Example: lf folders -d C:\\Projects -n bin,obj This command will list all folders named bin and obj in the C:\\Projects directory and its subdirectories.","title":"2. folders"},{"location":"ntools/nbackup/","text":"Nbackup ( nbackup.exe ) is a tool that leverages robocopy to backup a list of files and folders from a source to a destination. It is designed to be reliable and efficient, ensuring that your data is safe. Usage Nbackup.exe [-i value] [-e value] [-v value] [-performbackup value] - i : input json file which specifies source, destination and backup options. (string, default=) - e : Extract input json example file to current directory. (string, default=) - v : Verbose level (true or false, default=False) - performbackup : Set to false to verify json file without backup (true or false, default=True) A sample json file is provided below: { \"BackupsList\": [ { \"Source\": \".\", \"Destination\": \"%APPDATA%\\\\ntools\", \"ExcludeFolders\": [ \".git\", \".vs\" ], \"ExcludeFiles\": [ \"*.exe\", \"*.dll\", \"*.pdb\" ], \"LogFile\": \"%APPDATA%\\\\backup.log\", \"BackupOptions\": \"/V /R:5 /W:5 /MT:16 /dcopy:DAT /copy:DT\" } ] }","title":"Nbackup (nbackup.exe)"},{"location":"ntools/nbackup/#usage","text":"Nbackup.exe [-i value] [-e value] [-v value] [-performbackup value] - i : input json file which specifies source, destination and backup options. (string, default=) - e : Extract input json example file to current directory. (string, default=) - v : Verbose level (true or false, default=False) - performbackup : Set to false to verify json file without backup (true or false, default=True) A sample json file is provided below: { \"BackupsList\": [ { \"Source\": \".\", \"Destination\": \"%APPDATA%\\\\ntools\", \"ExcludeFolders\": [ \".git\", \".vs\" ], \"ExcludeFiles\": [ \"*.exe\", \"*.dll\", \"*.pdb\" ], \"LogFile\": \"%APPDATA%\\\\backup.log\", \"BackupOptions\": \"/V /R:5 /W:5 /MT:16 /dcopy:DAT /copy:DT\" } ] }","title":"Usage"},{"location":"ntools/nbuild-targets/","text":"The table below lists all available targets for the Nbuild tool. C:\\source\\ntools\\nbuild.targets Targets Target Name Description ARTIFACTS Setup the ARTIFACTS folders for binaries and test results - override FILE_VERSIONS Test for FileVersion task and powershell file-version.ps1 NBUILD_DOWNLOAD Download Nbuild specified in the NbuildTargetVersion MKDOCS Build docs locally for testing MKDOCS_DEPLOY mkdocs deploy locally GET_PRODUCT_CODES Example to get the installation Product code used for uninstallation of product CORE Display core properties UPDATE_NTOOLS Update ntools locally for testing NUGET_UPDATE Update the ntools-launcher nuget package in the local feed for testing - not needed for normal builds YELLOW_MESSAGE Example of a target that displays a yellow color message RED_MESSAGE Example of a target that displays a red color message GITHUB_RELEASE Creates a stage or prod release GITHUB_PRE_RELEASE Creates a stage or prod pre-release INSTALL_DOTNET_OUTDATED_TOOL Install dotnet-outdated-tool globally UPDATE_NUGET_PACKAGES Update all NuGet packages to the latest version LIST_NUGET_SOURCES List all NuGet sources UPDATE_DOC_VERSIONS Update documentation versions from JSON configuration files GENERATE_COMMIT_MESSAGE Intelligent commit message generation GIT_COMMIT_INFRASTRUCTURE Automated Git commit with intelligent message generation UPDATE_AND_COMMIT Combined target: Update versions and commit with smart message INFRASTRUCTURE_COMMIT Full infrastructure update and commit with intelligent analysis PREVIEW_COMMIT_MESSAGE Preview commit message without committing C:\\Program Files\\Nbuild\\common.targets Targets Target Name Description PROPERTIES Common properties that will be used by all targets CLEAN Clean up the project and artifacts folder INSTALL_DEP Install dependencies TELEMETRY_OPT_OUT Opt out of the DOTNET_CLI_TELEMETRY_OPTOUT - move to common DEV Create a development package for testing without incrementing the version STAGE Create a stage package for testing PROD Create a PROD package for release GITHUB_RELEASE Creates a stage or prod release GITHUB_PRE_RELEASE Creates a stage or prod pre-release STAGE_DEPLOY Create a STAGE package and deploy for testing PROD_DEPLOY Create a PROD package and deploy for release SOLUTION Build the solution Release configuration using dotnet build SOLUTION_MSBUILD Build the solution Release configuration using MSBuild PACKAGE Create a package for the solution default is a zip file of all artifacts COPY_ARTIFACTS Save the artifacts to the artifacts folder with organized structure DEPLOY Deploy the package. default is to extract artifacts into DeploymentProperty folder TEST Run all tests using dotnet test in Release mode with conditional code coverage TEST_DEBUG Run all tests using dotnet test in Debug mode COVERAGE Generate comprehensive code coverage reports using ReportGenerator COVERAGE_SUMMARY Display high-level code coverage summary SMOKE_TEST Comprehensive smoke test : Validates published artifacts (4+ executables) AND build system integrity (target delegation). Consolidated from TEST_TARGET_DELEGATION SMOKE_TEST_PWSH REMOVED: functionality consolidated into SMOKE_TEST (see changelog) IS_ADMIN Check if current process is running in admin mode AdminCheckExitCode property is set SingleProject Example how to build a single project HandleError Error handling placeholder C:\\Program Files\\nbuild\\apps-versions.targets Targets Target Name Description APP_COMMON Defines the download location for the apps C:\\Program Files\\nbuild\\git.targets Targets Target Name Description GIT_DOWNLOAD Download Git For Windows version specified in GitTargetVersion - Requires admin mode GIT_INSTALL Download Git For Windows version specified in GitTargetVersion property and install GIT_UPDATE Update the current Git for Windows C:\\Program Files\\nbuild\\dotnet.targets Targets Target Name Description DOTNET_SDK_DOWNLOAD Download dotnet Core sdk DOTNET_SDK_INSTALL Download and install dotnet Core sdk DOTNET_DOWNLOAD Download DotNet Core DOTNET_INSTALL Download and install DotNet Core C:\\Program Files\\nbuild\\code.targets Targets Target Name Description CODE_DOWNLOAD Download node version specified in CodeTargetVersion - Requires admin mode CODE_INSTALL Download node version specified in CodeTargetVersion property and install C:\\Program Files\\nbuild\\node.targets Targets Target Name Description NODE_DOWNLOAD Download node version specified in NodeTargetVersion - Requires admin mode NODE_INSTALL Download node version specified in NodeTargetVersion property and install NODE_VERSION Display the installed note version C:\\Program Files\\nbuild\\mongodb.targets Targets Target Name Description MONGODB_INSTALL Display mongodb version specified in TargetNodeVersion property and install C:\\Program Files\\nbuild\\nuget.targets Targets Target Name Description NUGET_VERSION Display the installed nuget version NUGET_INSTALL Download latest nuget.exe and install C:\\Program Files\\nbuild\\ngit.targets Targets Target Name Description GIT_STATUS Display the current git status AUTOTAG_STAGE Increment version for a stage build SET_TAG Set version for a stage build GIT_PULL Get the latest tag from git AUTOTAG_PROD Increment version for a production build TAG Get the tag from git PUSH_TAG Push the tag to the remote repo GIT_BRANCH Get the current git branch C:\\Program Files\\nbuild\\docker.targets Targets Target Name Description DOCKER_DOWNLOAD Download Docker version specified in DockerTargetVersion - Requires admin mode DOCKER_INSTALL Download Docker version specified in DockerTargetVersion property and install C:\\Program Files\\nbuild\\terraform.targets Targets Target Name Description TF_WORKSPACE Create a new terraform workspace dev and select it TF_INIT Init terraform TF_PLAN terraform plan TF_APPLY terraform apply TF_DESTROY terraform destroy","title":"MSBuild Targets"},{"location":"ntools/nbuild/","text":"Usage nbuild.targets common.targets Examples Nbuild ( nb.exe ) Nbuild ( nb.exe ) is a powerful command-line utility for .NET developers. It wraps MSBuild to simplify building solutions, running custom targets, and managing your development toolchain. Key Features: - Build and run custom targets with a single command - Install, uninstall, and list development tools from a manifest file - Download tools and assets for your environment - Integrate with Git for tagging, branching, and release automation - Automate GitHub releases and asset downloads Note: nb.exe expects the nbuild.targets file to be present in your solution folder for build-related commands. Usage Description: Nbuild - Build and DevOps Utility Usage: nb [command] [options] [[--] <additional arguments>...] Options: --version Show version information -?, -h, --help Show help and usage information Commands: install Install tools and applications specified in the manifest file. uninstall Uninstall tools and applications specified in the manifest file. list Display a formatted table of all tools and their versions. Use this command to audit, compare, or document the state of your development environment. download Download tools and applications specified in the manifest file. path Display each segment of your PATH environment variable on a separate line. Similar to 'echo %PATH%'. git_info Displays the current git information for the local repository, including branch, and latest tag. Optional option: --verbose Verbose output Example: nb git_info --verbose git_settag Sets a git tag in the local repository. Required option: --tag The tag to set (e.g., 1.24.33) Optional option: --verbose Verbose output Example: nb git_settag --tag 1.24.33 --verbose auto_tag, git_autotag Automatically sets the next git tag based on build type. Required option: --buildtype Build type (STAGE or PROD) Optional option: --verbose Verbose output Example: nb git_autotag --buildtype STAGE --verbose git_push_autotag Sets the next git tag based on build type and pushes to remote. Required option: --buildtype Build type (STAGE or PROD) Optional option: --verbose Verbose output Example: nb git_push_autotag --buildtype PROD --verbose git_branch Displays the current git branch in the local repository. Optional option: --verbose Verbose output Example: nb git_branch --verbose git_clone Clones a Git repository to a specified path. Required option: --url Git repository URL Optional options: --path Path to clone into (default: current directory) --verbose Verbose output Example: nb git_clone --url https://github.com/user/repo --path ./repo --verbose git_deletetag Deletes a git tag from the local repository. Required option: --tag The tag to delete (e.g., 1.24.33) Optional option: --verbose Verbose output Example: nb git_deletetag --tag 1.24.33 --verbose release_create Creates a GitHub release. Required options: --repo Git repository (formats: repoName, userName/repoName, or full GitHub URL) --tag Tag to use for the release (e.g., 1.24.33) --branch Branch name to release from (e.g., main) --file Asset file name (full path required) Optional option: --verbose Verbose output Examples: nb release_create --repo user/repo --tag 1.24.33 --branch main --file C:\\path\\to\\asset.zip --verbose nb release_create --repo https://github.com/user/repo --tag 1.24.33 --branch main --file ./asset.zip --verbose pre_release_create Creates a GitHub pre-release. Required options: --repo Git repository (formats: repoName, userName/repoName, or full GitHub URL) --tag Tag to use for the pre-release (e.g., 1.24.33) --branch Branch name to release from (e.g., main) --file Asset file name (full path required) Optional option: --verbose Verbose output Example: nb pre_release_create --repo user/repo --tag 1.24.33 --branch main --file C:\\path\\to\\asset.zip --verbose release_download Downloads a specific asset from a GitHub release. Required options: --repo Git repository (formats: repoName, userName/repoName, or full GitHub URL) --tag Tag to use for the release (e.g., 1.24.33) Optional option: --path Path to download asset to (default: current directory) --verbose Verbose output Example: nb release_download --repo user/repo --tag 1.24.33 --path C:\\downloads --verbose list_release Lists the latest 3 releases for the specified repository, and the latest pre-release if newer. Required option: --repo Git repository (formats: repoName, userName/repoName, or full GitHub URL) Optional option: --verbose Verbose output Example: nb list_release --repo user/repo --verbose targets Displays all available build targets for the current solution or project. Optional option: --verbose Verbose output You can run any listed target directly using nb.exe. Example: If 'core' is listed, you can run: nb core To list all targets: nb targets --verbose Additional Arguments: Arguments passed to the application that is being run. Tip: If the --json option is not specified, the default manifest file C:\\Program Files\\NBuild\\ntools.json is used. nbuild.targets See nbuild.targets for more information and checkout other targets in Nbuild/resources . common.targets The common.targets file includes all the defaults targets needed to build, test and deploy a solution. The common.targets file is located in the $(ProgramFiles)\\Nbuild folder. The nbuild.targets file in the solution folder imports the common.targets file Below is a list of common targets defined in the common.targets file: Target Name Description PROPERTIES Common properties that will be used by all targets CLEAN Clean up the project and artifacts folder INSTALL_DEP Install dependencies TELEMETRY_OPT_OUT Opt out of the DOTNET_CLI_TELEMETRY_OPTOUT - move to common STAGE Create a stage package for testing PROD Create a production package for release STAGE_DEPLOY Create a stage package and deploy for testing PROD_DEPLOY Create a production package and deploy for release SOLUTION Build the solution Release configuration using dotnet build SOLUTION_MSBUILD Build the solution Release configuration using MSBuild PACKAGE Create a package for the solution default is a zip file of all artifacts COPY_ARTIFACTS Save the artifacts to the artifacts folder DEPLOY Deploy the package. default is to extract artifacts into DeploymentProperty folder TEST Run all tests using dotnet test in Release mode TEST_DEBUG Run all tests using dotnet test in Debug mode IS_ADMIN Check if current process is running in admin mode AdminCheckExitCode property is set SingleProject Example how to build a single project HandleError Error handling placeholder Examples Below are practical examples for using nb.exe . These examples assume you are running in a PowerShell terminal. 1. Install Applications nb.exe install --json \"C:\\Program Files\\tools.json\" Installs applications specified in the manifest file. (Requires admin privileges.) 2. Uninstall Applications nb.exe uninstall --json \"C:\\Program Files\\example-tool.json\" Uninstalls applications as specified in the manifest file. (Requires admin privileges.) 3. List Installed Applications nb.exe list nb.exe list --json \"C:\\Program Files\\NBuild\\ntools.json\" Lists all applications specified in the provided JSON file. If no --json option is specified, the default file is used. 4. Download Applications nb.exe download --json \"C:\\Program Files\\NBuild\\ntools.json\" Downloads tools and applications specified in the manifest file. 5. Display Path Segments nb.exe path Displays each segment of your PATH environment variable on a separate line. 6. Display Git Information nb.exe git_info Displays the current git branch and latest tag information for the local repository. 7. Set a Specific Git Tag nb.exe git_settag --tag 1.24.33 Sets the specified git tag in the local repository. 8. Automatically Set the Next Git Tag nb.exe git_autotag --buildtype STAGE Automatically sets the next git tag based on the specified build type ( STAGE or PROD ). 9. Push the Next Git Tag to Remote nb.exe git_push_autotag --buildtype PROD Sets the next git tag based on build type and pushes it to the remote repository. 10. Display the Current Git Branch nb.exe git_branch Displays the current git branch in the local repository. 11. Clone a Git Repository nb.exe git_clone --url https://github.com/example/repo --path C:\\Projects --verbose Clones the specified git repository into the specified path. Use --verbose for detailed output. 12. Delete a Specific Tag nb.exe git_deletetag --tag 1.24.33 Deletes the specified git tag from the local repository. 13. Creating a Release nb.exe release_create --repo userName/my-repo --tag 1.24.33 --branch main --file C:\\Releases\\1.0.0.zip Creates a GitHub release for the specified repository, tag, branch, and asset file. 14. Creating a Pre-Release nb.exe pre_release_create --repo userName/my-repo --tag 1.24.33 --branch main --file C:\\Releases\\1.0.0.zip Creates a GitHub pre-release for the specified repository, tag, branch, and asset file. 15. Downloading an Asset nb.exe release_download --repo userName/my-repo --tag 1.24.33 --path C:\\Downloads Downloads an asset from the specified release to the given path. 16. Creating a Release with Full GitHub URL nb.exe release_create --repo https://github.com/userName/my-repo --tag 1.24.33 --branch main --file C:\\Releases\\1.0.0.zip Creates a GitHub release using the full GitHub repository URL. 17. Downloading an Asset with Full GitHub URL nb.exe release_download --repo https://github.com/userName/my-repo --tag 1.24.33 --path C:\\Downloads Downloads an asset using the full GitHub repository URL. 18. List Latest Releases nb.exe list_release --repo https://github.com/userName/my-repo --verbose Lists the latest 3 releases and the newest pre-release (if newer than the latest release). Use --verbose for detailed output. 19. List Build Targets nb.exe targets Lists all available build targets for the current solution or project. 20. Run Any Listed Target nb.exe core Runs the target named core if it is listed by nb targets .","title":"Nbuild (nb.exe)"},{"location":"ntools/nbuild/#nbuild-nbexe","text":"Nbuild ( nb.exe ) is a powerful command-line utility for .NET developers. It wraps MSBuild to simplify building solutions, running custom targets, and managing your development toolchain. Key Features: - Build and run custom targets with a single command - Install, uninstall, and list development tools from a manifest file - Download tools and assets for your environment - Integrate with Git for tagging, branching, and release automation - Automate GitHub releases and asset downloads Note: nb.exe expects the nbuild.targets file to be present in your solution folder for build-related commands.","title":"Nbuild (nb.exe)"},{"location":"ntools/nbuild/#usage","text":"Description: Nbuild - Build and DevOps Utility Usage: nb [command] [options] [[--] <additional arguments>...] Options: --version Show version information -?, -h, --help Show help and usage information Commands: install Install tools and applications specified in the manifest file. uninstall Uninstall tools and applications specified in the manifest file. list Display a formatted table of all tools and their versions. Use this command to audit, compare, or document the state of your development environment. download Download tools and applications specified in the manifest file. path Display each segment of your PATH environment variable on a separate line. Similar to 'echo %PATH%'. git_info Displays the current git information for the local repository, including branch, and latest tag. Optional option: --verbose Verbose output Example: nb git_info --verbose git_settag Sets a git tag in the local repository. Required option: --tag The tag to set (e.g., 1.24.33) Optional option: --verbose Verbose output Example: nb git_settag --tag 1.24.33 --verbose auto_tag, git_autotag Automatically sets the next git tag based on build type. Required option: --buildtype Build type (STAGE or PROD) Optional option: --verbose Verbose output Example: nb git_autotag --buildtype STAGE --verbose git_push_autotag Sets the next git tag based on build type and pushes to remote. Required option: --buildtype Build type (STAGE or PROD) Optional option: --verbose Verbose output Example: nb git_push_autotag --buildtype PROD --verbose git_branch Displays the current git branch in the local repository. Optional option: --verbose Verbose output Example: nb git_branch --verbose git_clone Clones a Git repository to a specified path. Required option: --url Git repository URL Optional options: --path Path to clone into (default: current directory) --verbose Verbose output Example: nb git_clone --url https://github.com/user/repo --path ./repo --verbose git_deletetag Deletes a git tag from the local repository. Required option: --tag The tag to delete (e.g., 1.24.33) Optional option: --verbose Verbose output Example: nb git_deletetag --tag 1.24.33 --verbose release_create Creates a GitHub release. Required options: --repo Git repository (formats: repoName, userName/repoName, or full GitHub URL) --tag Tag to use for the release (e.g., 1.24.33) --branch Branch name to release from (e.g., main) --file Asset file name (full path required) Optional option: --verbose Verbose output Examples: nb release_create --repo user/repo --tag 1.24.33 --branch main --file C:\\path\\to\\asset.zip --verbose nb release_create --repo https://github.com/user/repo --tag 1.24.33 --branch main --file ./asset.zip --verbose pre_release_create Creates a GitHub pre-release. Required options: --repo Git repository (formats: repoName, userName/repoName, or full GitHub URL) --tag Tag to use for the pre-release (e.g., 1.24.33) --branch Branch name to release from (e.g., main) --file Asset file name (full path required) Optional option: --verbose Verbose output Example: nb pre_release_create --repo user/repo --tag 1.24.33 --branch main --file C:\\path\\to\\asset.zip --verbose release_download Downloads a specific asset from a GitHub release. Required options: --repo Git repository (formats: repoName, userName/repoName, or full GitHub URL) --tag Tag to use for the release (e.g., 1.24.33) Optional option: --path Path to download asset to (default: current directory) --verbose Verbose output Example: nb release_download --repo user/repo --tag 1.24.33 --path C:\\downloads --verbose list_release Lists the latest 3 releases for the specified repository, and the latest pre-release if newer. Required option: --repo Git repository (formats: repoName, userName/repoName, or full GitHub URL) Optional option: --verbose Verbose output Example: nb list_release --repo user/repo --verbose targets Displays all available build targets for the current solution or project. Optional option: --verbose Verbose output You can run any listed target directly using nb.exe. Example: If 'core' is listed, you can run: nb core To list all targets: nb targets --verbose Additional Arguments: Arguments passed to the application that is being run. Tip: If the --json option is not specified, the default manifest file C:\\Program Files\\NBuild\\ntools.json is used.","title":"Usage"},{"location":"ntools/nbuild/#nbuildtargets","text":"See nbuild.targets for more information and checkout other targets in Nbuild/resources .","title":"nbuild.targets"},{"location":"ntools/nbuild/#commontargets","text":"The common.targets file includes all the defaults targets needed to build, test and deploy a solution. The common.targets file is located in the $(ProgramFiles)\\Nbuild folder. The nbuild.targets file in the solution folder imports the common.targets file Below is a list of common targets defined in the common.targets file: Target Name Description PROPERTIES Common properties that will be used by all targets CLEAN Clean up the project and artifacts folder INSTALL_DEP Install dependencies TELEMETRY_OPT_OUT Opt out of the DOTNET_CLI_TELEMETRY_OPTOUT - move to common STAGE Create a stage package for testing PROD Create a production package for release STAGE_DEPLOY Create a stage package and deploy for testing PROD_DEPLOY Create a production package and deploy for release SOLUTION Build the solution Release configuration using dotnet build SOLUTION_MSBUILD Build the solution Release configuration using MSBuild PACKAGE Create a package for the solution default is a zip file of all artifacts COPY_ARTIFACTS Save the artifacts to the artifacts folder DEPLOY Deploy the package. default is to extract artifacts into DeploymentProperty folder TEST Run all tests using dotnet test in Release mode TEST_DEBUG Run all tests using dotnet test in Debug mode IS_ADMIN Check if current process is running in admin mode AdminCheckExitCode property is set SingleProject Example how to build a single project HandleError Error handling placeholder","title":"common.targets"},{"location":"ntools/nbuild/#examples","text":"Below are practical examples for using nb.exe . These examples assume you are running in a PowerShell terminal.","title":"Examples"},{"location":"ntools/nbuild/#1-install-applications","text":"nb.exe install --json \"C:\\Program Files\\tools.json\" Installs applications specified in the manifest file. (Requires admin privileges.)","title":"1. Install Applications"},{"location":"ntools/nbuild/#2-uninstall-applications","text":"nb.exe uninstall --json \"C:\\Program Files\\example-tool.json\" Uninstalls applications as specified in the manifest file. (Requires admin privileges.)","title":"2. Uninstall Applications"},{"location":"ntools/nbuild/#3-list-installed-applications","text":"nb.exe list nb.exe list --json \"C:\\Program Files\\NBuild\\ntools.json\" Lists all applications specified in the provided JSON file. If no --json option is specified, the default file is used.","title":"3. List Installed Applications"},{"location":"ntools/nbuild/#4-download-applications","text":"nb.exe download --json \"C:\\Program Files\\NBuild\\ntools.json\" Downloads tools and applications specified in the manifest file.","title":"4. Download Applications"},{"location":"ntools/nbuild/#5-display-path-segments","text":"nb.exe path Displays each segment of your PATH environment variable on a separate line.","title":"5. Display Path Segments"},{"location":"ntools/nbuild/#6-display-git-information","text":"nb.exe git_info Displays the current git branch and latest tag information for the local repository.","title":"6. Display Git Information"},{"location":"ntools/nbuild/#7-set-a-specific-git-tag","text":"nb.exe git_settag --tag 1.24.33 Sets the specified git tag in the local repository.","title":"7. Set a Specific Git Tag"},{"location":"ntools/nbuild/#8-automatically-set-the-next-git-tag","text":"nb.exe git_autotag --buildtype STAGE Automatically sets the next git tag based on the specified build type ( STAGE or PROD ).","title":"8. Automatically Set the Next Git Tag"},{"location":"ntools/nbuild/#9-push-the-next-git-tag-to-remote","text":"nb.exe git_push_autotag --buildtype PROD Sets the next git tag based on build type and pushes it to the remote repository.","title":"9. Push the Next Git Tag to Remote"},{"location":"ntools/nbuild/#10-display-the-current-git-branch","text":"nb.exe git_branch Displays the current git branch in the local repository.","title":"10. Display the Current Git Branch"},{"location":"ntools/nbuild/#11-clone-a-git-repository","text":"nb.exe git_clone --url https://github.com/example/repo --path C:\\Projects --verbose Clones the specified git repository into the specified path. Use --verbose for detailed output.","title":"11. Clone a Git Repository"},{"location":"ntools/nbuild/#12-delete-a-specific-tag","text":"nb.exe git_deletetag --tag 1.24.33 Deletes the specified git tag from the local repository.","title":"12. Delete a Specific Tag"},{"location":"ntools/nbuild/#13-creating-a-release","text":"nb.exe release_create --repo userName/my-repo --tag 1.24.33 --branch main --file C:\\Releases\\1.0.0.zip Creates a GitHub release for the specified repository, tag, branch, and asset file.","title":"13. Creating a Release"},{"location":"ntools/nbuild/#14-creating-a-pre-release","text":"nb.exe pre_release_create --repo userName/my-repo --tag 1.24.33 --branch main --file C:\\Releases\\1.0.0.zip Creates a GitHub pre-release for the specified repository, tag, branch, and asset file.","title":"14. Creating a Pre-Release"},{"location":"ntools/nbuild/#15-downloading-an-asset","text":"nb.exe release_download --repo userName/my-repo --tag 1.24.33 --path C:\\Downloads Downloads an asset from the specified release to the given path.","title":"15. Downloading an Asset"},{"location":"ntools/nbuild/#16-creating-a-release-with-full-github-url","text":"nb.exe release_create --repo https://github.com/userName/my-repo --tag 1.24.33 --branch main --file C:\\Releases\\1.0.0.zip Creates a GitHub release using the full GitHub repository URL.","title":"16. Creating a Release with Full GitHub URL"},{"location":"ntools/nbuild/#17-downloading-an-asset-with-full-github-url","text":"nb.exe release_download --repo https://github.com/userName/my-repo --tag 1.24.33 --path C:\\Downloads Downloads an asset using the full GitHub repository URL.","title":"17. Downloading an Asset with Full GitHub URL"},{"location":"ntools/nbuild/#18-list-latest-releases","text":"nb.exe list_release --repo https://github.com/userName/my-repo --verbose Lists the latest 3 releases and the newest pre-release (if newer than the latest release). Use --verbose for detailed output.","title":"18. List Latest Releases"},{"location":"ntools/nbuild/#19-list-build-targets","text":"nb.exe targets Lists all available build targets for the current solution or project.","title":"19. List Build Targets"},{"location":"ntools/nbuild/#20-run-any-listed-target","text":"nb.exe core Runs the target named core if it is listed by nb targets .","title":"20. Run Any Listed Target"},{"location":"ntools/nbuildtasks/","text":"NbuildTasks NbuildTasks (nbuildtasks.dll) is a class library that exposes custom MSBuild tasks. It is used by Nbuild to perform various tasks such as web download and tools installation during the build of any project. List of Tasks Task Name Description RedError Displays an error message in red color in the console output. Git Git commands such as get or set the tag from the branch or build type and displays it in the console output. ColorMessage Displays a message in the console output with the specified color. FileVersion Gets the version of the specified file. WebDownload Downloads a file from the specified URL. Unzip Unzips the specified file. Zip Zips the specified file. Pwsh Runs a PowerShell Core script from MSBuild. UpdateVersionsInDocs Updates version numbers in documentation files. Here are examples of custom Tasks that can be used during builds: RedError <!-- This target uses the `RedError` task to display an error message in red color --> <Target Name=\"RED_ERROR\"> <RedError Message=\"This is an error message displayed in Red\" /> </Target> Git <Target Name=\"TAG\"> <-- This target uses the `GetTag` task to display the tag from a branch --> <GetTag Branch=\"$(Branch)\" BuildType=\"$(BuildType)\"> <Output TaskParameter=\"Tag\" PropertyName=\"Tag\" /> </GetTag> <Message Text=\"Tag: $(Tag)\" Importance=\"high\" /> </Target> ColorMessage <!-- This target uses the `ColorMessage` task to display a message with a specified color --> <Target Name=\"COLOR_MESSAGE\"> <ColorMessage Message=\"This is a message displayed in Yellow\" Color=\"Yellow\" /> </Target> FileVersion <!-- This target uses the `FileVersion` task to file version of specified file --> <Target Name=\"FILE_VERSION\"> <PropertyGroup> <FileExe>$(ProgramFiles)\\Nbuild\\nb.exe</FileExe> </PropertyGroup> <FileVersion Name=\"$(FileExe)\" Condition=\"Exists('$(FileExe)')\" > <Output TaskParameter=\"Output\" PropertyName=\"Version\" /> </FileVersion> </Target> WebDownload <!-- This target uses the `WebDownload` task to download a file from a specified URL --> <Target Name=\"WEB_DOWNLOAD\" DependsOnTargets=\"IS_ADMIN\" > <PropertyGroup> <!-- visit https://nodejs.org/dist/ to get the latest stable version --> <DownloadsDirectory>c:\\NtoolsDownloads</DownloadsDirectory> <NodeAppName>Node.js</NodeAppName> <NodeTargetVersion>21.5.0</NodeTargetVersion> <WebUri>https://nodejs.org/dist/v$(NodeTargetVersion)/node-v$(NodeTargetVersion)-x64.msi</WebUri> <FileName>$(DownloadsDirectory)\\node-v$(NodeTargetVersion)-x64.msi</FileName> </PropertyGroup> <RedError Condition=\"'$(IsAdmin)' == false\" Message=\"Must be an admin to install $(NodeAppName)\" /> <Delete Files=\"$(FileName)\" Condition=\"Exists('$(FileName)') == true\" /> <WebDownload WebUri=\"$(WebUri)\" FileName=\"$(FileName)\" /> <Message Text=\"==> NODE_DONE\"/> </Target> Unzip <!-- This target uses the `Unzip` task to decompress a specified file --> <Target Name=\"UNZIP\"> <PropertyGroup> <FileName>c:\\temp\\source.zip</FileName> <Path>c:\\temp\\test1</Path> </PropertyGroup> <Unzip FileName=\"$(FileName)\" Destination=\"$(Path)\" /> <Message Text=\"==> ZIP_DONE\"/> </Target> Zip <!-- This target uses the `Zip` task to compress a specified file --> <Target Name=\"ZIP\"> <PropertyGroup> <FileName>c:\\temp\\source.zip</FileName> <Path>c:\\temp\\test</Path> </PropertyGroup> <Zip FileName=\"$(FileName)\" Path=\"$(Path)\" /> <Message Text=\"==> ZIP_DONE\"/> </Target> Pwsh <!-- This target uses the `Pwsh` task to run a PowerShell Core script from MSBuild --> <Target Name=\"RUN_PWSH\"> <PropertyGroup> <ScriptPath>$(SolutionDir)scripts\\build\\custom-script.ps1</ScriptPath> <ScriptArgs>--example true</ScriptArgs> </PropertyGroup> <!-- Pwsh is a custom MSBuild task that executes a PowerShell Core script --> <Pwsh Script=\"$(ScriptPath)\" Arguments=\"$(ScriptArgs)\" NoProfile=\"true\" ExecutionPolicy=\"Bypass\" /> <Message Text=\"==> PWSH_DONE\" /> </Target> UpdateVersionsInDocs <!-- This target uses the `UpdateVersionsInDocs` task to update version numbers in documentation files --> <Target Name=\"UPDATE_DOC_VERSIONS\"> <UpdateVersionsInDocs DocsPath=\"$(SolutionDir)docs\" Version=\"$(Version)\" /> </Target> Modern Approach with ntools-scripts module <!-- Modern: Using ntools-scripts module for better integration and reliability --> <Target Name=\"INSTALL_NTOOLS_SCRIPTS\"> <Exec Command='pwsh -NoProfile -NonInteractive -ExecutionPolicy Bypass -File \"$(SolutionDir)\\scripts\\module-package\\install-module.ps1\" -BuildTools \"$(BuildTools)\" -ModuleName \"ntools-scripts\"' WorkingDirectory=\"$(SolutionDir)\" /> </Target> <Target Name=\"PUBLISH\"> <Exec Command='pwsh -NoProfile -ExecutionPolicy Bypass -Command \"Import-Module &apos;$(BuildTools)\\modules\\ntools-scripts\\ntools-scripts.psm1&apos; -Force; Publish-AllProjects -OutputDir &apos;$(ArtifactsFolder)&apos; -Version &apos;$(ProductVersion)&apos; -RepositoryRoot &apos;$(SolutionDir)&apos;\"' WorkingDirectory=\"$(SolutionDir)\" /> </Target> Benefits of the Module Approach: - Deterministic paths : Explicit RepositoryRoot parameter eliminates path detection issues - Centralized functionality : All PowerShell functions in one module - Better error handling : Consistent error reporting and logging - Easier maintenance : Single module file instead of dozens of scripts - Integration ready : Automatically installed and available in build process For complete module documentation, see ntools-scripts Module . You can also find the complete list of predefined MSBuild properties in the Microsoft documentation . Here are few examples: $(MSBuildProjectFile) : The file name of the project file. $(MSBuildProjectName) : The file name of the project file without the extension. $(MSBuildProjectExtension) : The extension of the project file. $(MSBuildProjectFullPath) : The absolute path of the project file. $(MSBuildThisFileDirectory) : The directory of the MSBuild file that is currently being processed.","title":"Nbuild Tasks"},{"location":"ntools/nbuildtasks/#nbuildtasks","text":"NbuildTasks (nbuildtasks.dll) is a class library that exposes custom MSBuild tasks. It is used by Nbuild to perform various tasks such as web download and tools installation during the build of any project.","title":"NbuildTasks"},{"location":"ntools/nbuildtasks/#list-of-tasks","text":"Task Name Description RedError Displays an error message in red color in the console output. Git Git commands such as get or set the tag from the branch or build type and displays it in the console output. ColorMessage Displays a message in the console output with the specified color. FileVersion Gets the version of the specified file. WebDownload Downloads a file from the specified URL. Unzip Unzips the specified file. Zip Zips the specified file. Pwsh Runs a PowerShell Core script from MSBuild. UpdateVersionsInDocs Updates version numbers in documentation files. Here are examples of custom Tasks that can be used during builds:","title":"List of Tasks"},{"location":"ntools/nbuildtasks/#rederror","text":"<!-- This target uses the `RedError` task to display an error message in red color --> <Target Name=\"RED_ERROR\"> <RedError Message=\"This is an error message displayed in Red\" /> </Target>","title":"RedError"},{"location":"ntools/nbuildtasks/#git","text":"<Target Name=\"TAG\"> <-- This target uses the `GetTag` task to display the tag from a branch --> <GetTag Branch=\"$(Branch)\" BuildType=\"$(BuildType)\"> <Output TaskParameter=\"Tag\" PropertyName=\"Tag\" /> </GetTag> <Message Text=\"Tag: $(Tag)\" Importance=\"high\" /> </Target>","title":"Git"},{"location":"ntools/nbuildtasks/#colormessage","text":"<!-- This target uses the `ColorMessage` task to display a message with a specified color --> <Target Name=\"COLOR_MESSAGE\"> <ColorMessage Message=\"This is a message displayed in Yellow\" Color=\"Yellow\" /> </Target>","title":"ColorMessage"},{"location":"ntools/nbuildtasks/#fileversion","text":"<!-- This target uses the `FileVersion` task to file version of specified file --> <Target Name=\"FILE_VERSION\"> <PropertyGroup> <FileExe>$(ProgramFiles)\\Nbuild\\nb.exe</FileExe> </PropertyGroup> <FileVersion Name=\"$(FileExe)\" Condition=\"Exists('$(FileExe)')\" > <Output TaskParameter=\"Output\" PropertyName=\"Version\" /> </FileVersion> </Target>","title":"FileVersion"},{"location":"ntools/nbuildtasks/#webdownload","text":"<!-- This target uses the `WebDownload` task to download a file from a specified URL --> <Target Name=\"WEB_DOWNLOAD\" DependsOnTargets=\"IS_ADMIN\" > <PropertyGroup> <!-- visit https://nodejs.org/dist/ to get the latest stable version --> <DownloadsDirectory>c:\\NtoolsDownloads</DownloadsDirectory> <NodeAppName>Node.js</NodeAppName> <NodeTargetVersion>21.5.0</NodeTargetVersion> <WebUri>https://nodejs.org/dist/v$(NodeTargetVersion)/node-v$(NodeTargetVersion)-x64.msi</WebUri> <FileName>$(DownloadsDirectory)\\node-v$(NodeTargetVersion)-x64.msi</FileName> </PropertyGroup> <RedError Condition=\"'$(IsAdmin)' == false\" Message=\"Must be an admin to install $(NodeAppName)\" /> <Delete Files=\"$(FileName)\" Condition=\"Exists('$(FileName)') == true\" /> <WebDownload WebUri=\"$(WebUri)\" FileName=\"$(FileName)\" /> <Message Text=\"==> NODE_DONE\"/> </Target>","title":"WebDownload"},{"location":"ntools/nbuildtasks/#unzip","text":"<!-- This target uses the `Unzip` task to decompress a specified file --> <Target Name=\"UNZIP\"> <PropertyGroup> <FileName>c:\\temp\\source.zip</FileName> <Path>c:\\temp\\test1</Path> </PropertyGroup> <Unzip FileName=\"$(FileName)\" Destination=\"$(Path)\" /> <Message Text=\"==> ZIP_DONE\"/> </Target>","title":"Unzip"},{"location":"ntools/nbuildtasks/#zip","text":"<!-- This target uses the `Zip` task to compress a specified file --> <Target Name=\"ZIP\"> <PropertyGroup> <FileName>c:\\temp\\source.zip</FileName> <Path>c:\\temp\\test</Path> </PropertyGroup> <Zip FileName=\"$(FileName)\" Path=\"$(Path)\" /> <Message Text=\"==> ZIP_DONE\"/> </Target>","title":"Zip"},{"location":"ntools/nbuildtasks/#pwsh","text":"<!-- This target uses the `Pwsh` task to run a PowerShell Core script from MSBuild --> <Target Name=\"RUN_PWSH\"> <PropertyGroup> <ScriptPath>$(SolutionDir)scripts\\build\\custom-script.ps1</ScriptPath> <ScriptArgs>--example true</ScriptArgs> </PropertyGroup> <!-- Pwsh is a custom MSBuild task that executes a PowerShell Core script --> <Pwsh Script=\"$(ScriptPath)\" Arguments=\"$(ScriptArgs)\" NoProfile=\"true\" ExecutionPolicy=\"Bypass\" /> <Message Text=\"==> PWSH_DONE\" /> </Target>","title":"Pwsh"},{"location":"ntools/nbuildtasks/#updateversionsindocs","text":"<!-- This target uses the `UpdateVersionsInDocs` task to update version numbers in documentation files --> <Target Name=\"UPDATE_DOC_VERSIONS\"> <UpdateVersionsInDocs DocsPath=\"$(SolutionDir)docs\" Version=\"$(Version)\" /> </Target>","title":"UpdateVersionsInDocs"},{"location":"ntools/nbuildtasks/#modern-approach-with-ntools-scripts-module","text":"<!-- Modern: Using ntools-scripts module for better integration and reliability --> <Target Name=\"INSTALL_NTOOLS_SCRIPTS\"> <Exec Command='pwsh -NoProfile -NonInteractive -ExecutionPolicy Bypass -File \"$(SolutionDir)\\scripts\\module-package\\install-module.ps1\" -BuildTools \"$(BuildTools)\" -ModuleName \"ntools-scripts\"' WorkingDirectory=\"$(SolutionDir)\" /> </Target> <Target Name=\"PUBLISH\"> <Exec Command='pwsh -NoProfile -ExecutionPolicy Bypass -Command \"Import-Module &apos;$(BuildTools)\\modules\\ntools-scripts\\ntools-scripts.psm1&apos; -Force; Publish-AllProjects -OutputDir &apos;$(ArtifactsFolder)&apos; -Version &apos;$(ProductVersion)&apos; -RepositoryRoot &apos;$(SolutionDir)&apos;\"' WorkingDirectory=\"$(SolutionDir)\" /> </Target> Benefits of the Module Approach: - Deterministic paths : Explicit RepositoryRoot parameter eliminates path detection issues - Centralized functionality : All PowerShell functions in one module - Better error handling : Consistent error reporting and logging - Easier maintenance : Single module file instead of dozens of scripts - Integration ready : Automatically installed and available in build process For complete module documentation, see ntools-scripts Module . You can also find the complete list of predefined MSBuild properties in the Microsoft documentation . Here are few examples: $(MSBuildProjectFile) : The file name of the project file. $(MSBuildProjectName) : The file name of the project file without the extension. $(MSBuildProjectExtension) : The extension of the project file. $(MSBuildProjectFullPath) : The absolute path of the project file. $(MSBuildThisFileDirectory) : The directory of the MSBuild file that is currently being processed.","title":"Modern Approach with ntools-scripts module"},{"location":"ntools/ntools-scripts-module-api/","text":"ntools-scripts Module API This page lists the exported functions from the ntools-scripts PowerShell module in a compact table (Function | Description & common usage). Use this as the canonical reference and link to it from other docs. Function Description & common usage Get-ntoolsScriptsVersion Returns the module version. Usage: Get-ntoolsScriptsVersion Publish-AllProjects Build and publish non-test projects to an output directory. Usage: Publish-AllProjects -OutputDir C:\\Artifacts -Version 1.0.0 -RepositoryRoot C:\\MyRepo Get-VersionFromJson Read version fields from a JSON file (ntools.json style). Usage: Get-VersionFromJson -Path ./dev-setup/ntools.json Update-DocVersions Update a markdown table of versions in a file. Usage: Update-DocVersions -File docs/versions.md -Version 1.2.3 Write-TestResult Write a standardized test result line. Usage: Write-TestResult -Name 'smoke' -Passed $true Test-TargetExists Check whether an MSBuild target exists in a project/targets file. Usage: Test-TargetExists -ProjectFile foo.targets -TargetName Publish Test-TargetDependencies Validate MSBuild target dependencies. Usage: Test-TargetDependencies -ProjectFile foo.targets -TargetName Publish Test-TargetDelegation Verify MSBuild target delegation patterns used by nb . Usage: Test-TargetDelegation -SolutionDir . Get-FileHash256 Compute SHA256 hash of a file. Usage: Get-FileHash256 -Path C:\\Artifacts\\nb.exe Get-FileVersionInfo Read file version metadata (file version/product version). Usage: Get-FileVersionInfo -Path C:\\Artifacts\\nb.exe Invoke-FastForward Fast-forward a git ref to a specified commit/branch. Usage: Invoke-FastForward -Repo . -Remote origin -Branch main Write-OutputMessage Consistent formatted output writer (info/warn/error). Usage: Write-OutputMessage -Level Info -Message 'Starting' Get-NToolsFileVersion Helper to get NTools product version from binaries. Usage: Get-NToolsFileVersion -FilePath C:\\Artifacts\\nb.exe Add-DeploymentPathToEnvironment Add deploy path to PATH for current process/user. Usage: Add-DeploymentPathToEnvironment -Path C:\\My\\deploy\\bin Invoke-NToolsDownload Download NTools release artifacts (zip/nuget). Usage: Invoke-NToolsDownload -Version 1.2.3 -OutputDir C:\\Downloads Install-NTools Install NTools packages based on an ntools.json config. Usage: Install-NTools -NtoolsJsonPath ./dev-setup/ntools.json Invoke-VerifyArtifacts Run artifact validation (hashes, versions). Usage: Invoke-VerifyArtifacts -ArtifactsPath C:\\Artifacts\\MySolution\\Release\\1.2.3 -ProductVersion 1.2.3 Set-DevelopmentEnvironment Set local dev env variables (DevDrive/MainDir). Usage: Set-DevelopmentEnvironment -DevDrive 'D:' -MainDir 'source' Test-IsAdministrator Returns true if running elevated. Usage: Test-IsAdministrator Test-MicrosoftPowerShellSecurityModuleLoaded Check for Microsoft.PowerShell.Security module availability. Usage: Test-MicrosoftPowerShellSecurityModuleLoaded Test-CertificateStore Validate certificate presence in store. Usage: Test-CertificateStore -Thumbprint <thumbprint> New-SelfSignedCodeCertificate Create a self-signed code-signing certificate (dev). Usage: New-SelfSignedCodeCertificate -Subject 'CN=ntools-dev' -ExportPath ./dev-cert.pfx Export-CertificateToPfx Export a certificate object to PFX file. Usage: Export-CertificateToPfx -Certificate $cert -Password (ConvertTo-SecureString -AsPlainText 'pw' -Force) -Path ./cert.pfx Export-CertificateToCer Export certificate to .cer (DER/PEM). Usage: Export-CertificateToCer -Certificate $cert -Path ./cert.cer Import-CertificateToRoot Import a certificate to the LocalMachine\\Root store. Usage: Import-CertificateToRoot -Path ./cert.cer Import-CertificateToCurrentUser Import a certificate to CurrentUser store. Usage: Import-CertificateToCurrentUser -Path ./cert.pfx -Password (ConvertTo-SecureString -AsPlainText 'pw' -Force) Set-ScriptSignature Sign a script file with a certificate. Usage: Set-ScriptSignature -ScriptPath ./scripts/setup/install.ps1 -CertificateThumbprint <thumbprint> Get-ScriptSignature Get signature information for a script file. Usage: Get-ScriptSignature -ScriptPath ./scripts/setup/install.ps1 Set-CodeSigningTrust Add a certificate to the machine/user trust store for code signing flows. Usage: Set-CodeSigningTrust -Path ./cert.cer -Scope Machine Notes: - For runtime discovery: Import-Module './scripts/module-package/ntools-scripts.psm1' -Force; Get-Command -Module ntools-scripts .","title":"API"},{"location":"ntools/ntools-scripts-module-api/#ntools-scripts-module-api","text":"This page lists the exported functions from the ntools-scripts PowerShell module in a compact table (Function | Description & common usage). Use this as the canonical reference and link to it from other docs. Function Description & common usage Get-ntoolsScriptsVersion Returns the module version. Usage: Get-ntoolsScriptsVersion Publish-AllProjects Build and publish non-test projects to an output directory. Usage: Publish-AllProjects -OutputDir C:\\Artifacts -Version 1.0.0 -RepositoryRoot C:\\MyRepo Get-VersionFromJson Read version fields from a JSON file (ntools.json style). Usage: Get-VersionFromJson -Path ./dev-setup/ntools.json Update-DocVersions Update a markdown table of versions in a file. Usage: Update-DocVersions -File docs/versions.md -Version 1.2.3 Write-TestResult Write a standardized test result line. Usage: Write-TestResult -Name 'smoke' -Passed $true Test-TargetExists Check whether an MSBuild target exists in a project/targets file. Usage: Test-TargetExists -ProjectFile foo.targets -TargetName Publish Test-TargetDependencies Validate MSBuild target dependencies. Usage: Test-TargetDependencies -ProjectFile foo.targets -TargetName Publish Test-TargetDelegation Verify MSBuild target delegation patterns used by nb . Usage: Test-TargetDelegation -SolutionDir . Get-FileHash256 Compute SHA256 hash of a file. Usage: Get-FileHash256 -Path C:\\Artifacts\\nb.exe Get-FileVersionInfo Read file version metadata (file version/product version). Usage: Get-FileVersionInfo -Path C:\\Artifacts\\nb.exe Invoke-FastForward Fast-forward a git ref to a specified commit/branch. Usage: Invoke-FastForward -Repo . -Remote origin -Branch main Write-OutputMessage Consistent formatted output writer (info/warn/error). Usage: Write-OutputMessage -Level Info -Message 'Starting' Get-NToolsFileVersion Helper to get NTools product version from binaries. Usage: Get-NToolsFileVersion -FilePath C:\\Artifacts\\nb.exe Add-DeploymentPathToEnvironment Add deploy path to PATH for current process/user. Usage: Add-DeploymentPathToEnvironment -Path C:\\My\\deploy\\bin Invoke-NToolsDownload Download NTools release artifacts (zip/nuget). Usage: Invoke-NToolsDownload -Version 1.2.3 -OutputDir C:\\Downloads Install-NTools Install NTools packages based on an ntools.json config. Usage: Install-NTools -NtoolsJsonPath ./dev-setup/ntools.json Invoke-VerifyArtifacts Run artifact validation (hashes, versions). Usage: Invoke-VerifyArtifacts -ArtifactsPath C:\\Artifacts\\MySolution\\Release\\1.2.3 -ProductVersion 1.2.3 Set-DevelopmentEnvironment Set local dev env variables (DevDrive/MainDir). Usage: Set-DevelopmentEnvironment -DevDrive 'D:' -MainDir 'source' Test-IsAdministrator Returns true if running elevated. Usage: Test-IsAdministrator Test-MicrosoftPowerShellSecurityModuleLoaded Check for Microsoft.PowerShell.Security module availability. Usage: Test-MicrosoftPowerShellSecurityModuleLoaded Test-CertificateStore Validate certificate presence in store. Usage: Test-CertificateStore -Thumbprint <thumbprint> New-SelfSignedCodeCertificate Create a self-signed code-signing certificate (dev). Usage: New-SelfSignedCodeCertificate -Subject 'CN=ntools-dev' -ExportPath ./dev-cert.pfx Export-CertificateToPfx Export a certificate object to PFX file. Usage: Export-CertificateToPfx -Certificate $cert -Password (ConvertTo-SecureString -AsPlainText 'pw' -Force) -Path ./cert.pfx Export-CertificateToCer Export certificate to .cer (DER/PEM). Usage: Export-CertificateToCer -Certificate $cert -Path ./cert.cer Import-CertificateToRoot Import a certificate to the LocalMachine\\Root store. Usage: Import-CertificateToRoot -Path ./cert.cer Import-CertificateToCurrentUser Import a certificate to CurrentUser store. Usage: Import-CertificateToCurrentUser -Path ./cert.pfx -Password (ConvertTo-SecureString -AsPlainText 'pw' -Force) Set-ScriptSignature Sign a script file with a certificate. Usage: Set-ScriptSignature -ScriptPath ./scripts/setup/install.ps1 -CertificateThumbprint <thumbprint> Get-ScriptSignature Get signature information for a script file. Usage: Get-ScriptSignature -ScriptPath ./scripts/setup/install.ps1 Set-CodeSigningTrust Add a certificate to the machine/user trust store for code signing flows. Usage: Set-CodeSigningTrust -Path ./cert.cer -Scope Machine Notes: - For runtime discovery: Import-Module './scripts/module-package/ntools-scripts.psm1' -Force; Get-Command -Module ntools-scripts .","title":"ntools-scripts Module API"},{"location":"ntools/ntools-scripts-module/","text":"ntools-scripts PowerShell Module This page documents the ntools-scripts PowerShell module and serves as the canonical API reference for the module's exported functions and usage. Location : scripts/module-package/ntools-scripts.psm1 Quick start Follow these minimal steps to start using the module locally or in CI. # Import for local development Import-Module \"./scripts/module-package/ntools-scripts.psm1\" -Force # Check the module version Get-NtoolsScriptsVersion # Install NTools using a local configuration file Install-NTools -NtoolsJsonPath \"./dev-setup/ntools.json\" Table of contents Quick start Overview Import the Module Usage examples Module information Architecture & migration Module development Troubleshooting Canonical API reference Overview Module files: scripts/ ## Available functions (summary) The module exports a broad set of functions covering build, CI/devops, setup/install, testing, utilities, and code-signing helpers. For the complete, authoritative list of exported function names and the exact API surface, see the dedicated API reference: - docs/ntools/ntools-scripts-module-api.md If you need to discover functions at runtime, import the module and run: ```powershell Get-Command -Module ntools-scripts | Sort-Object Name # Test the module Import-Module \"./scripts/module-package/ntools-scripts.psm1\" -Force Test-NToolsScriptsModule Manual Installation # Install module manually for development Install-NToolsScriptsModule -InstallPath \"$env:ProgramFiles\\WindowsPowerShell\\Modules\\ntools-scripts\" -Force Module Information Version : 2.3.0 Location : scripts/module-package/ntools-scripts.psm1 Installation : Automatically installed via MSBuild targets and GitHub Actions Architecture The module consolidates functionality from the previous script structure: After (Consolidated Module) scripts/ \u251c\u2500\u2500 module-package/ \u2502 \u251c\u2500\u2500 ntools-scripts.psm1 # Main module with all functions \u2502 \u251c\u2500\u2500 ntools-scripts.psd1 # Module manifest \u2502 \u2514\u2500\u2500 install-module.ps1 # Installation script \u251c\u2500\u2500 build/ # Legacy scripts (deprecated) \u251c\u2500\u2500 devops/ # Legacy scripts (deprecated) \u251c\u2500\u2500 setup/ # Entry point scripts \u2514\u2500\u2500 test/ # Legacy scripts (deprecated) Available Functions The module exports 36 functions organized by category: Build Functions -- Publish-AllProjects - Build and publish all non-test projects with deterministic repository path -- Invoke-VerifyArtifacts - Comprehensive artifact verification - Get-ProjectFiles - Get project files with filtering - Invoke-ProjectPublish - Publish individual projects DevOps Functions Get-AgentPublicIp - Get public IP for Azure DevOps agents and set pipeline variable Add-WafAllowRule - Add Azure WAF allow rule for an IP Remove-WafCustomRule - Remove Azure WAF custom rule Get-VersionFromJson - Extract version information from JSON files Update-DocVersions - Update version tables in markdown documentation Setup Functions Set-DevelopmentEnvironment - Set up development environment Install-DevelopmentApps - Install development applications Install-NTools - Install NTools from releases (with configurable ntools.json path) Install-NToolsScriptsModule - Install this module Test Functions Invoke-CodeCoverage - Run tests with code coverage Test-MSBuildDelegation - Test MSBuild target delegation ( Note : Now automatically integrated into nb smoke_test target) Test-QuickTargets - Quick target validation Test-NToolsScriptsModule - Test module functionality Write-TestResult - Write formatted test results Test-TargetExists - Check if MSBuild targets exist Test-TargetDependencies - Validate target dependencies Test-TargetDelegation - Test target delegation patterns ( Note : Core function used by nb smoke_test target) Utility Functions Get-FileHash256 - Calculate SHA256 hash of files Get-FileVersionInfo - Get file version information Invoke-FastForward - Git fast-forward operations Write-OutputMessage - Standardized output messaging Get-NToolsFileVersion - Get NTools file version information Add-DeploymentPathToEnvironment - Add paths to PATH environment variable Invoke-NToolsDownload - Download NTools packages Common Functions Write-Info - Write informational messages Write-Success - Write success messages Write-Warning - Write warning messages Write-Error - Write error messages Get-NtoolsScriptsVersion - Get module version information Canonical module API (single source of truth) The complete, authoritative list of exported functions is available in the separate API reference: docs/ntools/ntools-scripts-module-api.md For quick discovery at runtime, import the module and list commands: Import-Module \"./scripts/module-package/ntools-scripts.psm1\" -Force Get-Command -Module ntools-scripts | Select-Object Name Usage Examples For import instructions, see the \"Import the Module\" section near the top of this page. Get Module Information # Get version Get-NtoolsScriptsVersion # List all available functions Get-Command -Module ntools-scripts | Select-Object Name | Format-Table -AutoSize Install NTools with Custom Configuration # Install using specific ntools.json file Install-NTools -NtoolsJsonPath \"./dev-setup/ntools.json\" # Install specific version Install-NTools -Version \"1.29.7\" -DownloadsDirectory \"C:\\MyDownloads\" Publish Projects with Deterministic Path # Publish all projects with explicit repository root Publish-AllProjects -OutputDir \"C:\\Artifacts\" -Version \"1.0.0\" -RepositoryRoot \"C:\\MyRepo\" Run Tests and Coverage # Run code coverage Invoke-CodeCoverage # Test MSBuild delegation (also available via 'nb smoke_test') Test-MSBuildDelegation # Or use the comprehensive smoke test target # nb smoke_test # (from command line - includes both artifact validation AND target delegation) Integration with Build System Installation : nbuild.targets automatically installs the module during INSTALL_NTOOLS_SCRIPTS target Usage : PUBLISH target uses Publish-AllProjects function with deterministic repository path Artifact Verification (MSBuild) The module exposes Invoke-VerifyArtifacts which is also wired into MSBuild via the VERIFY_ARTIFACTS target in nbuild.targets . PowerShell example (local): Import-Module \"./scripts/module-package/ntools-scripts.psm1\" -Force Invoke-VerifyArtifacts -ArtifactsPath \"C:\\Artifacts\\MySolution\\Release\\1.2.3\" -ProductVersion \"1.2.3\" MSBuild / nb CLI example: # Run the MSBuild target from the repo root (nb delegates to MSBuild) nb verify_artifacts /p:ArtifactsFolder=\"C:\\Artifacts\\MySolution\\Release\\1.2.3\" /p:ProductVersion=\"1.2.3\" MSBuild Integration Installation : nbuild.targets automatically installs the module during INSTALL_NTOOLS_SCRIPTS target Usage : PUBLISH target uses Publish-AllProjects function with deterministic repository path Smoke Testing : SMOKE_TEST target uses Test-TargetDelegation function for build system validation Location : Module installed to $env:ProgramFiles\\nbuild\\modules\\ntools-scripts\\ SMOKE_TEST Target Integration The comprehensive SMOKE_TEST target combines artifact validation with PowerShell module functions: # Comprehensive smoke test (recommended) nb smoke_test This target performs: 1. Artifact Validation : Tests 4+ executables (nb.exe, lf.exe, nBackup.exe, wi.exe) 2. Build System Validation : Uses Test-TargetDelegation function to verify MSBuild target relationships 3. Consolidated Results : Single pass/fail result for all validation checks Migration Note : The deprecated TEST_TARGET_DELEGATION target functionality is now integrated into SMOKE_TEST . GitHub Actions Integration - name: Install ntools using ntools-scripts module run: | Import-Module \"./scripts/module-package/ntools-scripts.psm1\" -Force Install-NTools -NtoolsJsonPath \"./dev-setup/ntools.json\" Module Development Adding New Functions Add function to appropriate section in ntools-scripts.psm1 Add function name to Export-ModuleMember line Update FunctionsToExport in ntools-scripts.psd1 Increment module version Update documentation Testing # Test the module Import-Module \"./scripts/module-package/ntools-scripts.psm1\" -Force Test-NToolsScriptsModule Installation # Install module manually for development Install-NToolsScriptsModule -InstallPath \"$env:ProgramFiles\\WindowsPowerShell\\Modules\\ntools-scripts\" -Force Best Practices Always specify -Force when importing to reload changes during development Use explicit parameters like -RepositoryRoot for deterministic behavior Import the module before calling any functions Check module version with Get-NtoolsScriptsVersion for troubleshooting Use the utility functions like Write-Info , Write-Success for consistent output Troubleshooting Module Not Found # Verify module location Test-Path \"./scripts/module-package/ntools-scripts.psm1\" # Check if installed Test-Path \"$env:ProgramFiles\\nbuild\\modules\\ntools-scripts\\ntools-scripts.psm1\" Version Issues # Check module version Get-NtoolsScriptsVersion # Check installed version vs source Import-Module \"./scripts/module-package/ntools-scripts.psm1\" -Force Get-NtoolsScriptsVersion Function Not Available # List all available functions Get-Command -Module ntools-scripts # Check if module is properly imported Get-Module ntools-scripts","title":"Module"},{"location":"ntools/ntools-scripts-module/#ntools-scripts-powershell-module","text":"This page documents the ntools-scripts PowerShell module and serves as the canonical API reference for the module's exported functions and usage. Location : scripts/module-package/ntools-scripts.psm1","title":"ntools-scripts PowerShell Module"},{"location":"ntools/ntools-scripts-module/#quick-start","text":"Follow these minimal steps to start using the module locally or in CI. # Import for local development Import-Module \"./scripts/module-package/ntools-scripts.psm1\" -Force # Check the module version Get-NtoolsScriptsVersion # Install NTools using a local configuration file Install-NTools -NtoolsJsonPath \"./dev-setup/ntools.json\"","title":"Quick start"},{"location":"ntools/ntools-scripts-module/#table-of-contents","text":"Quick start Overview Import the Module Usage examples Module information Architecture & migration Module development Troubleshooting Canonical API reference","title":"Table of contents"},{"location":"ntools/ntools-scripts-module/#overview","text":"Module files: scripts/ ## Available functions (summary) The module exports a broad set of functions covering build, CI/devops, setup/install, testing, utilities, and code-signing helpers. For the complete, authoritative list of exported function names and the exact API surface, see the dedicated API reference: - docs/ntools/ntools-scripts-module-api.md If you need to discover functions at runtime, import the module and run: ```powershell Get-Command -Module ntools-scripts | Sort-Object Name # Test the module Import-Module \"./scripts/module-package/ntools-scripts.psm1\" -Force Test-NToolsScriptsModule","title":"Overview"},{"location":"ntools/ntools-scripts-module/#manual-installation","text":"# Install module manually for development Install-NToolsScriptsModule -InstallPath \"$env:ProgramFiles\\WindowsPowerShell\\Modules\\ntools-scripts\" -Force","title":"Manual Installation"},{"location":"ntools/ntools-scripts-module/#module-information","text":"Version : 2.3.0 Location : scripts/module-package/ntools-scripts.psm1 Installation : Automatically installed via MSBuild targets and GitHub Actions","title":"Module Information"},{"location":"ntools/ntools-scripts-module/#architecture","text":"The module consolidates functionality from the previous script structure:","title":"Architecture"},{"location":"ntools/ntools-scripts-module/#after-consolidated-module","text":"scripts/ \u251c\u2500\u2500 module-package/ \u2502 \u251c\u2500\u2500 ntools-scripts.psm1 # Main module with all functions \u2502 \u251c\u2500\u2500 ntools-scripts.psd1 # Module manifest \u2502 \u2514\u2500\u2500 install-module.ps1 # Installation script \u251c\u2500\u2500 build/ # Legacy scripts (deprecated) \u251c\u2500\u2500 devops/ # Legacy scripts (deprecated) \u251c\u2500\u2500 setup/ # Entry point scripts \u2514\u2500\u2500 test/ # Legacy scripts (deprecated)","title":"After (Consolidated Module)"},{"location":"ntools/ntools-scripts-module/#available-functions","text":"The module exports 36 functions organized by category:","title":"Available Functions"},{"location":"ntools/ntools-scripts-module/#build-functions","text":"-- Publish-AllProjects - Build and publish all non-test projects with deterministic repository path -- Invoke-VerifyArtifacts - Comprehensive artifact verification - Get-ProjectFiles - Get project files with filtering - Invoke-ProjectPublish - Publish individual projects","title":"Build Functions"},{"location":"ntools/ntools-scripts-module/#devops-functions","text":"Get-AgentPublicIp - Get public IP for Azure DevOps agents and set pipeline variable Add-WafAllowRule - Add Azure WAF allow rule for an IP Remove-WafCustomRule - Remove Azure WAF custom rule Get-VersionFromJson - Extract version information from JSON files Update-DocVersions - Update version tables in markdown documentation","title":"DevOps Functions"},{"location":"ntools/ntools-scripts-module/#setup-functions","text":"Set-DevelopmentEnvironment - Set up development environment Install-DevelopmentApps - Install development applications Install-NTools - Install NTools from releases (with configurable ntools.json path) Install-NToolsScriptsModule - Install this module","title":"Setup Functions"},{"location":"ntools/ntools-scripts-module/#test-functions","text":"Invoke-CodeCoverage - Run tests with code coverage Test-MSBuildDelegation - Test MSBuild target delegation ( Note : Now automatically integrated into nb smoke_test target) Test-QuickTargets - Quick target validation Test-NToolsScriptsModule - Test module functionality Write-TestResult - Write formatted test results Test-TargetExists - Check if MSBuild targets exist Test-TargetDependencies - Validate target dependencies Test-TargetDelegation - Test target delegation patterns ( Note : Core function used by nb smoke_test target)","title":"Test Functions"},{"location":"ntools/ntools-scripts-module/#utility-functions","text":"Get-FileHash256 - Calculate SHA256 hash of files Get-FileVersionInfo - Get file version information Invoke-FastForward - Git fast-forward operations Write-OutputMessage - Standardized output messaging Get-NToolsFileVersion - Get NTools file version information Add-DeploymentPathToEnvironment - Add paths to PATH environment variable Invoke-NToolsDownload - Download NTools packages","title":"Utility Functions"},{"location":"ntools/ntools-scripts-module/#common-functions","text":"Write-Info - Write informational messages Write-Success - Write success messages Write-Warning - Write warning messages Write-Error - Write error messages Get-NtoolsScriptsVersion - Get module version information","title":"Common Functions"},{"location":"ntools/ntools-scripts-module/#canonical-module-api-single-source-of-truth","text":"The complete, authoritative list of exported functions is available in the separate API reference: docs/ntools/ntools-scripts-module-api.md For quick discovery at runtime, import the module and list commands: Import-Module \"./scripts/module-package/ntools-scripts.psm1\" -Force Get-Command -Module ntools-scripts | Select-Object Name","title":"Canonical module API (single source of truth)"},{"location":"ntools/ntools-scripts-module/#usage-examples","text":"For import instructions, see the \"Import the Module\" section near the top of this page.","title":"Usage Examples"},{"location":"ntools/ntools-scripts-module/#get-module-information","text":"# Get version Get-NtoolsScriptsVersion # List all available functions Get-Command -Module ntools-scripts | Select-Object Name | Format-Table -AutoSize","title":"Get Module Information"},{"location":"ntools/ntools-scripts-module/#install-ntools-with-custom-configuration","text":"# Install using specific ntools.json file Install-NTools -NtoolsJsonPath \"./dev-setup/ntools.json\" # Install specific version Install-NTools -Version \"1.29.7\" -DownloadsDirectory \"C:\\MyDownloads\"","title":"Install NTools with Custom Configuration"},{"location":"ntools/ntools-scripts-module/#publish-projects-with-deterministic-path","text":"# Publish all projects with explicit repository root Publish-AllProjects -OutputDir \"C:\\Artifacts\" -Version \"1.0.0\" -RepositoryRoot \"C:\\MyRepo\"","title":"Publish Projects with Deterministic Path"},{"location":"ntools/ntools-scripts-module/#run-tests-and-coverage","text":"# Run code coverage Invoke-CodeCoverage # Test MSBuild delegation (also available via 'nb smoke_test') Test-MSBuildDelegation # Or use the comprehensive smoke test target # nb smoke_test # (from command line - includes both artifact validation AND target delegation)","title":"Run Tests and Coverage"},{"location":"ntools/ntools-scripts-module/#integration-with-build-system","text":"Installation : nbuild.targets automatically installs the module during INSTALL_NTOOLS_SCRIPTS target Usage : PUBLISH target uses Publish-AllProjects function with deterministic repository path","title":"Integration with Build System"},{"location":"ntools/ntools-scripts-module/#artifact-verification-msbuild","text":"The module exposes Invoke-VerifyArtifacts which is also wired into MSBuild via the VERIFY_ARTIFACTS target in nbuild.targets . PowerShell example (local): Import-Module \"./scripts/module-package/ntools-scripts.psm1\" -Force Invoke-VerifyArtifacts -ArtifactsPath \"C:\\Artifacts\\MySolution\\Release\\1.2.3\" -ProductVersion \"1.2.3\" MSBuild / nb CLI example: # Run the MSBuild target from the repo root (nb delegates to MSBuild) nb verify_artifacts /p:ArtifactsFolder=\"C:\\Artifacts\\MySolution\\Release\\1.2.3\" /p:ProductVersion=\"1.2.3\"","title":"Artifact Verification (MSBuild)"},{"location":"ntools/ntools-scripts-module/#msbuild-integration","text":"Installation : nbuild.targets automatically installs the module during INSTALL_NTOOLS_SCRIPTS target Usage : PUBLISH target uses Publish-AllProjects function with deterministic repository path Smoke Testing : SMOKE_TEST target uses Test-TargetDelegation function for build system validation Location : Module installed to $env:ProgramFiles\\nbuild\\modules\\ntools-scripts\\","title":"MSBuild Integration"},{"location":"ntools/ntools-scripts-module/#smoke_test-target-integration","text":"The comprehensive SMOKE_TEST target combines artifact validation with PowerShell module functions: # Comprehensive smoke test (recommended) nb smoke_test This target performs: 1. Artifact Validation : Tests 4+ executables (nb.exe, lf.exe, nBackup.exe, wi.exe) 2. Build System Validation : Uses Test-TargetDelegation function to verify MSBuild target relationships 3. Consolidated Results : Single pass/fail result for all validation checks Migration Note : The deprecated TEST_TARGET_DELEGATION target functionality is now integrated into SMOKE_TEST .","title":"SMOKE_TEST Target Integration"},{"location":"ntools/ntools-scripts-module/#github-actions-integration","text":"- name: Install ntools using ntools-scripts module run: | Import-Module \"./scripts/module-package/ntools-scripts.psm1\" -Force Install-NTools -NtoolsJsonPath \"./dev-setup/ntools.json\"","title":"GitHub Actions Integration"},{"location":"ntools/ntools-scripts-module/#module-development","text":"","title":"Module Development"},{"location":"ntools/ntools-scripts-module/#adding-new-functions","text":"Add function to appropriate section in ntools-scripts.psm1 Add function name to Export-ModuleMember line Update FunctionsToExport in ntools-scripts.psd1 Increment module version Update documentation","title":"Adding New Functions"},{"location":"ntools/ntools-scripts-module/#testing","text":"# Test the module Import-Module \"./scripts/module-package/ntools-scripts.psm1\" -Force Test-NToolsScriptsModule","title":"Testing"},{"location":"ntools/ntools-scripts-module/#installation","text":"# Install module manually for development Install-NToolsScriptsModule -InstallPath \"$env:ProgramFiles\\WindowsPowerShell\\Modules\\ntools-scripts\" -Force","title":"Installation"},{"location":"ntools/ntools-scripts-module/#best-practices","text":"Always specify -Force when importing to reload changes during development Use explicit parameters like -RepositoryRoot for deterministic behavior Import the module before calling any functions Check module version with Get-NtoolsScriptsVersion for troubleshooting Use the utility functions like Write-Info , Write-Success for consistent output","title":"Best Practices"},{"location":"ntools/ntools-scripts-module/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"ntools/ntools-scripts-module/#module-not-found","text":"# Verify module location Test-Path \"./scripts/module-package/ntools-scripts.psm1\" # Check if installed Test-Path \"$env:ProgramFiles\\nbuild\\modules\\ntools-scripts\\ntools-scripts.psm1\"","title":"Module Not Found"},{"location":"ntools/ntools-scripts-module/#version-issues","text":"# Check module version Get-NtoolsScriptsVersion # Check installed version vs source Import-Module \"./scripts/module-package/ntools-scripts.psm1\" -Force Get-NtoolsScriptsVersion","title":"Version Issues"},{"location":"ntools/ntools-scripts-module/#function-not-available","text":"# List all available functions Get-Command -Module ntools-scripts # Check if module is properly imported Get-Module ntools-scripts","title":"Function Not Available"},{"location":"ntools/ntools/","text":"Tool version automation Tool versions in this table are automatically updated from the JSON install definitions in the dev-setup folder using the UpdateVersionsInDocs MSBuild task (C#). To update the table, run: nb update_doc_versions This will extract all tool/version pairs from every NbuildAppList entry in every *.json file in dev-setup and update the documentation table accordingly. No PowerShell script is needed or maintained for this process. The Windows dev environment has good information on how to setup a Windows dev environment. The table below list the latest dev tools used in Ntools. Tool Version Last Checked on Argo CD 2.14.11 07-Sep-25 Azure CLI 2.70.0 07-Sep-25 Burp Suite 2021.11.2 01-Oct-23 Dotnet Runtime 9.0.2 07-Sep-25 Dotnet8 SDK 8.0.408 02-May-25 Dotnet9 Runtime 9.0.203 02-May-25 Draw.io N/A 01-Oct-23 Git for Windows 2.50.0 07-Sep-25 Install Docker Desktop on Windows 4.38.0.0 07-Sep-25 kubernetes 1.33.0 07-Sep-25 minikube 1.35.0 07-Sep-25 MongoDB Community Server 8.0.5 07-Sep-25 Node.js 22.12.0 07-Sep-25 Ntools 1.27.0 07-Sep-25 GitHub CLI 2.74.2 07-Sep-25 NuGet 6.12.1 07-Sep-25 pnpm 10.14.0 07-Sep-25 Postman Get Started for Free v11.36.0 10-Mar-25 PowerShell 10.0.0 07-Sep-25 Python 3.13.3 07-Sep-25 SysInternals 2.90.0.0 07-Sep-25 Terraform 0.55.1 07-Sep-25 Terraform Lint 0.55.1 07-Sep-25 Visual Studio 2022 Community Edition 17.11.3 07-Sep-25 Visual Studio Code 1.100.1 07-Sep-25 Windows Terminal 1.21.10351.0 10-Mar-25","title":"Development Tools"},{"location":"ntools/ntools/#tool-version-automation","text":"Tool versions in this table are automatically updated from the JSON install definitions in the dev-setup folder using the UpdateVersionsInDocs MSBuild task (C#). To update the table, run: nb update_doc_versions This will extract all tool/version pairs from every NbuildAppList entry in every *.json file in dev-setup and update the documentation table accordingly. No PowerShell script is needed or maintained for this process. The Windows dev environment has good information on how to setup a Windows dev environment. The table below list the latest dev tools used in Ntools. Tool Version Last Checked on Argo CD 2.14.11 07-Sep-25 Azure CLI 2.70.0 07-Sep-25 Burp Suite 2021.11.2 01-Oct-23 Dotnet Runtime 9.0.2 07-Sep-25 Dotnet8 SDK 8.0.408 02-May-25 Dotnet9 Runtime 9.0.203 02-May-25 Draw.io N/A 01-Oct-23 Git for Windows 2.50.0 07-Sep-25 Install Docker Desktop on Windows 4.38.0.0 07-Sep-25 kubernetes 1.33.0 07-Sep-25 minikube 1.35.0 07-Sep-25 MongoDB Community Server 8.0.5 07-Sep-25 Node.js 22.12.0 07-Sep-25 Ntools 1.27.0 07-Sep-25 GitHub CLI 2.74.2 07-Sep-25 NuGet 6.12.1 07-Sep-25 pnpm 10.14.0 07-Sep-25 Postman Get Started for Free v11.36.0 10-Mar-25 PowerShell 10.0.0 07-Sep-25 Python 3.13.3 07-Sep-25 SysInternals 2.90.0.0 07-Sep-25 Terraform 0.55.1 07-Sep-25 Terraform Lint 0.55.1 07-Sep-25 Visual Studio 2022 Community Edition 17.11.3 07-Sep-25 Visual Studio Code 1.100.1 07-Sep-25 Windows Terminal 1.21.10351.0 10-Mar-25","title":"Tool version automation"},{"location":"ntools/wi/","text":"wi: Azure DevOps Work Item CLI Utility wi is a command-line tool for creating Product Backlog Items (PBIs) and child tasks in Azure DevOps from a services file. It is built using System.CommandLine and is part of the ntools suite. Features Create PBIs for multiple services from a text file Create child tasks automatically with the same title as the PBI Azure DevOps integration via REST API Batch processing for multiple services Environment-based configuration for organization and project settings Prerequisites Environment Variables The following environment variables must be set: PAT (Required): Personal Access Token for Azure DevOps authentication AZURE_DEVOPS_ORGANIZATION (Optional): Azure DevOps organization URL Default: https://dev.azure.com/nazh AZURE_DEVOPS_PROJECT (Optional): Azure DevOps project name Default: Proto Personal Access Token Setup Go to Azure DevOps \u2192 User Settings \u2192 Personal Access Tokens Create a new token with Work Items (Read & Write) permissions Set the PAT environment variable: powershell $env:PAT = \"your-personal-access-token\" Usage Create PBIs for Multiple Services Creates PBIs for each service listed in a file, with automatic child task creation: wi --services services.txt --parentId 12345 Options: - -s , --services (Required): Path to services.txt file containing service names (one per line) - -p , --parentId (Required): Parent work item ID to link the PBIs to Create Child Task for Specific PBI Creates a child task for an existing PBI: wi --services services.txt --parentId 12345 --childTaskOfPbiId 67890 Additional Option: - -c , --childTaskOfPbiId : PBI ID to create a child task for (skips PBI creation) Services File Format The services file should contain one service name per line: Example services.txt : ServiceA ServiceB ServiceC UserManagementService PaymentProcessingService Work Item Creation Details PBI Creation Title Format : {ServiceName}: update pipeline to perform SCA Type : Product Backlog Item Parent : Links to the specified parent work item ID Child Task Creation Title : Same as the parent PBI Type : Task Parent : Links to the created PBI Examples Basic Usage # Set required environment variables $env:PAT = \"your-pat-token\" $env:AZURE_DEVOPS_ORGANIZATION = \"https://dev.azure.com/yourorg\" $env:AZURE_DEVOPS_PROJECT = \"YourProject\" # Create PBIs for all services in the file wi --services my-services.txt --parentId 54321 Create Child Task Only # Create a child task for an existing PBI wi --services services.txt --parentId 54321 --childTaskOfPbiId 98765 Output The tool provides console output showing: - Organization and project being used - Success/failure status for each PBI creation - Created work item IDs Example Output: Organization: https://dev.azure.com/yourorg Project: YourProject Created PBI for ServiceA: ID 12346 Created child task for PBI 12346 Created PBI for ServiceB: ID 12347 Created child task for PBI 12347 Error Handling Common issues and solutions: \"PAT environment variable is not set\" : Set the PAT environment variable with a valid Azure DevOps Personal Access Token \"Failed to read services file\" : Ensure the services file path is correct and accessible \"Failed to create PBI\" : Check PAT permissions and Azure DevOps connectivity Authentication errors : Verify PAT is valid and has Work Items read/write permissions","title":"wi (wi.exe)"},{"location":"ntools/wi/#wi-azure-devops-work-item-cli-utility","text":"wi is a command-line tool for creating Product Backlog Items (PBIs) and child tasks in Azure DevOps from a services file. It is built using System.CommandLine and is part of the ntools suite.","title":"wi: Azure DevOps Work Item CLI Utility"},{"location":"ntools/wi/#features","text":"Create PBIs for multiple services from a text file Create child tasks automatically with the same title as the PBI Azure DevOps integration via REST API Batch processing for multiple services Environment-based configuration for organization and project settings","title":"Features"},{"location":"ntools/wi/#prerequisites","text":"","title":"Prerequisites"},{"location":"ntools/wi/#environment-variables","text":"The following environment variables must be set: PAT (Required): Personal Access Token for Azure DevOps authentication AZURE_DEVOPS_ORGANIZATION (Optional): Azure DevOps organization URL Default: https://dev.azure.com/nazh AZURE_DEVOPS_PROJECT (Optional): Azure DevOps project name Default: Proto","title":"Environment Variables"},{"location":"ntools/wi/#personal-access-token-setup","text":"Go to Azure DevOps \u2192 User Settings \u2192 Personal Access Tokens Create a new token with Work Items (Read & Write) permissions Set the PAT environment variable: powershell $env:PAT = \"your-personal-access-token\"","title":"Personal Access Token Setup"},{"location":"ntools/wi/#usage","text":"","title":"Usage"},{"location":"ntools/wi/#create-pbis-for-multiple-services","text":"Creates PBIs for each service listed in a file, with automatic child task creation: wi --services services.txt --parentId 12345 Options: - -s , --services (Required): Path to services.txt file containing service names (one per line) - -p , --parentId (Required): Parent work item ID to link the PBIs to","title":"Create PBIs for Multiple Services"},{"location":"ntools/wi/#create-child-task-for-specific-pbi","text":"Creates a child task for an existing PBI: wi --services services.txt --parentId 12345 --childTaskOfPbiId 67890 Additional Option: - -c , --childTaskOfPbiId : PBI ID to create a child task for (skips PBI creation)","title":"Create Child Task for Specific PBI"},{"location":"ntools/wi/#services-file-format","text":"The services file should contain one service name per line: Example services.txt : ServiceA ServiceB ServiceC UserManagementService PaymentProcessingService","title":"Services File Format"},{"location":"ntools/wi/#work-item-creation-details","text":"","title":"Work Item Creation Details"},{"location":"ntools/wi/#pbi-creation","text":"Title Format : {ServiceName}: update pipeline to perform SCA Type : Product Backlog Item Parent : Links to the specified parent work item ID","title":"PBI Creation"},{"location":"ntools/wi/#child-task-creation","text":"Title : Same as the parent PBI Type : Task Parent : Links to the created PBI","title":"Child Task Creation"},{"location":"ntools/wi/#examples","text":"","title":"Examples"},{"location":"ntools/wi/#basic-usage","text":"# Set required environment variables $env:PAT = \"your-pat-token\" $env:AZURE_DEVOPS_ORGANIZATION = \"https://dev.azure.com/yourorg\" $env:AZURE_DEVOPS_PROJECT = \"YourProject\" # Create PBIs for all services in the file wi --services my-services.txt --parentId 54321","title":"Basic Usage"},{"location":"ntools/wi/#create-child-task-only","text":"# Create a child task for an existing PBI wi --services services.txt --parentId 54321 --childTaskOfPbiId 98765","title":"Create Child Task Only"},{"location":"ntools/wi/#output","text":"The tool provides console output showing: - Organization and project being used - Success/failure status for each PBI creation - Created work item IDs Example Output: Organization: https://dev.azure.com/yourorg Project: YourProject Created PBI for ServiceA: ID 12346 Created child task for PBI 12346 Created PBI for ServiceB: ID 12347 Created child task for PBI 12347","title":"Output"},{"location":"ntools/wi/#error-handling","text":"Common issues and solutions: \"PAT environment variable is not set\" : Set the PAT environment variable with a valid Azure DevOps Personal Access Token \"Failed to read services file\" : Ensure the services file path is correct and accessible \"Failed to create PBI\" : Check PAT permissions and Azure DevOps connectivity Authentication errors : Verify PAT is valid and has Work Items read/write permissions","title":"Error Handling"}]}
{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Software Tools Collection This repository contains a collection of software tools specifically designed to automate various build and test tasks on Windows clients. Whether you are a developer working on your local machine or using GitHub Actions for continuous integration, these tools will greatly simplify your workflow and enhance your productivity. This release facilitates build, test and deploy of .NET core desktop and web applications. This can be extended to other languages and platforms in the future. With the ntools , you can effortlessly: Set up your development environment quickly and lay the development foundation for all your projects Backup your files and folders Build your projects with ease Perform Git operations seamlessly Leverage powerful MSBuild tasks The installation process is straightforward, and the tools are highly reliable and efficient, ensuring the safety and integrity of your data. Don't settle for mediocre tools when you can have the ntools at your disposal. Try them out today and witness the difference they can make in your development workflow. Enhancements are added Regularly! Delivering a high-quality software product requires the use of the right development tools. It is crucial to have a stable development environment with a reliable method to install and uninstall these tools. The tools should be installed in a standardized location, and it is important to keep track of their versions. Additionally, the installation process should only proceed if the tool is not already installed, and the tool should be uninstalled if it is no longer needed. How to install ntools Practice using ntools How to setup your project Dev Setup Add a new tool Add a new property Add a new target Add a new task Add a new condition Don't hesitate to write an issue if you have any questions or suggestions.","title":"Overview"},{"location":"#software-tools-collection","text":"This repository contains a collection of software tools specifically designed to automate various build and test tasks on Windows clients. Whether you are a developer working on your local machine or using GitHub Actions for continuous integration, these tools will greatly simplify your workflow and enhance your productivity. This release facilitates build, test and deploy of .NET core desktop and web applications. This can be extended to other languages and platforms in the future. With the ntools , you can effortlessly: Set up your development environment quickly and lay the development foundation for all your projects Backup your files and folders Build your projects with ease Perform Git operations seamlessly Leverage powerful MSBuild tasks The installation process is straightforward, and the tools are highly reliable and efficient, ensuring the safety and integrity of your data. Don't settle for mediocre tools when you can have the ntools at your disposal. Try them out today and witness the difference they can make in your development workflow. Enhancements are added Regularly! Delivering a high-quality software product requires the use of the right development tools. It is crucial to have a stable development environment with a reliable method to install and uninstall these tools. The tools should be installed in a standardized location, and it is important to keep track of their versions. Additionally, the installation process should only proceed if the tool is not already installed, and the tool should be uninstalled if it is no longer needed. How to install ntools Practice using ntools How to setup your project Dev Setup Add a new tool Add a new property Add a new target Add a new task Add a new condition Don't hesitate to write an issue if you have any questions or suggestions.","title":"Software Tools Collection"},{"location":"changelog/","text":"Version 1.5.0 - 03-may-24 issue #56 - Feature: Remove the dependency on the $(DevDrive) and $(MainDir) environment variables Version 1.4.0 - 25-apr-24 Complete issue #37 Complete issue #38 Complete issue #34 Complete issue #44 Complete issue #41 Version 1.3.0 - 15-feb-24 Fix issue #29 Add default value for -json option Fix specifiying the process start info for ntools-launcher. if StartInfo.FileName uses executable name only that is in the system path, then the StartInfo.FileName witll be replaced with the full pathName. See FileMapping.cs file Add install.ps1 which is equivalent to install.bat. update to ntools-launcher 1.3.0 Version 1.2.0 - 22-jan-24 Fix issue #27 Update to ntools-launcher 1.2.0 Use $\"{Environment.GetFolderPath(Environment.SpecialFolder.System)}\" for c:\\windows\\system32 When Using ntools-launcher use default Process::StartInfo RedirectStandardOutput = true, RedirectStandardError = true, WindowStyle = ProcessWindowStyle.Hidden, CreateNoWindow = false, UseShellExecute = false, Version 1.2.0 - 22-jan-24 See issue#5 Add NbuildTask to download and install applications from the web..j Add targets to install Git Nodejs VSCode VS2020 Postman Docker Desktop WSL Dotnet Core SDK Dotnet Core Runtime Add -i [list | download | install] and -json option to Nb.exe to download and install applications from the web. Use json input applist.json file to specify the applications to download and install. Version 1.1.0 - 05-jan-24 Move Launcher project to its own public repo ntools-launcher . Publish Launcher 1.1.0 to nuget.org and unlist 1.0.0.5 Target .netstandard2.0 project to supprt MS build tasks. MS Build tasks only support .netstandard2.0. Add Nbuild project to streamline the building process of ntools and other projects, renaming it yo Nb.exe for convenience. Refactor Launcher tests Introduce Nbuild project to streamline the building process of ntools and other projects, renaming it yo Nb.exe for convenience. Add NbuildTasks project that exposes MS build tasks. Introduce Git Wrapper class to streamline git operations including: Git.GetTag Git.SetTag Git.Autotag Git.PushTag Git.DeleteTag Git.GetBranch Introduce Ngit project to provide a simplified and automated interface for git operations, renaming it to Ng.exe for convenience. Depends on DevDrive and MainDir environment variables. Default values are used if they don't exist. DevDrive defaults to C: and MainDir defaults to C:\\source . Use DevDrive and MainDir from environment variables if they exist. Otherwise, use default values. This applies to common.targets and NbuildTasks Refactor Nbackup - remove cli options src, dest, and options and use json input only file instead. Update documentation Reference: issue#23 Next Delete non-prod releases from Artifacts folder Add https://github.com/naz-hage/learn/tree/main/dotnet/cleanup-non-prod project to NbuildTasks.","title":"Changelog"},{"location":"changelog/#version-150-03-may-24","text":"issue #56 - Feature: Remove the dependency on the $(DevDrive) and $(MainDir) environment variables","title":"Version 1.5.0 - 03-may-24"},{"location":"changelog/#version-140-25-apr-24","text":"Complete issue #37 Complete issue #38 Complete issue #34 Complete issue #44 Complete issue #41","title":"Version 1.4.0 - 25-apr-24"},{"location":"changelog/#version-130-15-feb-24","text":"Fix issue #29 Add default value for -json option Fix specifiying the process start info for ntools-launcher. if StartInfo.FileName uses executable name only that is in the system path, then the StartInfo.FileName witll be replaced with the full pathName. See FileMapping.cs file Add install.ps1 which is equivalent to install.bat. update to ntools-launcher 1.3.0","title":"Version 1.3.0 - 15-feb-24"},{"location":"changelog/#version-120-22-jan-24","text":"Fix issue #27 Update to ntools-launcher 1.2.0 Use $\"{Environment.GetFolderPath(Environment.SpecialFolder.System)}\" for c:\\windows\\system32 When Using ntools-launcher use default Process::StartInfo RedirectStandardOutput = true, RedirectStandardError = true, WindowStyle = ProcessWindowStyle.Hidden, CreateNoWindow = false, UseShellExecute = false,","title":"Version 1.2.0 - 22-jan-24"},{"location":"changelog/#version-120-22-jan-24_1","text":"See issue#5 Add NbuildTask to download and install applications from the web..j Add targets to install Git Nodejs VSCode VS2020 Postman Docker Desktop WSL Dotnet Core SDK Dotnet Core Runtime Add -i [list | download | install] and -json option to Nb.exe to download and install applications from the web. Use json input applist.json file to specify the applications to download and install.","title":"Version 1.2.0 - 22-jan-24"},{"location":"changelog/#version-110-05-jan-24","text":"Move Launcher project to its own public repo ntools-launcher . Publish Launcher 1.1.0 to nuget.org and unlist 1.0.0.5 Target .netstandard2.0 project to supprt MS build tasks. MS Build tasks only support .netstandard2.0. Add Nbuild project to streamline the building process of ntools and other projects, renaming it yo Nb.exe for convenience. Refactor Launcher tests Introduce Nbuild project to streamline the building process of ntools and other projects, renaming it yo Nb.exe for convenience. Add NbuildTasks project that exposes MS build tasks. Introduce Git Wrapper class to streamline git operations including: Git.GetTag Git.SetTag Git.Autotag Git.PushTag Git.DeleteTag Git.GetBranch Introduce Ngit project to provide a simplified and automated interface for git operations, renaming it to Ng.exe for convenience. Depends on DevDrive and MainDir environment variables. Default values are used if they don't exist. DevDrive defaults to C: and MainDir defaults to C:\\source . Use DevDrive and MainDir from environment variables if they exist. Otherwise, use default values. This applies to common.targets and NbuildTasks Refactor Nbackup - remove cli options src, dest, and options and use json input only file instead. Update documentation Reference: issue#23","title":"Version 1.1.0 - 05-jan-24"},{"location":"changelog/#next","text":"Delete non-prod releases from Artifacts folder Add https://github.com/naz-hage/learn/tree/main/dotnet/cleanup-non-prod project to NbuildTasks.","title":"Next"},{"location":"installation/","text":"To get started with ntools , you need to install the latest version of 64-bit Git for Windows on your machine, then follow these steps: Open a PowerShell in administrative mode. Assume c:\\source as directory %MainDirectory% which will be used through this document. Clone this repository to your local machine from the %MainDirectory% folder. cd c:\\source git clone https://github.com/naz-hage/ntools Change the PowerShell execution policy to allow the installation script to run. Run the following command: Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope Process This command will allow the installation script to run. Once the installation is complete, the execution policy will revert to its original state. Run the following command to install the ntools: cd c:\\source\\ntools\\DevSetup .\\install.ps1 This command will install the Dotnet Core Desktop runtime and download the ntools from GitHub, installs the ntools package in the %ProgramFiles%\\Nbuild folder, sets up the nTools development environment, adds the %ProgramFiles%\\Nbuild will be added to the system path. After the installation is complete, check out the nbuild.targets for more all the available targets, and navigate to Usage to learn how to execute a build target. ntools is now installed on your machine, and you can start using it to learn how to build and run additional targets . If you have any questions or encounter any issues during the installation process, please don't hesitate to write an an issue . We're here to help!","title":"Installation"},{"location":"setup/","text":"DevSetup DevSetup Folder contains the apps.json file and the DevSetup.ps1 file. The apps.json file contains the list of development tools required for your project. The DevSetup.ps1 file is a PowerShell script that installs the development tools and sets up the development environment for the project. When you create a new project, for example MyProject , clone the project into the %MainDirectory% directory. In your project, create a DevSetup folder and add the apps.json file to it. In the DevSetup folder, create a DevSetup.ps1 file. Your file structure should look like this: %MainDirectory%\\MyProject %MainDirectory%\\MyProject\\DevSetup %MainDirectory%\\MyProject\\DevSetup\\apps.json %MainDirectory%\\MyProject\\DevSetup\\DevSetup.ps1 %MainDirectory%\\MyProject\\... other project and test files Add nbuild.targets file A file called nbuild.targets is required in the solution folder. This file imports the common.targets file located in the $(ProgramFiles)\\Nbuild folder. The ntools repository includes multiple target files, which can be found in the nbuild-targets.md file. Your file structure should look like this: %MainDirectory%\\MyProject %MainDirectory%\\MyProject\\nbuild.targets %MainDirectory%\\MyProject\\DevSetup %MainDirectory%\\MyProject\\DevSetup\\apps.json %MainDirectory%\\MyProject\\DevSetup\\DevSetup.ps1 %MainDirectory%\\MyProject\\... other project test files nbuild.targets nbuild.targets is a MSBuild project file that imports common.targets nbuild.targets must include the SolutionName and DeploymentFolder property . It should also define the ARTIFACTS target. nbuild.targets imports the common.targets file located in the $(ProgramFiles)\\Nbuild folder. The ntools repository includes multiple target files, which can be found in the targets file. nbuild.targets can include any additional properties and targets that are specific to the solution. nbuild.targets file is located in the solution folder. Required Properties The following properties are required in nbuild.targets : SolutionName: The name of the solution file. <PropertyGroup> <!--The GUID should be replaced with the solution name--> <SolutionName>$([System.IO.Path]::GetFileNameWithoutExtension('$(MSBuildProjectDirectory)'))</SolutionName> <DeploymentFolder>$(ProgramFiles)\\Nbuild</DeploymentFolder> </PropertyGroup> Artifacts The following target is required in nbuild.targets : ARTIFACTS: The folder where the artifacts are copied to. <!--Setup the ARTIFACTS folders for binaries and test results - override --> <Target Name=\"ARTIFACTS\" DependsOnTargets=\"TAG\"> <PropertyGroup> <ArtifactsSolutionFolder>$(ArtifactsDir)\\$(SolutionName)</ArtifactsSolutionFolder> <SetupFolder>$(ArtifactsSolutionFolder)\\release</SetupFolder> <ArtifactsFolder>$(ArtifactsSolutionFolder)\\$(TargetRelease)\\$(ProductVersion)</ArtifactsFolder> <ArtifactsTestResultsFolder>$(ArtifactsSolutionFolder)\\TestResults\\$(ProductVersion)</ArtifactsTestResultsFolder> </PropertyGroup> <ItemGroup> <BinaryFiles Exclude=\" $(SolutionDir)\\$(TargetRelease)\\**\\*.pdb; $(SolutionDir)\\$(TargetRelease)\\test.*; $(SolutionDir)\\$(TargetRelease)\\*test*; $(SolutionDir)\\$(TargetRelease)\\Nuget*; $(SolutionDir)\\$(TargetRelease)\\*CodeCoverage*\" Include=\" $(SolutionDir)\\$(TargetRelease)\\*.exe; $(SolutionDir)\\$(TargetRelease)\\*.exe.config; $(SolutionDir)\\$(TargetRelease)\\*.json; $(SolutionDir)\\Nbuild\\resources\\*.targets; $(SolutionDir)\\Nbuild\\resources\\*.ps1; $(SolutionDir)\\Nbuild\\resources\\*.json; $(SolutionDir)\\$(TargetRelease)\\*.dll\" /> <RunTimesNetStandard20 Include = \" $(SolutionDir)\\$(TargetRelease)\\netstandard2.0\\*.*\" Exclude=\" $(SolutionDir)\\$(TargetRelease)\\**\\*.pdb\" /> </ItemGroup> <Message Text=\"==> DONE\"/> </Target> Add a new tool When looking for new development tool for your project, your need the following: Web location to download the tool and the name of the downloaded file. This file will be used to install the tool Command and arguments to install and uninstall the tool Location where the tool will be installed Location of the tool File name. This file name will be used to check if the tool is already installed Version of the tool Name of the tool To add a new tool to your project which can be installed by ntools , you need to define json file. Below is an example of the json file for 7-zip development tool { \"Version\": \"1.2.0\", \"NbuildAppList\": [ { \"Name\": \"7-zip\", \"Version\": \"23.01\", \"AppFileName\": \"$(InstallPath)\\\\7z.exe\", \"WebDownloadFile\": \"https://www.7-zip.org/a/7z2301-x64.exe\", \"DownloadedFile\": \"7zip.exe\", \"InstallCommand\": \"$(DownloadedFile)\", \"InstallArgs\": \"/S /D=\\u0022$(ProgramFiles)\\\\7-Zip\\u0022\", \"InstallPath\": \"$(ProgramFiles)\\\\7-Zip\", \"UninstallCommand\": \"$(InstallPath)\\\\Uninstall.exe\", \"UninstallArgs\": \"/S\" } ] } By convention, the json file is named apps.json and is located in the DevSetup folder of your project Use Nb.exe to install the tool cd DevSetup Nb.exe -c install -json apps.json List of Environment Variables Variable Name Description Name The name of the tool Version The version of the tool AppFileName The file name of the tool. This file name will be used to check if the tool is already installed WebDownloadFile The web location to download the tool DownloadedFile The name of the downloaded file. This file will be used to install the tool InstallCommand The command to install the tool InstallArgs The arguments to install the tool InstallPath The location where the tool will be installed UninstallCommand The command to uninstall the tool UninstallArgs The arguments to uninstall the tool Add a new property In MSBuild, a project file is an XML file that describes a software build process. It includes three important elements: Property, PropertyGroup, and Item. Property : A property in MSBuild is a named value that you can refer to in the project file. Properties are key-value pairs and are defined inside PropertyGroup elements. In the example below, the Configuration property is set to Debug. <PropertyGroup> <Configuration>Debug</Configuration> </PropertyGroup> PropertyGroup : A PropertyGroup is a container for properties. It can contain one or more Property elements. PropertyGroup elements can appear anywhere in the project file, and you can have multiple PropertyGroup elements in a project file. In the example below, the Configuration and Platform properties are set to Debug and AnyCPU, respectively. <PropertyGroup> <Configuration>Debug</Configuration> <Platform>AnyCPU</Platform> </PropertyGroup> Item : An item in MSBuild is a piece of data that has a type and can be a file, a directory, or any other piece of data that you want to operate on. Items are grouped into ItemGroup elements. In the example below, the Program.cs file is included in the project. <ItemGroup> <Compile Include=\"Program.cs\" /> </ItemGroup> For more detailed information, you can refer to the official MSBuild documentation: MSBuild Project File Schema Reference Add a new target A target is a named sequence of tasks that represents something to be built or done. For more information, see Targets . Example of a target: <Target Name=\"MyTarget\"> <Message Text=\"Hello, world!\" /> </Target> Add a new task A task is the smallest unit of work in a build. Tasks are independent executable components with inputs and outputs. You can add tasks to the project file in different sections. For more information, see Tasks . Example of a task: <Target Name=\"MyTarget\"> <Message Text=\"Hello, world!\" /> </Target> See Nbuild Tasks for more information on ntools built-in tasks. Add a new condition Conditions in MSBuild allow you to specify whether a particular task, property, or target should be executed based on certain conditions. You can use conditions to control the flow of your build process and make it more flexible and dynamic. Conditions are expressed as Boolean expressions that evaluate to true or false. If the condition evaluates to true, the associated task, property, or target is executed; otherwise, it is skipped. You can use various operators and functions to create complex conditions. For more information on conditions in MSBuild, you can refer to the Conditions documentation. Example of a condition: <PropertyGroup> <IsAdmin Condition=\"'$(IsAdmin)' == ''\">false</IsAdmin> </PropertyGroup>","title":"Setup your project"},{"location":"setup/#devsetup","text":"DevSetup Folder contains the apps.json file and the DevSetup.ps1 file. The apps.json file contains the list of development tools required for your project. The DevSetup.ps1 file is a PowerShell script that installs the development tools and sets up the development environment for the project. When you create a new project, for example MyProject , clone the project into the %MainDirectory% directory. In your project, create a DevSetup folder and add the apps.json file to it. In the DevSetup folder, create a DevSetup.ps1 file. Your file structure should look like this: %MainDirectory%\\MyProject %MainDirectory%\\MyProject\\DevSetup %MainDirectory%\\MyProject\\DevSetup\\apps.json %MainDirectory%\\MyProject\\DevSetup\\DevSetup.ps1 %MainDirectory%\\MyProject\\... other project and test files","title":"DevSetup"},{"location":"setup/#add-nbuildtargets-file","text":"A file called nbuild.targets is required in the solution folder. This file imports the common.targets file located in the $(ProgramFiles)\\Nbuild folder. The ntools repository includes multiple target files, which can be found in the nbuild-targets.md file. Your file structure should look like this: %MainDirectory%\\MyProject %MainDirectory%\\MyProject\\nbuild.targets %MainDirectory%\\MyProject\\DevSetup %MainDirectory%\\MyProject\\DevSetup\\apps.json %MainDirectory%\\MyProject\\DevSetup\\DevSetup.ps1 %MainDirectory%\\MyProject\\... other project test files","title":"Add nbuild.targets file"},{"location":"setup/#nbuildtargets","text":"nbuild.targets is a MSBuild project file that imports common.targets nbuild.targets must include the SolutionName and DeploymentFolder property . It should also define the ARTIFACTS target. nbuild.targets imports the common.targets file located in the $(ProgramFiles)\\Nbuild folder. The ntools repository includes multiple target files, which can be found in the targets file. nbuild.targets can include any additional properties and targets that are specific to the solution. nbuild.targets file is located in the solution folder.","title":"nbuild.targets"},{"location":"setup/#required-properties","text":"The following properties are required in nbuild.targets : SolutionName: The name of the solution file. <PropertyGroup> <!--The GUID should be replaced with the solution name--> <SolutionName>$([System.IO.Path]::GetFileNameWithoutExtension('$(MSBuildProjectDirectory)'))</SolutionName> <DeploymentFolder>$(ProgramFiles)\\Nbuild</DeploymentFolder> </PropertyGroup>","title":"Required Properties"},{"location":"setup/#artifacts","text":"The following target is required in nbuild.targets : ARTIFACTS: The folder where the artifacts are copied to. <!--Setup the ARTIFACTS folders for binaries and test results - override --> <Target Name=\"ARTIFACTS\" DependsOnTargets=\"TAG\"> <PropertyGroup> <ArtifactsSolutionFolder>$(ArtifactsDir)\\$(SolutionName)</ArtifactsSolutionFolder> <SetupFolder>$(ArtifactsSolutionFolder)\\release</SetupFolder> <ArtifactsFolder>$(ArtifactsSolutionFolder)\\$(TargetRelease)\\$(ProductVersion)</ArtifactsFolder> <ArtifactsTestResultsFolder>$(ArtifactsSolutionFolder)\\TestResults\\$(ProductVersion)</ArtifactsTestResultsFolder> </PropertyGroup> <ItemGroup> <BinaryFiles Exclude=\" $(SolutionDir)\\$(TargetRelease)\\**\\*.pdb; $(SolutionDir)\\$(TargetRelease)\\test.*; $(SolutionDir)\\$(TargetRelease)\\*test*; $(SolutionDir)\\$(TargetRelease)\\Nuget*; $(SolutionDir)\\$(TargetRelease)\\*CodeCoverage*\" Include=\" $(SolutionDir)\\$(TargetRelease)\\*.exe; $(SolutionDir)\\$(TargetRelease)\\*.exe.config; $(SolutionDir)\\$(TargetRelease)\\*.json; $(SolutionDir)\\Nbuild\\resources\\*.targets; $(SolutionDir)\\Nbuild\\resources\\*.ps1; $(SolutionDir)\\Nbuild\\resources\\*.json; $(SolutionDir)\\$(TargetRelease)\\*.dll\" /> <RunTimesNetStandard20 Include = \" $(SolutionDir)\\$(TargetRelease)\\netstandard2.0\\*.*\" Exclude=\" $(SolutionDir)\\$(TargetRelease)\\**\\*.pdb\" /> </ItemGroup> <Message Text=\"==> DONE\"/> </Target>","title":"Artifacts"},{"location":"setup/#add-a-new-tool","text":"When looking for new development tool for your project, your need the following: Web location to download the tool and the name of the downloaded file. This file will be used to install the tool Command and arguments to install and uninstall the tool Location where the tool will be installed Location of the tool File name. This file name will be used to check if the tool is already installed Version of the tool Name of the tool To add a new tool to your project which can be installed by ntools , you need to define json file. Below is an example of the json file for 7-zip development tool { \"Version\": \"1.2.0\", \"NbuildAppList\": [ { \"Name\": \"7-zip\", \"Version\": \"23.01\", \"AppFileName\": \"$(InstallPath)\\\\7z.exe\", \"WebDownloadFile\": \"https://www.7-zip.org/a/7z2301-x64.exe\", \"DownloadedFile\": \"7zip.exe\", \"InstallCommand\": \"$(DownloadedFile)\", \"InstallArgs\": \"/S /D=\\u0022$(ProgramFiles)\\\\7-Zip\\u0022\", \"InstallPath\": \"$(ProgramFiles)\\\\7-Zip\", \"UninstallCommand\": \"$(InstallPath)\\\\Uninstall.exe\", \"UninstallArgs\": \"/S\" } ] } By convention, the json file is named apps.json and is located in the DevSetup folder of your project Use Nb.exe to install the tool cd DevSetup Nb.exe -c install -json apps.json","title":"Add a new tool"},{"location":"setup/#list-of-environment-variables","text":"Variable Name Description Name The name of the tool Version The version of the tool AppFileName The file name of the tool. This file name will be used to check if the tool is already installed WebDownloadFile The web location to download the tool DownloadedFile The name of the downloaded file. This file will be used to install the tool InstallCommand The command to install the tool InstallArgs The arguments to install the tool InstallPath The location where the tool will be installed UninstallCommand The command to uninstall the tool UninstallArgs The arguments to uninstall the tool","title":"List of Environment Variables"},{"location":"setup/#add-a-new-property","text":"In MSBuild, a project file is an XML file that describes a software build process. It includes three important elements: Property, PropertyGroup, and Item. Property : A property in MSBuild is a named value that you can refer to in the project file. Properties are key-value pairs and are defined inside PropertyGroup elements. In the example below, the Configuration property is set to Debug. <PropertyGroup> <Configuration>Debug</Configuration> </PropertyGroup> PropertyGroup : A PropertyGroup is a container for properties. It can contain one or more Property elements. PropertyGroup elements can appear anywhere in the project file, and you can have multiple PropertyGroup elements in a project file. In the example below, the Configuration and Platform properties are set to Debug and AnyCPU, respectively. <PropertyGroup> <Configuration>Debug</Configuration> <Platform>AnyCPU</Platform> </PropertyGroup> Item : An item in MSBuild is a piece of data that has a type and can be a file, a directory, or any other piece of data that you want to operate on. Items are grouped into ItemGroup elements. In the example below, the Program.cs file is included in the project. <ItemGroup> <Compile Include=\"Program.cs\" /> </ItemGroup> For more detailed information, you can refer to the official MSBuild documentation: MSBuild Project File Schema Reference","title":"Add a new property"},{"location":"setup/#add-a-new-target","text":"A target is a named sequence of tasks that represents something to be built or done. For more information, see Targets . Example of a target: <Target Name=\"MyTarget\"> <Message Text=\"Hello, world!\" /> </Target>","title":"Add a new target"},{"location":"setup/#add-a-new-task","text":"A task is the smallest unit of work in a build. Tasks are independent executable components with inputs and outputs. You can add tasks to the project file in different sections. For more information, see Tasks . Example of a task: <Target Name=\"MyTarget\"> <Message Text=\"Hello, world!\" /> </Target> See Nbuild Tasks for more information on ntools built-in tasks.","title":"Add a new task"},{"location":"setup/#add-a-new-condition","text":"Conditions in MSBuild allow you to specify whether a particular task, property, or target should be executed based on certain conditions. You can use conditions to control the flow of your build process and make it more flexible and dynamic. Conditions are expressed as Boolean expressions that evaluate to true or false. If the condition evaluates to true, the associated task, property, or target is executed; otherwise, it is skipped. You can use various operators and functions to create complex conditions. For more information on conditions in MSBuild, you can refer to the Conditions documentation. Example of a condition: <PropertyGroup> <IsAdmin Condition=\"'$(IsAdmin)' == ''\">false</IsAdmin> </PropertyGroup>","title":"Add a new condition"},{"location":"usage/","text":"Once Ntools is installed, Open a Developer Command prompt for Visual Studio 2022 and navigate to your solution folder (i.e. c:\\source\\ntools ). The Nb.exe is the main executable for the Ntools. The following are some examples of how to use the Ntools: Build a solution: Compiles the solution in the solution directory Nb.exe solution Clean a solution: Deletes the release/Debug, bin and obj folders in the solution directory Nb.exe clean Test solution: runs all the tests in the solution Nb.exe test Create a staging release: Creates a staging build which includes the following steps: Clean the solution Build the solution Run tests Create a staging build Publish the staging build Create a zip file of the staging build file Nb.exe staging Display available targets: Lists all the available targets in the targets file Nb.exe -c targets See the list of available targets at Nbuild Targets","title":"Practice"},{"location":"ntools/devsetup/","text":"Content of DevSetup.ps1: This script sets up the development environment for your project, installs ntools and the necessary development tools, and sets the development environment variables. # DevSetup.ps1 $fileName = Split-Path -Leaf $PSCommandPath Write-OutputMessage $fileName \"Started installation script.\" # Download and import the common Install module $url = \"https://raw.githubusercontent.com/naz-hage/ntools/main/install.psm1\" $output = \"./install.psm1\" Invoke-WebRequest -Uri $url -OutFile $output if ($LASTEXITCODE -ne 0) { Write-OutputMessage $fileName \"Error: downloading install.psm1 failed. Exiting script.\" exit 1 } Import-Module ./install.psm1 -Force # Check if the script is running with admin rights if (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] \"Administrator\")) { Write-OutputMessage $fileName \"Error: Please run this script as an administrator.\" exit 1 } else { Write-OutputMessage $fileName \"Admin rights detected\" } # Install Ntools MainInstallApp -command install -json .\\app-Ntools.json if ($LASTEXITCODE -ne 0) { Write-OutputMessage $fileName \"Error: Installation of app-Ntools.json failed. Exiting script.\" exit 1 } # Install development tools for the MyProject project & $global:NbExePath -c install -json .\\apps.json if ($LASTEXITCODE -ne 0) { Write-OutputMessage $fileName \"Error: Installation of ntools failed. Exiting script.\" exit 1 } Write-OutputMessage $fileName \"Completed installation script.\" Write-OutputMessage $fileName \"EmtpyLine\"","title":"Devsetup"},{"location":"ntools/nbackup/","text":"Nbackup ( nbackup.exe ) is a tool that leverages robocopy to backup a list of files and folders from a source to a destination. It is designed to be reliable and efficient, ensuring that your data is safe. Usage Nbackup.exe [-i value] [-e value] [-v value] [-performbackup value] - i : input json file which specifies source, destination and backup options. (string, default=) - e : Extract input json example file to current directory. (string, default=) - v : Verbose level (true or false, default=False) - performbackup : Set to false to verify json file without backup (true or false, default=True) A sample json file is provided below: { \"BackupsList\": [ { \"Source\": \".\", \"Destination\": \"%APPDATA%\\\\ntools\", \"ExcludeFolders\": [ \".git\", \".vs\" ], \"ExcludeFiles\": [ \"*.exe\", \"*.dll\", \"*.pdb\" ], \"LogFile\": \"%APPDATA%\\\\backup.log\", \"BackupOptions\": \"/V /R:5 /W:5 /MT:16 /dcopy:DAT /copy:DT\" } ] }","title":"Nbackup (nbackup.exe)"},{"location":"ntools/nbackup/#usage","text":"Nbackup.exe [-i value] [-e value] [-v value] [-performbackup value] - i : input json file which specifies source, destination and backup options. (string, default=) - e : Extract input json example file to current directory. (string, default=) - v : Verbose level (true or false, default=False) - performbackup : Set to false to verify json file without backup (true or false, default=True) A sample json file is provided below: { \"BackupsList\": [ { \"Source\": \".\", \"Destination\": \"%APPDATA%\\\\ntools\", \"ExcludeFolders\": [ \".git\", \".vs\" ], \"ExcludeFiles\": [ \"*.exe\", \"*.dll\", \"*.pdb\" ], \"LogFile\": \"%APPDATA%\\\\backup.log\", \"BackupOptions\": \"/V /R:5 /W:5 /MT:16 /dcopy:DAT /copy:DT\" } ] }","title":"Usage"},{"location":"ntools/nbuild-targets/","text":"The table below lists all available targets for the Nbuild tool. c:\\source\\ntools\\nbuild.targets Targets Target Name Description ARTIFACTS Setup the ARTIFACTS folders for binaries and test results - override CLEAN_ARTIFACTS Delete the ARTIFACTS folder after PACKAGE target is completed TEST_GIT Temporary Target to test the Git Task LOCAL Build local staging without incrementing the version FILE_VERSIONS Test for FileVersion task and powershell file-version.ps1 NBUILD_DOWNLOAD Download Nbuild specified in the NbuildTargetVersion NBUILD_INSTALL Install Nbuild specified in the NbuildTargetVersion DEV_SETUP Setup Development Environment MKDOCS Build docs locally for testing NBUILD_DOWNLOAD Download Nbuild specified in the NbuildTargetVersion Update the ntools-launcher nuget package in the local feed fot testing - not needed for normal builds NBUILD_INSTALL Install Nbuild specified in the NbuildTargetVersion UPDATE_APPS Update App metadata json files in nbuild\\resources GET_PRODUCT_CODES Example to get the installation Product code used for uninstallation of product C:\\Program Files\\Nbuild\\common.targets Targets Target Name Description PROPERTIES Common properties that will be used by all targets CLEAN Clean up the project and artifacts folder INSTALL_DEP Install dependencies TELEMETRY_OPT_OUT Opt out of the DOTNET_CLI_TELEMETRY_OPTOUT - move to common STAGING Create a staging package for testing PRODUCTION Create a production package for release STAGING_DEPLOY Create a staging package and deploy for testing PRODUCTION_DEPLOY Create a production package and deploy for release SOLUTION Build the solution Release configuration using dotnet build SOLUTION_MSBUILD Build the solution Release configuration using MSBuild PACKAGE Create a package for the solution default is a zip file of all artifacts COPY_ARTIFACTS Save the artifacts to the artifacts folder DEPLOY Deploy the package. default is to extract artifacts into DeploymentProperty folder TEST Run all tests using dotnet test in Release mode TEST_DEBUG Run all tests using dotnet test in Debug mode IS_ADMIN Check if current process is running in admin mode AdminCheckExitCode property is set SingleProject Example how to build a single project HandleError Error handling placeholder C:\\Program Files\\nbuild\\apps-versions.targets Targets Target Name Description APP_COMMON Defines the download location for the apps C:\\Program Files\\nbuild\\git.targets Targets Target Name Description GIT_DOWNLOAD Download Git For Windows version specified in GitTargetVersion - Requires admin mode GIT_INSTALL Download Git For Windows version specified in GitTargetVersion property and install GIT_UPDATE Update the current Git for Windows C:\\Program Files\\nbuild\\dotnet.targets Targets Target Name Description DOTNET_SDK_DOWNLOAD Download dotnet Core sdk DOTNET_SDK_INSTALL Download and install dotnet Core sdk DOTNET_DOWNLOAD Download DotNet Core DOTNET_INSTALL Download and install DotNet Core C:\\Program Files\\nbuild\\code.targets Targets Target Name Description CODE_DOWNLOAD Download node version specified in CodeTargetVersion - Requires admin mode CODE_INSTALL Download node version specified in CodeTargetVersion property and install C:\\Program Files\\nbuild\\node.targets Targets Target Name Description NODE_DOWNLOAD Download node version specified in NodeTargetVersion - Requires admin mode NODE_INSTALL Download node version specified in NodeTargetVersion property and install NODE_VERSION Display the installed note version C:\\Program Files\\nbuild\\mongodb.targets Targets Target Name Description MONGODB_INSTALL Display mongodb version specified in TargetNodeVersion property and install C:\\Program Files\\nbuild\\nuget.targets Targets Target Name Description NUGET_VERSION Display the installed nuget version NUGET_INSTALL Download latest nuget.exe and install C:\\Program Files\\nbuild\\ngit.targets Targets Target Name Description GIT_STATUS Display the current git status AUTOTAG_STAGING Increment version for a staging build SET_TAG Set version for a staging build GIT_PULL Get the latest tag from git AUTOTAG_PRODUCTION Increment version for a production build TAG Get the tag from git PUSH_TAG Push the tag to the remote repo GIT_BRANCH Get the current git branch","title":"Nbuild targets"},{"location":"ntools/nbuild/","text":"Usage nbuild.targets common.targets Examples Nbuild Nbuild ( nb.exe ) is a wrapper for MSBuild that simplifies building solutions and provides a way to define and run custom targets. Nb.exe is also a command line tool that installs the development tools and run times required to build and test any solution. To build a target type Nb.exe [Target Name] The list of targets is generated by running the Nb.exe -c targets command. Nb.exe expects the nbuild.targets file to be present in the solution folder. Below is a full list of options that can be used with Nb.exe : Usage Nb.exe [-c value] [-json value] [-v value] - c : Specifies the command to execute. Possible values: targets, install, uninstall, download, list. targets -> Lists available targets and saves them in the targets.md file. install -> Downloads and installs apps specified in the -json option. uninstall -> Uninstalls apps specified in the -json option. download -> Downloads apps specified in the -json option. list -> Lists apps specified in the -json option. ---- - By default, the -json option points to the `ntools` deployment folder: $(ProgramFiles)\\build\\ntools.json. - The install, uninstall, and download commands require admin privileges to run. (string, default=) - json : Specifies the JSON file that holds the list of apps. Only valid for the install, download, and list commands. Sample JSON file: https://github.com/naz-hage/ntools/blob/main/DevSetup/app-Ntools.json (string, default=$(ProgramFiles)\\nbuild\\NTools.json) - v : Optional parameter which sets the console output verbose level ---- - if no command line options are specified with the -v option , i.e.: 'Nb.exe staging -v true` `Nb` will run an MSbuild target `staging` defined in a `nbuild.targets` file which present in the solution folder. Run `Nb.exe -t Targets` to list the available targets. -v Possible Values: (true or false, default=False) If the -json option is not specified, the default json file $(ProgramFiles)\\Nbuild\\NTools.json is used . nbuild.targets See nbuild.targets for more information on how to create a nbuild.targets file. common.targets The common.targets file includes all the defaults targets needed to build, test and deploy a solution. The common.targets file is located in the $(ProgramFiles)\\Nbuild folder. The nbuild.targets file in the solution folder imports the common.targets file Below is list of common targets that are defined in the common.targets file Target Name Description PROPERTIES Common properties that will be used by all targets CLEAN Clean up the project and artifacts folder INSTALL_DEP Install dependencies TELEMETRY_OPT_OUT Opt out of the DOTNET_CLI_TELEMETRY_OPTOUT - move to common STAGING Create a staging package for testing PRODUCTION Create a production package for release STAGING_DEPLOY Create a staging package and deploy for testing PRODUCTION_DEPLOY Create a production package and deploy for release SOLUTION Build the solution Release configuration using dotnet build SOLUTION_MSBUILD Build the solution Release configuration using MSBuild PACKAGE Create a package for the solution default is a zip file of all artifacts COPY_ARTIFACTS Save the artifacts to the artifacts folder DEPLOY Deploy the package. default is to extract artifacts into DeploymentProperty folder TEST Run all tests using dotnet test in Release mode TEST_DEBUG Run all tests using dotnet test in Debug mode IS_ADMIN Check if current process is running in admin mode AdminCheckExitCode property is set SingleProject Example how to build a single project HandleError Error handling placeholder","title":"Nbuild (nb.exe)"},{"location":"ntools/nbuild/#nbuild","text":"Nbuild ( nb.exe ) is a wrapper for MSBuild that simplifies building solutions and provides a way to define and run custom targets. Nb.exe is also a command line tool that installs the development tools and run times required to build and test any solution. To build a target type Nb.exe [Target Name] The list of targets is generated by running the Nb.exe -c targets command. Nb.exe expects the nbuild.targets file to be present in the solution folder. Below is a full list of options that can be used with Nb.exe :","title":"Nbuild"},{"location":"ntools/nbuild/#usage","text":"Nb.exe [-c value] [-json value] [-v value] - c : Specifies the command to execute. Possible values: targets, install, uninstall, download, list. targets -> Lists available targets and saves them in the targets.md file. install -> Downloads and installs apps specified in the -json option. uninstall -> Uninstalls apps specified in the -json option. download -> Downloads apps specified in the -json option. list -> Lists apps specified in the -json option. ---- - By default, the -json option points to the `ntools` deployment folder: $(ProgramFiles)\\build\\ntools.json. - The install, uninstall, and download commands require admin privileges to run. (string, default=) - json : Specifies the JSON file that holds the list of apps. Only valid for the install, download, and list commands. Sample JSON file: https://github.com/naz-hage/ntools/blob/main/DevSetup/app-Ntools.json (string, default=$(ProgramFiles)\\nbuild\\NTools.json) - v : Optional parameter which sets the console output verbose level ---- - if no command line options are specified with the -v option , i.e.: 'Nb.exe staging -v true` `Nb` will run an MSbuild target `staging` defined in a `nbuild.targets` file which present in the solution folder. Run `Nb.exe -t Targets` to list the available targets. -v Possible Values: (true or false, default=False) If the -json option is not specified, the default json file $(ProgramFiles)\\Nbuild\\NTools.json is used .","title":"Usage"},{"location":"ntools/nbuild/#nbuildtargets","text":"See nbuild.targets for more information on how to create a nbuild.targets file.","title":"nbuild.targets"},{"location":"ntools/nbuild/#commontargets","text":"The common.targets file includes all the defaults targets needed to build, test and deploy a solution. The common.targets file is located in the $(ProgramFiles)\\Nbuild folder. The nbuild.targets file in the solution folder imports the common.targets file Below is list of common targets that are defined in the common.targets file Target Name Description PROPERTIES Common properties that will be used by all targets CLEAN Clean up the project and artifacts folder INSTALL_DEP Install dependencies TELEMETRY_OPT_OUT Opt out of the DOTNET_CLI_TELEMETRY_OPTOUT - move to common STAGING Create a staging package for testing PRODUCTION Create a production package for release STAGING_DEPLOY Create a staging package and deploy for testing PRODUCTION_DEPLOY Create a production package and deploy for release SOLUTION Build the solution Release configuration using dotnet build SOLUTION_MSBUILD Build the solution Release configuration using MSBuild PACKAGE Create a package for the solution default is a zip file of all artifacts COPY_ARTIFACTS Save the artifacts to the artifacts folder DEPLOY Deploy the package. default is to extract artifacts into DeploymentProperty folder TEST Run all tests using dotnet test in Release mode TEST_DEBUG Run all tests using dotnet test in Debug mode IS_ADMIN Check if current process is running in admin mode AdminCheckExitCode property is set SingleProject Example how to build a single project HandleError Error handling placeholder","title":"common.targets"},{"location":"ntools/nbuildtasks/","text":"NbuildTasks NbuildTasks (nbuildtasks.dll) is a class library that exposes custom MSBuild tasks. It is used by Nbuild to perform various tasks such as web download and tools installation during the build of any project. List of Tasks Task Name Description RedError Displays an error message in red color in the console output. Git Git commands such as get or set the tag from the branch or build type and displays it in the console output. ColorMessage Displays a message in the console output with the specified color. FileVersion Gets the version of the specified file. WebDownload Downloads a file from the specified URL. Unzip Unzips the specified file. Zip Zips the specified file. Here are examples of custom Tasks that can be used during builds: RedError <!-- This target uses the `RedError` task to display an error message in red color --> <Target Name=\"RED_ERROR\"> <RedError Message=\"This is an error message displayed in Red\" /> </Target> Git <Target Name=\"TAG\"> <-- This target uses the `GetTag` task to display the tag from a branch --> <GetTag Branch=\"$(Branch)\" BuildType=\"$(BuildType)\"> <Output TaskParameter=\"Tag\" PropertyName=\"Tag\" /> </GetTag> <Message Text=\"Tag: $(Tag)\" Importance=\"high\" /> </Target> ColorMessage <!-- This target uses the `ColorMessage` task to display a message with a specified color --> <Target Name=\"COLOR_MESSAGE\"> <ColorMessage Message=\"This is a message displayed in Yellow\" Color=\"Yellow\" /> </Target> FileVersion <!-- This target uses the `FileVersion` task to file version of specified file --> <Target Name=\"FILE_VERSION\"> <PropertyGroup> <FileExe>$(ProgramFiles)\\Nbuild\\nb.exe</FileExe> </PropertyGroup> <FileVersion Name=\"$(FileExe)\" Condition=\"Exists('$(FileExe)')\" > <Output TaskParameter=\"Output\" PropertyName=\"Version\" /> </FileVersion> </Target> WebDownload <!-- This target uses the `WebDownload` task to download a file from a specified URL --> <Target Name=\"WEB_DOWNLOAD\" DependsOnTargets=\"IS_ADMIN\" > <PropertyGroup> <!-- visit https://nodejs.org/dist/ to get the latest stable version --> <DownloadsDirectory>c:\\NtoolsDownloads</DownloadsDirectory> <NodeAppName>Node.js</NodeAppName> <NodeTargetVersion>21.5.0</NodeTargetVersion> <WebUri>https://nodejs.org/dist/v$(NodeTargetVersion)/node-v$(NodeTargetVersion)-x64.msi</WebUri> <FileName>$(DownloadsDirectory)\\node-v$(NodeTargetVersion)-x64.msi</FileName> </PropertyGroup> <RedError Condition=\"'$(IsAdmin)' == false\" Message=\"Must be an admin to install $(NodeAppName)\" /> <Delete Files=\"$(FileName)\" Condition=\"Exists('$(FileName)') == true\" /> <WebDownload WebUri=\"$(WebUri)\" FileName=\"$(FileName)\" /> <Message Text=\"==> NODE_DONE\"/> </Target> Unzip <!-- This target uses the `Unzip` task to decompress a specified file --> <Target Name=\"UNZIP\"> <PropertyGroup> <FileName>c:\\temp\\source.zip</FileName> <Path>c:\\temp\\test1</Path> </PropertyGroup> <Unzip FileName=\"$(FileName)\" Destination=\"$(Path)\" /> <Message Text=\"==> ZIP_DONE\"/> </Target> Zip <!-- This target uses the `Zip` task to compress a specified file --> <Target Name=\"ZIP\"> <PropertyGroup> <FileName>c:\\temp\\source.zip</FileName> <Path>c:\\temp\\test</Path> </PropertyGroup> <Zip FileName=\"$(FileName)\" Path=\"$(Path)\" /> <Message Text=\"==> ZIP_DONE\"/> </Target> You can also find the complete list of predefined MSBuild properties in the Microsoft documentation . Here are few examples: $(MSBuildProjectFile) : The file name of the project file. $(MSBuildProjectName) : The file name of the project file without the extension. $(MSBuildProjectExtension) : The extension of the project file. $(MSBuildProjectFullPath) : The absolute path of the project file. $(MSBuildThisFileDirectory) : The directory of the MSBuild file that is currently being processed.","title":"NbuildTasks"},{"location":"ntools/nbuildtasks/#nbuildtasks","text":"NbuildTasks (nbuildtasks.dll) is a class library that exposes custom MSBuild tasks. It is used by Nbuild to perform various tasks such as web download and tools installation during the build of any project.","title":"NbuildTasks"},{"location":"ntools/nbuildtasks/#list-of-tasks","text":"Task Name Description RedError Displays an error message in red color in the console output. Git Git commands such as get or set the tag from the branch or build type and displays it in the console output. ColorMessage Displays a message in the console output with the specified color. FileVersion Gets the version of the specified file. WebDownload Downloads a file from the specified URL. Unzip Unzips the specified file. Zip Zips the specified file. Here are examples of custom Tasks that can be used during builds:","title":"List of Tasks"},{"location":"ntools/nbuildtasks/#rederror","text":"<!-- This target uses the `RedError` task to display an error message in red color --> <Target Name=\"RED_ERROR\"> <RedError Message=\"This is an error message displayed in Red\" /> </Target>","title":"RedError"},{"location":"ntools/nbuildtasks/#git","text":"<Target Name=\"TAG\"> <-- This target uses the `GetTag` task to display the tag from a branch --> <GetTag Branch=\"$(Branch)\" BuildType=\"$(BuildType)\"> <Output TaskParameter=\"Tag\" PropertyName=\"Tag\" /> </GetTag> <Message Text=\"Tag: $(Tag)\" Importance=\"high\" /> </Target>","title":"Git"},{"location":"ntools/nbuildtasks/#colormessage","text":"<!-- This target uses the `ColorMessage` task to display a message with a specified color --> <Target Name=\"COLOR_MESSAGE\"> <ColorMessage Message=\"This is a message displayed in Yellow\" Color=\"Yellow\" /> </Target>","title":"ColorMessage"},{"location":"ntools/nbuildtasks/#fileversion","text":"<!-- This target uses the `FileVersion` task to file version of specified file --> <Target Name=\"FILE_VERSION\"> <PropertyGroup> <FileExe>$(ProgramFiles)\\Nbuild\\nb.exe</FileExe> </PropertyGroup> <FileVersion Name=\"$(FileExe)\" Condition=\"Exists('$(FileExe)')\" > <Output TaskParameter=\"Output\" PropertyName=\"Version\" /> </FileVersion> </Target>","title":"FileVersion"},{"location":"ntools/nbuildtasks/#webdownload","text":"<!-- This target uses the `WebDownload` task to download a file from a specified URL --> <Target Name=\"WEB_DOWNLOAD\" DependsOnTargets=\"IS_ADMIN\" > <PropertyGroup> <!-- visit https://nodejs.org/dist/ to get the latest stable version --> <DownloadsDirectory>c:\\NtoolsDownloads</DownloadsDirectory> <NodeAppName>Node.js</NodeAppName> <NodeTargetVersion>21.5.0</NodeTargetVersion> <WebUri>https://nodejs.org/dist/v$(NodeTargetVersion)/node-v$(NodeTargetVersion)-x64.msi</WebUri> <FileName>$(DownloadsDirectory)\\node-v$(NodeTargetVersion)-x64.msi</FileName> </PropertyGroup> <RedError Condition=\"'$(IsAdmin)' == false\" Message=\"Must be an admin to install $(NodeAppName)\" /> <Delete Files=\"$(FileName)\" Condition=\"Exists('$(FileName)') == true\" /> <WebDownload WebUri=\"$(WebUri)\" FileName=\"$(FileName)\" /> <Message Text=\"==> NODE_DONE\"/> </Target>","title":"WebDownload"},{"location":"ntools/nbuildtasks/#unzip","text":"<!-- This target uses the `Unzip` task to decompress a specified file --> <Target Name=\"UNZIP\"> <PropertyGroup> <FileName>c:\\temp\\source.zip</FileName> <Path>c:\\temp\\test1</Path> </PropertyGroup> <Unzip FileName=\"$(FileName)\" Destination=\"$(Path)\" /> <Message Text=\"==> ZIP_DONE\"/> </Target>","title":"Unzip"},{"location":"ntools/nbuildtasks/#zip","text":"<!-- This target uses the `Zip` task to compress a specified file --> <Target Name=\"ZIP\"> <PropertyGroup> <FileName>c:\\temp\\source.zip</FileName> <Path>c:\\temp\\test</Path> </PropertyGroup> <Zip FileName=\"$(FileName)\" Path=\"$(Path)\" /> <Message Text=\"==> ZIP_DONE\"/> </Target> You can also find the complete list of predefined MSBuild properties in the Microsoft documentation . Here are few examples: $(MSBuildProjectFile) : The file name of the project file. $(MSBuildProjectName) : The file name of the project file without the extension. $(MSBuildProjectExtension) : The extension of the project file. $(MSBuildProjectFullPath) : The absolute path of the project file. $(MSBuildThisFileDirectory) : The directory of the MSBuild file that is currently being processed.","title":"Zip"},{"location":"ntools/ngit/","text":"Ngit ( ng.exe ) is simple wrapper for Git tool that perform simple commands such as get tag and set tag. Usage Ng.exe [-c value] [-url value] [-tag value] [-buildtype value] [-v value] - c : git Command, value= [tag | settag| autotag| setautotag| deletetag | branch | clone] tag -> Get the current tag autotag -> Set next tag based on the build type: STAGING vs.PRODUCTION pushtag -> push specified tag in -tag option to remote repo settag -> Set specified tag in -tag option deletetag -> Delete specified tag in -tag option branch -> Get the current branch clone -> Clone specified Git repo in the -url option (string, default=) - url : Git repo path (string, default=) - tag : Tag used for -c settag and -c deletetag (string, default=) - buildtype : Build type used for -c autotag and -c setautotag Values: STAGING | PRODUCTION (string, default=) - v : verbose. value = [true | false] (true or false, default=False)","title":"Ngit (ng.exe)"},{"location":"ntools/ngit/#usage","text":"Ng.exe [-c value] [-url value] [-tag value] [-buildtype value] [-v value] - c : git Command, value= [tag | settag| autotag| setautotag| deletetag | branch | clone] tag -> Get the current tag autotag -> Set next tag based on the build type: STAGING vs.PRODUCTION pushtag -> push specified tag in -tag option to remote repo settag -> Set specified tag in -tag option deletetag -> Delete specified tag in -tag option branch -> Get the current branch clone -> Clone specified Git repo in the -url option (string, default=) - url : Git repo path (string, default=) - tag : Tag used for -c settag and -c deletetag (string, default=) - buildtype : Build type used for -c autotag and -c setautotag Values: STAGING | PRODUCTION (string, default=) - v : verbose. value = [true | false] (true or false, default=False)","title":"Usage"}]}
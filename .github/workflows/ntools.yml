name: ntools Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "*" ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build Type'
        required: false
        default: 'stage'
        type: choice
        options:
          - "stage"
          - "prod"
      enable_logging:
        description: 'Enable additional logging'
        required: false
        default: 'false'
        type: choice
        options:
          - "true"
          - "false"

env:
  Solution_Name: ntools.sln
  Test_Project_Path: LauncherTests
  build_type: ${{ github.event.inputs.build_type || 'stage' }}
  enable_logging: ${{ github.event.inputs.enable_logging || 'false' }}

jobs:
  test:
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore dependencies
        run: dotnet restore ntools.sln
        working-directory: ${{ github.workspace }}

      - name: Build
        run: dotnet build ntools.sln --no-restore --configuration Release
        working-directory: ${{ github.workspace }}

      - name: Test with coverage
        env:
          OWNER: ${{ github.repository_owner }}
          API_GITHUB_KEY: ${{ secrets.API_GITHUB_KEY }}
        run: dotnet test ntools.sln --no-build --configuration Release --logger "trx;LogFileName=test-results.trx" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=TestResults/
        working-directory: ${{ github.workspace }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: '**/TestResults/**/*.trx'

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: '**/TestResults/**/coverage.cobertura.xml'

      - name: List all coverage files
        run: Get-ChildItem -Recurse -Filter coverage.cobertura.xml | Select-Object -ExpandProperty FullName
        shell: pwsh

      - name: List all coverage.cobertura.xml files
        run: Get-ChildItem -Path . -Filter coverage.cobertura.xml -Recurse | Select-Object FullName
        shell: pwsh
        working-directory: ${{ github.workspace }}

      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Tests
          path: '**/TestResults/**/*.trx'
          reporter: dotnet-trx

  build:
    name: Running a workflow
    needs: [test]
    runs-on: windows-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.dotnet_version }}

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Install ntools
      run: |
        cd ./dev-setup
        ./install-ntools.ps1
      shell: pwsh
      working-directory: ${{ github.workspace }}

    - name: Set ProgramFiles Path
      run: |
        $programFilesPath = [System.Environment]::GetFolderPath('ProgramFiles')
        echo "ProgramFilesPath=$programFilesPath" | Out-File -FilePath $env:GITHUB_ENV -Append
      shell: pwsh
      working-directory: ${{ github.workspace }}
   
    - name: Configure Git
      run: |
        git config --global user.name "gitHub-actions"
        git config --global user.email "actions@github.com"

    - name: Authenticate with GitHub
      run: |
        git remote set-url origin https://x-access-token:${{ secrets.API_GITHUB_KEY }}@github.com/${{ github.repository }}
        git fetch origin
        git branch -r
      shell: pwsh

    - name: Show changes
      run: |
        git status
        git diff
      shell: pwsh
  
    - name: Run Build
      run: |
        & "$env:ProgramFilesPath/nbuild/nb.exe" CORE
        & "$env:ProgramFilesPath/nbuild/nb.exe" ${{ env.Build_Type }} -v ${{ env.Enable_Logging }}
      shell: pwsh
      working-directory: ${{ github.workspace }}
      env:
        OWNER: ${{ github.repository_owner }}
        API_GITHUB_KEY: ${{ secrets.API_GITHUB_KEY }}
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        Build_Type: ${{ github.event.inputs.build_type || 'stage' }}

  docs:
    name: Publish Docs
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
    
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies	
        run: |	
          python -m pip install --upgrade pip	
          pip install mkdocs	
      - name: Update docs	
        run: |	
          mkdocs build	
          mkdocs gh-deploy --force
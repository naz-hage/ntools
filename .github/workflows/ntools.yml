name: ntools Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "*" ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build Type'
        required: false
        default: 'stage'
        type: choice
        options:
          - "stage"
          - "prod"
      enable_logging:
        description: 'Enable additional logging'
        required: false
        default: 'false'
        type: choice
        options:
          - "true"
          - "false"

env:
  solution_name: ntools.sln
  dotnet_version: 9.0
  # Path to the consolidated ntools-scripts module file in the repository
  NTOOLS_SCRIPT_MODULE: './scripts/module-package/ntools-scripts.psm1'
  build_type: ${{ github.ref == 'refs/heads/main' && 'prod' || github.event.inputs.build_type || 'stage' }}
  enable_logging: ${{ github.event.inputs.enable_logging || 'false' }}

permissions:
  contents: write
  checks: write
  pull-requests: write
  actions: read

jobs:
  build:
    name: Running a workflow
    strategy:
      matrix:
        configuration: [Release]
    runs-on: windows-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.API_GITHUB_KEY }}
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.ref }}
        repository: ${{ github.event.pull_request.head.repo.full_name }}

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.dotnet_version }}

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Install ntools using ntools-scripts module
      run: |
        # Import the consolidated ntools-scripts module using the repo-scoped env var
        Import-Module $env:NTOOLS_SCRIPT_MODULE -Force

        # Fail fast on any non-terminating errors
        $ErrorActionPreference = 'Stop'

        # Install NTools using the dev-setup/ntools.json file and ensure CI step fails on error
        Write-Host "Installing NTools using dev-setup/ntools.json..."
        try {
          Install-NTools -NtoolsJsonPath "./dev-setup/ntools.json"
        }
        catch {
          Write-Host "Install-NTools failed: $($_.Exception.Message)"
          exit 1
        }

        Write-Host "Installed NTools version information:"
        $nbPath = "$env:ProgramFiles\NBuild\nb.exe"
        if (Test-Path $nbPath) {
          & $nbPath --version
        }
      shell: pwsh
      working-directory: ${{ github.workspace }}

    - name: Set ProgramFiles Path
      run: |
        $programFilesPath = [System.Environment]::GetFolderPath('ProgramFiles')
        echo "ProgramFilesPath=$programFilesPath" | Out-File -FilePath $env:GITHUB_ENV -Append
      shell: pwsh
      working-directory: ${{ github.workspace }}
   
    - name: Configure Git
      run: |
        git config --global user.name "gitHub-actions"
        git config --global user.email "actions@github.com"

    - name: Verify ntools-scripts Module
      run: |
        # Import and verify the ntools-scripts module using the repo-scoped env var
        Import-Module $env:NTOOLS_SCRIPT_MODULE -Force

        # Display module version and available functions
        Write-Host "=== ntools-scripts Module Information ==="
        Get-NtoolsScriptsVersion
        Write-Host ""
        Write-Host "Available module functions:"
        Get-Command -Module ntools-scripts | Select-Object Name | Format-Table -AutoSize
      shell: pwsh
      working-directory: ${{ github.workspace }}

    - name: Authenticate with GitHub
      run: |
        git remote set-url origin https://x-access-token:${{ secrets.API_GITHUB_KEY }}@github.com/${{ github.repository }}
        git fetch origin
        git branch -r
      shell: pwsh

    - name: Show changes
      run: |
        git status
        git diff
      shell: pwsh
  
    - name: Run Build (capture output and fail on MSBuild errors)
      run: |
        $env:OWNER = '${{ github.repository_owner }}'
        $env:API_GITHUB_KEY = '${{ secrets.API_GITHUB_KEY }}'
        $env:DOTNET_CLI_TELEMETRY_OPTOUT = '1'

        Write-Host "Running nb.exe CORE (capturing output to build-core.log)"
        & "$env:ProgramFilesPath/nbuild/nb.exe" CORE 2>&1 | Tee-Object -FilePath build-core.log

        Write-Host "Running nb.exe ${{ env.build_type }} (capturing output to build-stage.log)"
        & "$env:ProgramFilesPath/nbuild/nb.exe" ${{ env.build_type }} 2>&1 | Tee-Object -FilePath build-stage.log

        # Fail the step if any MSBuild 'Build FAILED' lines are present in the captured logs
        $failed = Select-String -Path build-*.log -Pattern 'Build FAILED' -SimpleMatch -Quiet
        if ($failed) {
          Write-Error "MSBuild failure detected in build logs. See build-core.log / build-stage.log for details."
          exit 1
        }
      shell: pwsh
      working-directory: ${{ github.workspace }}

    - name: Debug - Show TestResults Directory Structure
      run: |
        Write-Host "=== Checking Directory Structure ==="
        Write-Host "Current working directory: $(Get-Location)"
        Write-Host "GitHub workspace: ${{ github.workspace }}"
        
        Write-Host "`n=== Checking for TestResults directory ==="
        if (Test-Path "./TestResults") {
          Write-Host "./TestResults exists"
          Get-ChildItem -Path "./TestResults" -Recurse | Select-Object FullName, Length, LastWriteTime
        } else {
          Write-Host "./TestResults does not exist"
        }
        
        Write-Host "`n=== Checking for CoverageReport directory ==="
        if (Test-Path "./CoverageReport") {
          Write-Host "./CoverageReport exists"
          Get-ChildItem -Path "./CoverageReport" -Recurse | Select-Object FullName, Length, LastWriteTime
        } else {
          Write-Host "./CoverageReport does not exist"
        }
        
        Write-Host "`n=== Searching for any test/coverage files ==="
        Get-ChildItem -Path "." -Recurse -Include "*.trx", "*.xml", "*.json" -ErrorAction SilentlyContinue | 
          Where-Object {$_.Name -match "(test|coverage)" -or $_.FullName -match "(TestResults|CoverageReport)"} | 
          Select-Object FullName, Length, LastWriteTime
      shell: pwsh
      if: always()

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.configuration }}
        path: |
          ./TestResults/**/*.trx
          ./TestResults/**/*.xml
          ./TestResults/**/*.json
          **/TestResults/**/*.trx
          **/TestResults/**/*.xml
          **/TestResults/**/*.json
        retention-days: 30

    - name: Upload Code Coverage Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports-${{ matrix.configuration }}
        path: |
          ./CoverageReport/**/*
          ./TestResults/**/*.cobertura.xml
          coverage.cobertura.xml
        retention-days: 30

    # NOTE: dorny/test-reporter removed. Test result files are uploaded above via
    # actions/upload-artifact and can be inspected/downloaded from the run.

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        message: |
          ## üìä Code Coverage Report
          
          ### ÔøΩÔ∏è Build & Test Status
          - ‚úÖ **Build:** Successful (using ntools-scripts v2.3.0 module)
          - ‚úÖ **Tests:** All tests passing
          - ‚úÖ **Coverage:** Reports generated successfully
          
          ### üìÅ Available Artifacts
          - **HTML Report:** Available in `CoverageReport` folder (generated by nbuild)
          - **Cobertura XML:** `coverage.cobertura.xml`
          - **Test Results:** Available in `TestResults` folder
          
          [üìÅ Download Coverage Reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          **Status: ‚úÖ AUTOMATED COVERAGE REPORTING ACTIVE**
  
  python-tests:
    name: Python Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f "atools/requirements-dev.txt" ]; then
            pip install -r atools/requirements-dev.txt
          elif [ -f "atools/requirements.txt" ]; then
            pip install -r atools/requirements.txt
            # Ensure pytest is available even if requirements.txt only pins runtime deps
            pip install pytest pytest-mock
          else
            pip install pytest pytest-mock
          fi

      - name: Run pytest
        run: |
          mkdir -p TestResults
          pytest --junitxml=./TestResults/pytest-results.xml
          
      - name: Upload pytest results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results
          path: TestResults/pytest-results.xml
          retention-days: 30

      # NOTE: dorny/test-reporter removed for Python tests because it does not
      # reliably support pytest/JUnit output in the versions we observed. The
      # pytest XML artifact is uploaded above and can be inspected/downloaded
      # to diagnose test failures. If you want PR comments or annotations,
      # consider adding a lightweight Python step that posts a summary using
      # the GITHUB_TOKEN or replace this with a different action that supports
      # pytest explicitly.

  docs:
    name: Publish Docs
    runs-on: ubuntu-latest
    needs: [build, python-tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
    
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies	
        run: |	
          python -m pip install --upgrade pip	
          pip install mkdocs	
      - name: Update docs
        run: |
          mkdocs build
          mkdocs gh-deploy --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<!-- Reference: https://learn.microsoft.com/en-us/visualstudio/msbuild/walkthrough-using-msbuild?view=vs-2022 -->
	
	<Import Project="$(ProgramFiles)\Nbuild\common.targets"/>

	<PropertyGroup>
        <!-- This is the folder where the *.sln resides-->
		<DeploymentFolder>$(ProgramFiles)\Nbuild</DeploymentFolder>
		<GithubRelease>c:\source\learn\Release\GitHubRelease.exe</GithubRelease>
	</PropertyGroup>

	<!--Setup the ARTIFACTS folders for binaries and test results - override -->
    <Target Name="ARTIFACTS" DependsOnTargets="TAG">
      <PropertyGroup>
		 <ArtifactsSolutionFolder>$(ArtifactsDir)\$(SolutionName)</ArtifactsSolutionFolder>
		 <SetupFolder>$(ArtifactsSolutionFolder)\release</SetupFolder>
        <ArtifactsFolder>$(ArtifactsSolutionFolder)\$(TargetRelease)\$(ProductVersion)</ArtifactsFolder>
		<ArtifactsTestResultsFolder>$(ArtifactsSolutionFolder)\TestResults\$(ProductVersion)</ArtifactsTestResultsFolder>
      </PropertyGroup>  
      <ItemGroup>
            <BinaryFiles 
						Exclude="
						 $(SolutionDir)\$(TargetRelease)\**\*.pdb;
						 $(SolutionDir)\$(TargetRelease)\test.*;
						 $(SolutionDir)\$(TargetRelease)\*test*;
						 $(SolutionDir)\$(TargetRelease)\Nuget*;
						 $(SolutionDir)\$(TargetRelease)\*CodeCoverage*"

						Include="
                        $(SolutionDir)\$(TargetRelease)\*.exe;
                        $(SolutionDir)\$(TargetRelease)\*.exe.config;
                        $(SolutionDir)\$(TargetRelease)\*.json;
						$(SolutionDir)\Nbuild\resources\*.targets;
						$(SolutionDir)\Nbuild\resources\*.ps1;
						$(SolutionDir)\Nbuild\resources\*.json;
                        $(SolutionDir)\$(TargetRelease)\*.dll"
						/>

            <RunTimesNetStandard20 Include = "
								   $(SolutionDir)\$(TargetRelease)\netstandard2.0\*.*"
                                    Exclude="
						            $(SolutionDir)\$(TargetRelease)\**\*.pdb"
						            />
        </ItemGroup>
		
        <Message Text="==> DONE"/>
    </Target>
	
	<!--Delete the ARTIFACTS folder after PACKAGE target is completed-->
	<Target Name="CLEAN_ARTIFACTS" AfterTargets="PACKAGE">
		<Message Text="Removing $(ArtifactsFolder)"> </Message>
		<RemoveDir Directories="$(ArtifactsFolder);"/>
		<Message Text="==> DONE"/>
	</Target>

	<!-- Test for FileVersion task and powershell file-version.ps1-->
	<Target Name="FILE_VERSIONS"  DependsOnTargets="ARTIFACTS">
		<PropertyGroup>
			<FileName>$(SolutionDir)\$(TargetRelease)\nb.exe</FileName>
		</PropertyGroup>
		<Exec Command='powershell -File "$(BuildTools)\file-version.ps1" "$(FileName)"' ConsoleToMSBuild="true">
			<Output TaskParameter="ConsoleOutput" PropertyName="Version" />
		</Exec>
		<Message Text="Powershell File version: $(Version)" />

		<FileVersion Name="%(BinaryFiles.Identity)" Condition="'%(Extension)'=='.exe' Or '%(Extension)'=='.dll'" >
			<Output TaskParameter="Output" PropertyName="Version"/>
		</FileVersion>
		<Message Text="File version: $(Version)" />
		
		<Message Text="==> DONE"/>

	</Target>
	
	<!-- Download Nbuild specified in the NbuildTargetVersion -->
	<Target Name="NBUILD_DOWNLOAD" DependsOnTargets="IS_ADMIN">
		<PropertyGroup>
		<WebUri>https://github.com/naz-hage/ntools/releases/download/$(NbuildTargetVersion)/$(NbuildTargetVersion).zip</WebUri>
		<FileName>$(DownloadsDirectory)\NBuildTools.zip</FileName>
		</PropertyGroup>

		<RedError Condition="'$(IsAdmin)' == false" Message="Must be an admin to install $(NbuildAppName)" />
        
        <Delete Files="$(FileName)" Condition="Exists('$(FileName)') == true" />
        
        <WebDownload WebUri="$(WebUri)" FileName="$(FileName)" />
        
        <Message Text="==> NBUILD_DONE"/>
	</Target>

	<!-- Install Nbuild specified in the NbuildTargetVersion -->
	<Target Name="NBUILD_INSTALL" DependsOnTargets="IS_ADMIN">
		<PropertyGroup>
            <FileExe>$(ProgramFiles)\Nbuild\nb.exe</FileExe>
        </PropertyGroup>
        <Exec Command='"$(FileExe)" --version' Condition="Exists('$(FileExe)')" />
        
        <RedError Condition="'$(IsAdmin)' == false" Message="Must be an admin to install $(CodeAppName)" />
        
        <FileVersion Name="$(FileExe)" Condition="Exists('$(FileExe)')" >
            <Output TaskParameter="Output" PropertyName="Version" />
        </FileVersion>

        <Message Text="$(CodeAppName) is not installed" Condition="'$(Version)' == ''" />
        <!-- Display the file version -->
        <Message Text="$(CodeAppName) Version is $(Version)" Condition="'$(Version)' != ''" />

        <Message Text="Installing $(CodeAppName)" Condition="!Exists('$(FileExe)') or '$(Version)' == '' or '$(Version)' &lt; '$(CodeTargetVersion)'"/>
        <Exec Command='"$(ZipExe)" x $(FileName) -o"C:\Program Files\Nbuild" ' Condition="'$(Verion)' == '' Or '$(Version)' &lt; '$(CodeTargetVersion)'" />

        <Delete Files="$(FileName)" Condition="Exists('$(FileName)') == true" />

        <Exec Command='"$(FileExe)" --version'  Condition="Exists('$(FileExe)')" />

        <FileVersion Name="$(FileExe)" Condition="Exists('$(FileExe)')" >
            <Output TaskParameter="Output" PropertyName="Version" />
        </FileVersion>

        <Message Text="$(CodeAppName) installed version: $(Version)" />
        <Message Text="==> CODE_DONE"/>
	</Target>

	<!-- Setup Development Environment -->
	<Target Name="DEV_SETUP" DependsOnTargets="IS_ADMIN">
		<Pwsh ScriptPath="$(SolutionDir)\DevSetup\install.ps1" Arguments="" WorkingDirectory ="$(SolutionDir)\DevSetup"/>

	    <Message Text="==> DONE"/>
	</Target>

	<!-- Build docs locally for testing -->
	<Target Name="MKDOCS" >
		<Exec Command='pip install mkdocs' WorkingDirectory="$(SolutionDir)"/>
		<Exec Command='mkdocs build -d %userprofile%\ntools' WorkingDirectory="$(SolutionDir)"/>
		<Exec Command='mkdocs serve' WorkingDirectory="$(SolutionDir)"/>
	    <Message Text="==> DONE"/>
	</Target>

	<!-- Update App metadata json files in nbuild\resources -->
	<Target Name="UPDATE_APPS" AfterTargets="TEST">
	    <Exec Command='xcopy c:\temp\apps\*.* .\DevSetup /d /y' WorkingDirectory="$(SolutionDir)"/>
		<Message Text="==> DONE"/>
	</Target>

	<!-- Example to get the installation 
		Product code used for uninstallation of product -->
	<Target Name="GET_PRODUCT_CODES" >
		<Exec Command="wmic product where &quot;name like 'MongoDB%'&quot; get IdentifyingNumber, Name" ConsoleToMSBuild="true">
			<Output TaskParameter="ConsoleOutput" PropertyName="ProductsList" />
		</Exec>
		<ItemGroup>
			<Products Include="$(ProductsList.Split('&#xD;&#xA;', StringSplitOptions.RemoveEmptyEntries))" />
		</ItemGroup>
		<Message Text="@(Products)" Importance="high" />
	</Target>

	<!-- push production tag -->
	<Target Name="PUSH_TAG" DependsOnTargets="TAG" AfterTargets="PROD;STAGE_NEW" >
		<Git Command="PushTag" TaskParameter="$(ProductVersion)" >
		</Git>
	</Target>
	
	<!-- Display core properties-->
	<Target Name="CORE" DependsOnTargets="ARTIFACTS" >
		<Message Text="DevDrive: $(DevDrive)"/>
		<Message Text="MainDir: $(MainDir)"/>
		<Message Text="Product Version: $(ProductVersion)"/>
		<Message Text="SolutionName: $(SolutionName)"/>
		<Message Text="SolutionDir: $(SolutionDir)"/>
		<Message Text="DeploymentFolder: $(DeploymentFolder)"/>
		<Message Text="ArtifactsSolutionFolder: $(ArtifactsSolutionFolder)"/>
		<Message Text="SetupFolder: $(SetupFolder)"/>
		<Message Text="ArtifactsFolder: $(ArtifactsFolder)"/>
		<Message Text="ArtifactsTestResultsFolder: $(ArtifactsTestResultsFolder)"/>
		<Message Text="==> DONE"/>
	</Target>

	<!-- Update ntools locally for testing -->
	<Target Name="UPDATE_NTOOLS" DependsOnTargets="IS_ADMIN" >
		<PropertyGroup>
			<SRC>$(SolutionDir)\nbuild\resources</SRC>
			<DST>$(DeploymentFolder)</DST>
		</PropertyGroup>
		<ItemGroup>
			<SourceFiles Include="
						 $(SRC)\ntools.json;
						 $(SRC)\*.targets" />
		</ItemGroup>
		<Copy SourceFiles="@(SourceFiles)" DestinationFolder="$(DST)" />
	</Target>

	<!-- Update the ntools-launcher nuget package in the local feed for testing - not needed for normal builds -->
	<Target Name="NUGET_UPDATE">
		<!--Nuget does not support updating a package in the local feed without version - so we need to remove it first-->
		<Exec Command='dotnet remove package ntools-launcher"' WorkingDirectory='$(SolutionDir)\Nbackup'></Exec>
		<Exec Command='dotnet remove package ntools-launcher"' WorkingDirectory='$(SolutionDir)\Ngit'></Exec>
		<Exec Command='dotnet remove package ntools-launcher"' WorkingDirectory='$(SolutionDir)\NbuildTasks'></Exec>
		<Exec Command='dotnet add package ntools-launcher  --source "C:\Artifacts\nupkgs"' WorkingDirectory='$(SolutionDir)\Nbackup'></Exec>
		<Exec Command='dotnet add package ntools-launcher  --source "C:\Artifacts\nupkgs"' WorkingDirectory='$(SolutionDir)\Ngit'></Exec>
		<Exec Command='dotnet add package ntools-launcher  --source "C:\Artifacts\nupkgs"' WorkingDirectory='$(SolutionDir)\NbuildTasks'></Exec>
	</Target>

	<!-- Create a stage builld since the last release -->
	<Target Name="STAGE_NEW" DependsOnTargets="TAG;GIT_BRANCH;AUTOTAG_STAGE;SOLUTION;COPY_ARTIFACTS;PACKAGE" >
		<Exec Command="$(GithubRelease) $(SolutionName) $(ProductVersion) $(GitBranch) $(ArtifactsFolder).zip" WorkingDirectory="$(SolutionDir)\Release" />
		
		<Message Text="==> DONE"/>
	</Target>

	<!-- Create a production build since the last release -->
	<Target Name="PROD_NEW" DependsOnTargets="TAG;GIT_BRANCH;AUTOTAG_PROD;SOLUTION;COPY_ARTIFACTS;PACKAGE" >
		<Exec Command="$(GithubRelease) $(SolutionName) $(ProductVersion) $(GitBranch) $(ArtifactsFolder).zip" WorkingDirectory="$(SolutionDir)\Release" />

		<Message Text="==> DONE"/>
	</Target>

	<!-- Example of a target that displays a yellow color message -->
	<Target Name="YELLOW_MESSAGE">
		<ColorMessage Message="This is a message displayed in Yellow" Color="Yellow" />
	</Target>

	<!-- Example of a target that displays a red color message -->
	<Target Name="RED_MESSAGE">
		<ColorMessage Message="This is a message displayed in Yellow" Color="Red" />
	</Target>

</Project>

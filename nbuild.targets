<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<!-- Reference: https://learn.microsoft.com/en-us/visualstudio/msbuild/walkthrough-using-msbuild?view=vs-2022 -->
	
	<Import Project="$(ProgramFiles)\Nbuild\common.targets"/>

	<PropertyGroup>
		<!-- This is the folder where the *.sln resides-->
		<DeploymentFolder>$(ProgramFiles)\Nbuild</DeploymentFolder>
		<!--  Modify these paths to match your Python installation -->
		<PythonPath>$(ProgramFiles)\Python\3.13.3</PythonPath>
		<PipPath>$(PythonPath)\Scripts\pip.exe</PipPath>
		<MkDocsExe>$(USERPROFILE)\AppData\Roaming\Python\Python313\Scripts\mkdocs.exe</MkDocsExe>
	</PropertyGroup>

	<!--Setup the ARTIFACTS folders for binaries and test results - override -->
	<Target Name="ARTIFACTS" DependsOnTargets="TAG">
	  <PropertyGroup>
		 <ArtifactsSolutionFolder>$(ArtifactsDir)\$(SolutionName)</ArtifactsSolutionFolder>
		 <SetupFolder>$(ArtifactsSolutionFolder)\release</SetupFolder>
		<ArtifactsFolder>$(ArtifactsSolutionFolder)\$(TargetRelease)\$(ProductVersion)</ArtifactsFolder>
		<ArtifactsTestResultsFolder>$(ArtifactsSolutionFolder)\TestResults\$(ProductVersion)</ArtifactsTestResultsFolder>
		<NbExe>$(OutputPathRelease)\nb.exe</NbExe>
	  </PropertyGroup>  
	  <ItemGroup>
			<BinaryFiles 
						Exclude="
						 $(SolutionDir)\$(TargetRelease)\**\*.pdb;
						 $(SolutionDir)\$(TargetRelease)\test.*;
						 $(SolutionDir)\$(TargetRelease)\*test*;
						 $(SolutionDir)\$(TargetRelease)\Nuget*;
						 $(SolutionDir)\$(TargetRelease)\*CodeCoverage*"

						Include="
						$(SolutionDir)\$(TargetRelease)\*.exe;
						$(SolutionDir)\$(TargetRelease)\*.exe.config;
						$(SolutionDir)\$(TargetRelease)\*.json;
						$(SolutionDir)\Nbuild\resources\*.targets;
						$(SolutionDir)\Nbuild\resources\*.ps1;
						$(SolutionDir)\Nbuild\resources\*.json;
						$(SolutionDir)\$(TargetRelease)\*.dll"
						/>

			<RunTimesNetStandard20 Include = "
								   $(SolutionDir)\$(TargetRelease)\netstandard2.0\*.*"
									Exclude="
									$(SolutionDir)\$(TargetRelease)\**\*.pdb"
									/>
		</ItemGroup>
		
		<Message Text="==> DONE"/>
	</Target>
	
	<!-- Test for FileVersion task and powershell file-version.ps1-->
	<Target Name="FILE_VERSIONS"  DependsOnTargets="ARTIFACTS">
		<PropertyGroup>
			<FileName>$(SolutionDir)\$(TargetRelease)\nb.exe</FileName>
		</PropertyGroup>
		<Exec Command='powershell -File "$(SolutionDir)\dev-setup\list-file-version.ps1" "$(FileName)"' ConsoleToMSBuild="true">
			<Output TaskParameter="ConsoleOutput" PropertyName="Version" />
		</Exec>
		<Message Text="Powershell File version: $(Version)" />

		<FileVersion Name="%(BinaryFiles.Identity)" Condition="'%(Extension)'=='.exe' Or '%(Extension)'=='.dll'" >
			<Output TaskParameter="Output" PropertyName="Version"/>
		</FileVersion>
		<Message Text="File version: $(Version)" />
		
		<Message Text="==> DONE"/>

	</Target>
	
	<!-- Download Nbuild specified in the NbuildTargetVersion -->
	<Target Name="NBUILD_DOWNLOAD" DependsOnTargets="IS_ADMIN">
		<PropertyGroup>
		<WebUri>https://github.com/naz-hage/ntools/releases/download/$(NbuildTargetVersion)/$(NbuildTargetVersion).zip</WebUri>
		<FileName>$(DownloadsDirectory)\NBuildTools.zip</FileName>
		</PropertyGroup>

		<RedError Condition="'$(IsAdmin)' == false" Message="Must be an admin to install $(NbuildAppName)" />
		
		<Delete Files="$(FileName)" Condition="Exists('$(FileName)') == true" />
		
		<WebDownload WebUri="$(WebUri)" FileName="$(FileName)" />
		
		<Message Text="==> NBUILD_DONE"/>
	</Target>

	<!-- Install Nbuild specified in the NbuildTargetVersion -->
	<Target Name="NBUILD_INSTALL" DependsOnTargets="IS_ADMIN">
		<PropertyGroup>
			<FileExe>$(ProgramFiles)\Nbuild\nb.exe</FileExe>
		</PropertyGroup>
		<Exec Command='"$(FileExe)" --version' Condition="Exists('$(FileExe)')" />
		
		<RedError Condition="'$(IsAdmin)' == false" Message="Must be an admin to install $(CodeAppName)" />
		
		<FileVersion Name="$(FileExe)" Condition="Exists('$(FileExe)')" >
			<Output TaskParameter="Output" PropertyName="Version" />
		</FileVersion>

		<Message Text="$(CodeAppName) is not installed" Condition="'$(Version)' == ''" />
		<!-- Display the file version -->
		<Message Text="$(CodeAppName) Version is $(Version)" Condition="'$(Version)' != ''" />

		<Message Text="Installing $(CodeAppName)" Condition="!Exists('$(FileExe)') or '$(Version)' == '' or '$(Version)' &lt; '$(CodeTargetVersion)'"/>
		<Exec Command='"$(ZipExe)" x $(FileName) -o"C:\Program Files\Nbuild" ' Condition="'$(Verion)' == '' Or '$(Version)' &lt; '$(CodeTargetVersion)'" />

		<Delete Files="$(FileName)" Condition="Exists('$(FileName)') == true" />

		<Exec Command='"$(FileExe)" --version'  Condition="Exists('$(FileExe)')" />

		<FileVersion Name="$(FileExe)" Condition="Exists('$(FileExe)')" >
			<Output TaskParameter="Output" PropertyName="Version" />
		</FileVersion>

		<Message Text="$(CodeAppName) installed version: $(Version)" />
		<Message Text="==> CODE_DONE"/>
	</Target>

	<!-- Setup Development Environment -->
	<Target Name="DEV_SETUP" DependsOnTargets="IS_ADMIN">
		<Pwsh ScriptPath="$(SolutionDir)\dev-setup\install.ps1" Arguments="" WorkingDirectory ="$(SolutionDir)\dev-setup"/>

		<Message Text="==> DONE"/>
	</Target>

	<!-- Build docs locally for testing -->
	<Target Name="MKDOCS" >
		<!-- Check if Python is installed -->
		<Error Condition="!Exists('$(PythonPath)\python.exe')" Text="Python is not installed at $(PythonPath)" />

		<!-- Upgrade pip -->
		<Exec Command="&quot;$(PipPath)&quot; install --upgrade pip" WorkingDirectory="$(SolutionDir)">
			<Output TaskParameter="ExitCode" PropertyName="PipUpgradeExitCode" />
		</Exec>
		<Error Condition="'$(PipUpgradeExitCode)' != '0'" Text="Failed to upgrade pip. Exit code: $(PipUpgradeExitCode)" />

		<!-- Install mkdocs -->
		<Exec Command="&quot;$(PipPath)&quot; install mkdocs" WorkingDirectory="$(SolutionDir)">
			<Output TaskParameter="ExitCode" PropertyName="MkDocsInstallExitCode" />
		</Exec>
		<Error Condition="'$(MkDocsInstallExitCode)' != '0'" Text="Failed to install mkdocs. Exit code: $(MkDocsInstallExitCode)" />

		<!-- Build the documentation -->
		<Exec Command='"$(MkDocsExe)" build -d $(ArtifactsDir)\$(SolutionName)\docs"' WorkingDirectory="$(SolutionDir)" />
		<Message Text="==> DONE" />
	</Target>

  <!-- Run nbTests and generate code coverage report -->
  <Target Name="RUN_NBTESTS_COVERAGE">
	<Exec Command="dotnet test &quot;$(SolutionDir)\nbTests\nbTests.csproj&quot; --collect:\&quot;XPlat Code Coverage\&quot;" WorkingDirectory="$(SolutionDir)" />
	<Exec Command="dotnet tool install -g dotnet-reportgenerator-globaltool" />
	<Exec Command="reportgenerator -reports:$(SolutionDir)\TestResults\**\coverage.cobertura.xml -targetdir:$(SolutionDir)\TestResults\CoverageReport" />
	<Message Text="nbTests executed and code coverage report generated in TestResults\CoverageReport." />
	<Message Text="==> DONE" />
  </Target>
	<!-- mkdocs deploy locally -->
	<Target Name="MKDOCS_DEPLOY" AfterTargets="MKDOCS">
		<Exec Command='"$(MkDocsExe)" serve' WorkingDirectory="$(SolutionDir)"/>
		<Message Text="==> DONE" />
	</Target>

	<!-- Example to get the installation 
		Product code used for uninstallation of product -->
	<Target Name="GET_PRODUCT_CODES" >
		<Exec Command="wmic product where &quot;name like 'MongoDB%'&quot; get IdentifyingNumber, Name" ConsoleToMSBuild="true">
			<Output TaskParameter="ConsoleOutput" PropertyName="ProductsList" />
		</Exec>
		<ItemGroup>
			<Products Include="$(ProductsList.Split('&#xD;&#xA;', StringSplitOptions.RemoveEmptyEntries))" />
		</ItemGroup>
		<Message Text="@(Products)" Importance="high" />
	</Target>

	<!-- Display core properties-->
	<Target Name="CORE" DependsOnTargets="ARTIFACTS" >
		<Message Text="DevDrive: $(DevDrive)"/>
		<Message Text="MainDir: $(MainDir)"/>
		<Message Text="Product Version: $(ProductVersion)"/>
		<Message Text="SolutionName: $(SolutionName)"/>
		<Message Text="SolutionDir: $(SolutionDir)"/>
		<Message Text="DeploymentFolder: $(DeploymentFolder)"/>
		<Message Text="ArtifactsSolutionFolder: $(ArtifactsSolutionFolder)"/>
		<Message Text="SetupFolder: $(SetupFolder)"/>
		<Message Text="ArtifactsFolder: $(ArtifactsFolder)"/>
		<Message Text="ArtifactsTestResultsFolder: $(ArtifactsTestResultsFolder)"/>
		<Message Text="GitHub Action: $(GITHUB_ACTION)" />
		<Message Text="==> DONE"/>
	</Target>

	<!-- Update ntools locally for testing -->
	<Target Name="UPDATE_NTOOLS" DependsOnTargets="IS_ADMIN" >
		<PropertyGroup>
			<SRC>$(SolutionDir)\nbuild\resources</SRC>
			<DST>$(DeploymentFolder)</DST>
		</PropertyGroup>
		<ItemGroup>
			<SourceFiles Include="
						 $(SRC)\ntools.json;
						 $(SRC)\*.targets" />
		</ItemGroup>
		<Copy SourceFiles="@(SourceFiles)" DestinationFolder="$(DST)" />
	</Target>

	<!-- Update the ntools-launcher nuget package in the local feed for testing - not needed for normal builds -->
	<Target Name="NUGET_UPDATE">
		<!--Nuget does not support updating a package in the local feed without version - so we need to remove it first-->
		<Exec Command='dotnet remove package ntools-launcher"' WorkingDirectory='$(SolutionDir)\Nbackup'></Exec>
		<Exec Command='dotnet remove package ntools-launcher"' WorkingDirectory='$(SolutionDir)\NbuildTasks'></Exec>
		<Exec Command='dotnet add package ntools-launcher  --source "C:\Artifacts\nupkgs"' WorkingDirectory='$(SolutionDir)\Nbackup'></Exec>
		<Exec Command='dotnet add package ntools-launcher  --source "C:\Artifacts\nupkgs"' WorkingDirectory='$(SolutionDir)\NbuildTasks'></Exec>
	</Target>

	<!-- Example of a target that displays a yellow color message -->
	<Target Name="YELLOW_MESSAGE">
		<ColorMessage Message="This is a message displayed in Yellow" Color="Yellow" />
	</Target>

	<!-- Example of a target that displays a red color message -->
	<Target Name="RED_MESSAGE">
		<ColorMessage Message="This is a message displayed in Red" Color="Red" />
	</Target>

	<!-- Install dotnet-outdated-tool globally -->
	<Target Name="INSTALL_DOTNET_OUTDATED_TOOL">
		<Exec Command="dotnet tool install --global dotnet-outdated-tool" />
		<Message Text="dotnet-outdated-tool installed globally." />
		<Message Text="==> DONE"/>
	</Target>

	<!-- Update all NuGet packages to the latest version -->
	<Target Name="UPDATE_NUGET_PACKAGES">
		<Exec Command="dotnet outdated --upgrade" WorkingDirectory="$(SolutionDir)" />
		<Message Text="NuGet packages updated to the latest version." />
		<Message Text="==> DONE"/>
	</Target>

	<!-- List all NuGet sources -->
	<Target Name="LIST_NUGET_SOURCES">
		<Exec Command="dotnet nuget list source" />
		<Message Text="Listed all NuGet sources." />
		<Message Text="==> DONE"/>
	</Target>

	<!-- Update documentation versions from JSON configuration files -->
	<UsingTask TaskName="NbuildTasks.UpdateVersionsInDocs" AssemblyFile="C:\source\ntools\Release\NbuildTasks.dll" />
  <!-- Removed SetupPreCommitHooks task: now isolated in feature branch -->
	<UsingTask TaskName="NbuildTasks.GenerateCommitMessage" AssemblyFile="C:\source\ntools\Release\NbuildTasks.dll" />
	
	<Target Name="UPDATE_DOC_VERSIONS" DependsOnTargets="PROPERTIES">
		<UpdateVersionsInDocs 
			DevSetupPath="$(SolutionDir)\dev-setup" 
			DocsPath="$(SolutionDir)\docs\ntools\ntools.md" />
		<Message Text="Documentation versions updated successfully." />
		<Message Text="==> DONE"/>
	</Target>

  <!-- Removed SETUP_HOOKS target: now isolated in feature branch -->

	<!-- Intelligent commit message generation -->
	<Target Name="GENERATE_COMMIT_MESSAGE" DependsOnTargets="PROPERTIES">
		<PropertyGroup>
			<CommitType Condition="'$(CommitType)' == ''">feat</CommitType>
			<CommitScope Condition="'$(CommitScope)' == ''"></CommitScope>
			<CommitMessageFile Condition="'$(CommitMessageFile)' == ''">$(SolutionDir)\.commit-message</CommitMessageFile>
		</PropertyGroup>
		
		<GenerateCommitMessage 
			WorkingDirectory="$(SolutionDir)"
			CommitType="$(CommitType)"
			Scope="$(CommitScope)"
			CommitMessageFile="$(CommitMessageFile)">
			<Output TaskParameter="CommitMessage" PropertyName="GeneratedCommitMessage" />
		</GenerateCommitMessage>
		
		<Message Text="Generated commit message: $(GeneratedCommitMessage)" />
		<Message Text="==> DONE"/>
	</Target>

	<!-- Automated Git commit with intelligent message generation -->
	<Target Name="GIT_COMMIT_INFRASTRUCTURE" DependsOnTargets="UPDATE_DOC_VERSIONS;GENERATE_COMMIT_MESSAGE">
		<PropertyGroup>
			<!-- Use generated message if no custom message provided -->
			<FinalCommitMessage Condition="'$(CommitMessage)' == ''">$(GeneratedCommitMessage)</FinalCommitMessage>
			<FinalCommitMessage Condition="'$(CommitMessage)' != ''">$(CommitMessage)</FinalCommitMessage>
			<GitAddFiles Condition="'$(GitAddFiles)' == ''">.</GitAddFiles>
		</PropertyGroup>
		
		<!-- Check if there are any changes to commit -->
		<Exec Command="git status --porcelain" ConsoleToMSBuild="true" WorkingDirectory="$(SolutionDir)">
			<Output TaskParameter="ConsoleOutput" PropertyName="GitStatus" />
		</Exec>
		
		<Message Text="Git status: $(GitStatus)" Condition="'$(GitStatus)' != ''" />
		<Message Text="No changes to commit." Condition="'$(GitStatus)' == ''" />
		
		<!-- Add files to staging area -->
		<Exec Command="git add $(GitAddFiles)" 
			  WorkingDirectory="$(SolutionDir)" 
			  Condition="'$(GitStatus)' != ''" />
		<Message Text="Added files to staging area: $(GitAddFiles)" Condition="'$(GitStatus)' != ''" />
		
		<!-- Commit the changes with intelligent message -->
		<Exec Command='git commit -m "$(FinalCommitMessage)"' 
			  WorkingDirectory="$(SolutionDir)" 
			  Condition="'$(GitStatus)' != ''" />
		<Message Text="Committed changes with message: $(FinalCommitMessage)" Condition="'$(GitStatus)' != ''" />
		
		<Message Text="==> DONE"/>
	</Target>

	<!-- Combined target: Update versions and commit with smart message -->
	<Target Name="UPDATE_AND_COMMIT" DependsOnTargets="UPDATE_DOC_VERSIONS">
		<PropertyGroup>
			<CommitType>docs</CommitType>
			<CommitScope>automation</CommitScope>
		</PropertyGroup>
		
		<CallTarget Targets="GIT_COMMIT_INFRASTRUCTURE" />
		<Message Text="==> DONE"/>
	</Target>

	<!-- Full infrastructure update and commit with intelligent analysis -->
	<Target Name="INFRASTRUCTURE_COMMIT" DependsOnTargets="SOLUTION">
		<PropertyGroup>
			<CommitType Condition="'$(CommitType)' == ''">feat</CommitType>
			<CommitScope Condition="'$(CommitScope)' == ''">infrastructure</CommitScope>
		</PropertyGroup>
		
		<CallTarget Targets="GIT_COMMIT_INFRASTRUCTURE" />
		<Message Text="==> DONE"/>
	</Target>

	<!-- Preview commit message without committing -->
	<Target Name="PREVIEW_COMMIT_MESSAGE">
		<CallTarget Targets="GENERATE_COMMIT_MESSAGE" />
		<Message Text="==> Commit message preview complete. Check $(SolutionDir)\.commit-message file"/>
	</Target>


	<!-- Install ReportGenerator tool globally -->
	<Target Name="INSTALL_REPORTGENERATOR">
		<Exec Command="dotnet tool install -g dotnet-reportgenerator-globaltool" />
		<Message Text="ReportGenerator tool installed globally." />
		<Message Text="==> DONE"/>
	</Target>

</Project>

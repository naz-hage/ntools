<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<!-- Reference: https://learn.microsoft.com/en-us/visualstudio/msbuild/walkthrough-using-msbuild?view=vs-2022 -->
	
	<Import Project="$(ProgramFiles)\Nbuild\common.targets"/>

	<PropertyGroup>
        <!-- This is the folder where the *.sln resides-->
		<SolutionName>$([System.IO.Path]::GetFileNameWithoutExtension('$(MSBuildProjectDirectory)'))</SolutionName>
        <!-- This is the location when the app deployed or installed -->
        <DeploymentFolder>$(ProgramFiles)\Nbuild</DeploymentFolder>
	</PropertyGroup>
	
    <Target Name="ARTIFACTS" DependsOnTargets="TAG">
      <PropertyGroup>
        <ArtifactsFolder>$(ArtifactsDir)\$(SolutionName)\$(TargetRelease)\$(ProductVersion)</ArtifactsFolder>
		<ArtifactsTestResultsFolder>$(ArtifactsDir)\$(SolutionName)\TestResults\$(ProductVersion)</ArtifactsTestResultsFolder>
      </PropertyGroup>  
      <ItemGroup>
            <BinaryFiles 
						Exclude="
						 $(SolutionDir)\$(TargetRelease)\**\*.pdb;
						 $(SolutionDir)\$(TargetRelease)\test.*;
						 $(SolutionDir)\$(TargetRelease)\*test*;
						 $(SolutionDir)\$(TargetRelease)\Nuget*;
						 $(SolutionDir)\$(TargetRelease)\*CodeCoverage*"

						Include="
                        $(SolutionDir)\$(TargetRelease)\*.exe;
                        $(SolutionDir)\$(TargetRelease)\*.exe.config;
                        $(SolutionDir)\$(TargetRelease)\*.json;
						$(SolutionDir)\Nbuild\resources\*.targets;
						$(SolutionDir)\Nbuild\resources\*.ps1;
                        $(SolutionDir)\$(TargetRelease)\*.dll"
						/>

            <RunTimesNetStandard20 Include = "
								   $(SolutionDir)\$(TargetRelease)\netstandard2.0\*.*"
                                    Exclude="
						            $(SolutionDir)\$(TargetRelease)\**\*.pdb"
						            />
        </ItemGroup>
		
        <Message Text="==> DONE"/>
    </Target>

	<Target Name="NUGET_PACK" DependsOnTargets="TAG">
		<PropertyGroup>
			<NugetPackagePath>$(ArtifactsDir)\$(SolutionName)\Nuget\$(ProductVersion)</NugetPackagePath>
			<LocalNugetFeed>$(ArtifactsDir)\nupkgs</LocalNugetFeed>
		</PropertyGroup>
		<Exec Command='"$(NugetExe)" pack $(SolutionDir)\launcher\ntools-launcher.nuspec -Version $(ProductVersion) -OutputDirectory $(NugetPackagePath)'/>
		<Exec Command='rd $(LocalNugetFeed)\ntools-launcher\$(ProductVersion) /s /q'/>
		<Exec Command='"$(NugetExe)" add $(NugetPackagePath)\$(SolutionName)-launcher.$(ProductVersion).nupkg -Source "$(LocalNugetFeed)"'/>
		<Message Text="==> DONE"/>
		</Target>
	
	<Target Name="NUGET_PUBLISH">
		<PropertyGroup>
			<NugetApiKey>$(USERPROFILE)\NugetApiKey.txt</NugetApiKey>
		</PropertyGroup>
		<ReadLinesFromFile File="$(ApiKeyFile)">
		<Output TaskParameter="Lines" PropertyName="NugetApiKey" />
		</ReadLinesFromFile>
		<MSBuild Projects="$(SolutionDir)\launcher\launcher.csproj" Properties="Configuration=$(TargetRelease);Platform=Any CPU;Version=$(ProductVersion);AssemblyVersion=$(ProductVersion)"/>
		<Exec Command='$(NugetExe) push $(NugetPackagePath)\$(SolutionName)-launcher.$(ProductVersion).nupkg -Source https://api.nuget.org/v3/index.json -ApiKey $(NugetApiKey)'/>
		<Message Text="==> DONE"/>	
	</Target>

	<Target Name="CLEAN_ARTIFACTS" AfterTargets="PACKAGE">
		<Message Text="Removing $(ArtifactsFolder)"> </Message>
		<RemoveDir Directories="$(ArtifactsFolder);"/>
		<Message Text="==> DONE"/>
	</Target>

	<Target Name="CLEAN_TEST" DependsOnTargets="IS_ADMIN">
		<ItemGroup>
			<NGitFiles
						Exclude="
						 $(SolutionDir)\$(TargetRelease)\**\*.pdb;
						 $(SolutionDir)\$(TargetRelease)\test.*;
						 $(SolutionDir)\$(TargetRelease)\*test*;
						 $(SolutionDir)\$(TargetRelease)\Nuget*;
						 $(SolutionDir)\$(TargetRelease)\*CodeCoverage*"

						Include="
                        $(SolutionDir)\$(TargetRelease)\ngit*;
						$(SolutionDir)\$(TargetRelease)\launcher*;
                        $(SolutionDir)\Nbuild\resources\*.targets;
                        $(SolutionDir)\$(TargetRelease)\commandline.dll;  
                        $(SolutionDir)\$(TargetRelease)\OutputColorizer.dll"
						/>
		</ItemGroup>
		<Exec Command='del "$(DeploymentFolder)" /q' />
		<Copy SourceFiles="@(NGitFiles)"
			DestinationFolder="$(DeploymentFolder)"
			Condition="'@(NGitFiles, ' ')' != ''"
			SkipUnchangedFiles="true" />
		<Exec Command='dir "$(DeploymentFolder)"'></Exec>

		<Message Text="==> DONE"/>
	</Target>
	
	<Target Name="TEST_STAGING_DEPLOY" DependsOnTargets="
				CLEAN;
                TAG;
                SOLUTION;
                SAVE_ARTIFACTS;
                PACKAGE;
				">
		<Exec Command='dir "$(DeploymentFolder)"'></Exec>
		<Message Text="==> DONE"/>
	</Target>

	<Target Name="TEST_GIT" >
		<Git Command="GetBranch">
			<Output TaskParameter="Output" PropertyName="GitBranch"/>
		</Git>
		<Message Text="Task - Git Branch:'$(GitBranch)'"/>

		<RedError Condition="'$(GitBranch)' == ''" Message="GetBranch Failed: GitBranch property is not defined." />

		<Git Command="GetTag" >
			<Output TaskParameter="Output" PropertyName="ProductVersion"/>
		</Git>
		<Message Text="Task - Git Tag:'$(ProductVersion)'"/>

		<RedError Condition="'$(ProductVersion)' == ''" Message="GetTag Failed: Product Version property is not defined." />

	
		<Git Command="AutoTag" TaskParameter="Staging">
			<Output TaskParameter="Output" PropertyName="ProductVersion"/>
		</Git>
		<Message Text="Task - Git Next Tag:'$(ProductVersion)'"/>

		<RedError Condition="'$(ProductVersion)' == ''" Message="AutoTag Staging Failed: Product Version property is not defined." />

		<Git Command="SetTag" TaskParameter="$(ProductVersion)">
			<Output TaskParameter="Output" PropertyName="ProductVersion"/>
		</Git>
		<Message Text="Task - Git Next Tag:'$(ProductVersion)'"/>

		<RedError Condition="'$(ProductVersion)' == ''" Message="SetTag Failed: Product Version property is not defined." />

		<Git Command="PushTag" TaskParameter="$(ProductVersion)">
			<Output TaskParameter="Output" PropertyName="ProductVersion"/>
		</Git>

		<Message Text="Task - Git Push Tag Result:'$(Result)'"/>

		<RedError Condition="'$(Result)' != 'True'" Message="DeteteTag Failed: Product Version property is not defined." />

		<Git Command="DeleteTag" TaskParameter="$(ProductVersion)">
			<Output TaskParameter="Output" PropertyName="Result"/>
		</Git>
		<Message Text="Task - Git Delete Tag Result:'$(Result)'"/>

		<RedError Condition="'$(Result)' != 'True'" Message="DeteteTag Failed: Product Version property is not defined." />

		<Message Text="==> DONE"/>
	</Target>

	<Target Name="LOCAL" DependsOnTargets="
                SOLUTION;
                SAVE_ARTIFACTS;
                PACKAGE"
				>
	</Target>

	<Target Name="DEPLOY_LOCAL" DependsOnTargets="
                STAGING_LOCAL;
                DEPLOY">
		<Exec Command='dir "$(DeploymentFolder)"'></Exec>
	</Target>

	<!-- Test for FileVersion task and powershell GetFileVersion.ps1-->
	<Target Name="FILE_VERSION"  DependsOnTargets="ARTIFACTS">
		<PropertyGroup>
			<FileName>$(SolutionDir)\$(TargetRelease)\nb.exe</FileName>
		</PropertyGroup>
		<Exec Command='powershell -File "$(BuildTools)\GetFileVersion.ps1" "$(FileName)"' ConsoleToMSBuild="true">
			<Output TaskParameter="ConsoleOutput" PropertyName="Version" />
		</Exec>
		<Message Text="Powershell File version: $(Version)" />

		<FileVersion Name="%(BinaryFiles.Identity)" Condition="'%(Extension)'=='.exe' Or '%(Extension)'=='.dll'" >
			<Output TaskParameter="Output" PropertyName="Version"/>
		</FileVersion>
		<Message Text="File version: $(Version)" />
		
		<Message Text="==> DONE"/>
	</Target>
	
	<!-- Test File Download-->
	<Target Name="FILE_DOWNLOAD" DependsOnTargets="APP_COMMON">
		<PropertyGroup>
			<WebUri>https://aka.ms/vs/17/release/vs_BuildTools.exe</WebUri>
			<FileName>$(DownloadsDirectory)\vs_BuildTools.exe</FileName>
		</PropertyGroup>
		<RedError Condition="'$(IsAdmin)' == false" Message="Must be an admin to install $(NodeAppName)" />

		<Delete Files="$(FileName)" Condition="Exists('$(FileName)') == true" />

		<WebDownload WebUri="$(WebUri)" FileName="$(FileName)" />

		<Exec Command='$(FileName) --add Microsoft.VisualStudio.Workload.MSBuildTools --quiet'></Exec>
		<Message Text="==> DONE"/>
	</Target>
	
</Project>
